
output_Core_0\TestMsg_Core_0.elf:     file format elf32-littlearm


Disassembly of section text_startup:

fffd0000 <_startup>:
// In order for the interrupts to work, this code section must be placed at interrupts vector table physical address or copy it to later on (from '_startup' to 'reset_handler').

.section .text.startup

_startup:
/*0x00*/    b reset_handler                 /* Note: start with SVC/SWI processor mode */
fffd0000:	ea000039 	b	fffd00ec <reset_handler>
/*0x04*/    b undefined_instruction_handler /* Undef processor mode */
fffd0004:	ea000014 	b	fffd005c <undefined_instruction_handler>
/*0x08*/    b svc_handler                   /* SVC/SWI processor mode */
fffd0008:	ea000025 	b	fffd00a4 <svc_handler>
/*0x0C*/    b prefetch_abort_handler        /* Abort processor mode */
fffd000c:	ea000018 	b	fffd0074 <prefetch_abort_handler>
/*0x10*/    b data_abort_handler            /* Abort processor mode */
fffd0010:	ea00001d 	b	fffd008c <data_abort_handler>
/*0x14*/    b error							/* reserved */
fffd0014:	ea00000e 	b	fffd0054 <error>
/*0x18*/    b irq_handler                   /* IRQ processor mode */
fffd0018:	ea000027 	b	fffd00bc <irq_handler>
/*0x1C*/    b fiq_handler                   /* FIQ processor mode */
fffd001c:	ea00002c 	b	fffd00d4 <fiq_handler>
fffd0020:	00000000 	.word	0x00000000

fffd0024 <pUndefinedInstructionRoutine>:
fffd0024:	fffd0054 	.word	0xfffd0054

fffd0028 <pSvcRoutine>:
fffd0028:	fffd0054 	.word	0xfffd0054

fffd002c <pPrefetchAbortRoutine>:
fffd002c:	fffd0054 	.word	0xfffd0054

fffd0030 <pDataAbortRoutine>:
fffd0030:	fffd0054 	.word	0xfffd0054
fffd0034:	00000000 	.word	0x00000000

fffd0038 <pIrqRoutine>:
fffd0038:	fffd0054 	.word	0xfffd0054

fffd003c <pFiqRoutine>:
fffd003c:	fffd0054 	.word	0xfffd0054

fffd0040 <TestMsg>:
fffd0040:	12345678 	.word	0x12345678
fffd0044:	10000001 	.word	0x10000001
fffd0048:	fffd0000 	.word	0xfffd0000
fffd004c:	fffd0000 	.word	0xfffd0000
fffd0050:	ffffffff 	.word	0xffffffff

fffd0054 <error>:
              
/*.skip 0x40*/
              
error:
    // BKPT 0xEEEE
	mov r0, #-1
fffd0054:	e3e00000 	mvn	r0, #0
	b _exit
fffd0058:	ea000052 	b	fffd01a8 <_exit>

fffd005c <undefined_instruction_handler>:
	//b reset_handler
    //b   .
    // MOVS pc, lr // typically there is nowhere to return to !!

undefined_instruction_handler:
    push {r0-r12,lr}
fffd005c:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    mov  r0, lr			// r0 is the returning address while the undefined instruction address is at -4 in ARM state and -2 in Thumb state.
fffd0060:	e1a0000e 	mov	r0, lr
    ldr r1, pUndefinedInstructionRoutine
fffd0064:	e51f1048 	ldr	r1, [pc, #-72]	; fffd0024 <pUndefinedInstructionRoutine>
    blx  r1
fffd0068:	e12fff31 	blx	r1
    pop {r0-r12,lr}
fffd006c:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    b reset_handler
fffd0070:	ea00001d 	b	fffd00ec <reset_handler>

fffd0074 <prefetch_abort_handler>:
    // MOVS pc,lr  // typically there is nowhere to return to !!

prefetch_abort_handler:
    push {r0-r12,lr}
fffd0074:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    sub  r0, lr, #4		// r0 is the address of the aborting prefetch 
fffd0078:	e24e0004 	sub	r0, lr, #4
    ldr r1, pPrefetchAbortRoutine
fffd007c:	e51f1058 	ldr	r1, [pc, #-88]	; fffd002c <pPrefetchAbortRoutine>
    blx r1
fffd0080:	e12fff31 	blx	r1
    pop {r0-r12,lr}
fffd0084:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    b reset_handler
fffd0088:	ea000017 	b	fffd00ec <reset_handler>

fffd008c <data_abort_handler>:
    // SUBS pc, lr , #4	// retuns to the aborting address; typically there is nowhere to return to !!

data_abort_handler:
    push {r0-r12,lr}
fffd008c:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    sub  r0, lr, #8		// r0 is the address of the Load or Store instruction that generated the Data Abort.
fffd0090:	e24e0008 	sub	r0, lr, #8
    ldr r1, pDataAbortRoutine
fffd0094:	e51f106c 	ldr	r1, [pc, #-108]	; fffd0030 <pDataAbortRoutine>
    blx r1
fffd0098:	e12fff31 	blx	r1
    pop {r0-r12,lr}
fffd009c:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    SUBS pc, lr, #4		// retuns to the next command (assuming ARM state) after the aborting instruction;
fffd00a0:	e25ef004 	subs	pc, lr, #4

fffd00a4 <svc_handler>:

svc_handler: /*SWI*/
    push {r0-r12,lr}
fffd00a4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    mov  r0, lr			// r0 is the returning address while the calling address (previous instruction) is -4 in ARM state and -2 in Thumb state.
fffd00a8:	e1a0000e 	mov	r0, lr
    ldr r1, pSvcRoutine
fffd00ac:	e51f108c 	ldr	r1, [pc, #-140]	; fffd0028 <pSvcRoutine>
    blx r1
fffd00b0:	e12fff31 	blx	r1
    pop {r0-r12,lr}
fffd00b4:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    MOVS pc,lr  // The S means restore CPSR from SPSR
fffd00b8:	e1b0f00e 	movs	pc, lr

fffd00bc <irq_handler>:

irq_handler:
	push {r0-r12,lr}
fffd00bc:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	sub  r0, lr, #4		// r0 is the address of the instruction that was not executed because the IRQ took priority
fffd00c0:	e24e0004 	sub	r0, lr, #4
    ldr r1, pIrqRoutine
fffd00c4:	e51f1094 	ldr	r1, [pc, #-148]	; fffd0038 <pIrqRoutine>
    blx r1
fffd00c8:	e12fff31 	blx	r1
    pop {r0-r12,lr}
fffd00cc:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    SUBS pc, lr , #4
fffd00d0:	e25ef004 	subs	pc, lr, #4

fffd00d4 <fiq_handler>:

fiq_handler: // TBD: there is no need to push all registers.....
    push {r0-r12,lr}
fffd00d4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    sub  r0, lr, #4		// r0 is the address of the instruction that was not executed because the FIQ took priority
fffd00d8:	e24e0004 	sub	r0, lr, #4
    ldr r1, pFiqRoutine
fffd00dc:	e51f10a8 	ldr	r1, [pc, #-168]	; fffd003c <pFiqRoutine>
    blx r1
fffd00e0:	e12fff31 	blx	r1
    pop {r0-r12,lr}
fffd00e4:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
    SUBS pc, lr , #4
fffd00e8:	e25ef004 	subs	pc, lr, #4

fffd00ec <reset_handler>:
reset_handler:

	// This code use it's own stack and not the caller stack (i.e, caller can be UBOOT or FUP).
	// the code push caller registers into caller stack (there is no need to push r0 since it is the return value)
	// If caller stack is not initialize or invalid address this code may stuck (e.g. when using JTAG to load a code. In this case init the stack via JTAG to some RAM address before run the code)
	push {r1-r12,lr}
fffd00ec:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	
	// store caller sp register into top of the new stack
	ldr r0, =__StackTop // top of the stack
fffd00f0:	e59f00c4 	ldr	r0, [pc, #196]	; fffd01bc <_exit+0x14>
	sub r0, r0 ,#4
fffd00f4:	e2400004 	sub	r0, r0, #4
	str sp, [r0], #-4
fffd00f8:	e400d004 	str	sp, [r0], #-4

    /* Init the stacks pointers */
    MRS r2, CPSR        // MRS: Move the contents of special register CPSR to a general-purpose register
fffd00fc:	e10f2000 	mrs	r2, CPSR
    BIC r2, r2, #0x1f   // r2 = r2 & (~0x1F) ==> clear bits 0..4;
fffd0100:	e3c2201f 	bic	r2, r2, #31
    ORR r2, r2, #0x1C0  // r2 = r2 | 0x1C0 ==> disable FIQ, IRQ and Abort
fffd0104:	e3822d07 	orr	r2, r2, #448	; 0x1c0

    ORR r3, r2, #0x11 // enter FIQ mode
fffd0108:	e3823011 	orr	r3, r2, #17
    MSR CPSR_c, r3
fffd010c:	e121f003 	msr	CPSR_c, r3
    mov sp, r0
fffd0110:	e1a0d000 	mov	sp, r0
    sub r0, r0, #0x100  // will use 0x100 bytes for FIQ
fffd0114:	e2400c01 	sub	r0, r0, #256	; 0x100

    ORR r3, r2, #0x12 // enter IRQ mode
fffd0118:	e3823012 	orr	r3, r2, #18
    MSR CPSR_c, r3
fffd011c:	e121f003 	msr	CPSR_c, r3
    mov sp, r0
fffd0120:	e1a0d000 	mov	sp, r0
    sub r0, r0, #0x100  // will use 0x100 bytes for IRQ
fffd0124:	e2400c01 	sub	r0, r0, #256	; 0x100

    ORR r3, r2, #0x17 // enter Abort mode
fffd0128:	e3823017 	orr	r3, r2, #23
    MSR CPSR_c, r3
fffd012c:	e121f003 	msr	CPSR_c, r3
    mov sp, r0
fffd0130:	e1a0d000 	mov	sp, r0
    sub r0, r0, #0x100  // will use 0x100 bytes for Abort
fffd0134:	e2400c01 	sub	r0, r0, #256	; 0x100

    ORR r3, r2, #0x1B // enter Undef mode
fffd0138:	e382301b 	orr	r3, r2, #27
    MSR CPSR_c, r3
fffd013c:	e121f003 	msr	CPSR_c, r3
    mov sp, r0
fffd0140:	e1a0d000 	mov	sp, r0
    sub r0, r0, #0x100  // will use 0x100 bytes for Undef
fffd0144:	e2400c01 	sub	r0, r0, #256	; 0x100
    
    ORR r3, r2, #0x13 // enter SVC mode
fffd0148:	e3823013 	orr	r3, r2, #19
    MSR CPSR_c, r3
fffd014c:	e121f003 	msr	CPSR_c, r3
    mov sp, r0
fffd0150:	e1a0d000 	mov	sp, r0
    MSR CPSR_c, r3
    mov sp, r0         // will use up to  __StackLimit
    */
    
    /* Copy the data segment initializers from 'ROM' to 'RAM' */
    ldr     r0, =_sidata  /* Start address for the initialization values of the .data section */
fffd0154:	e59f0064 	ldr	r0, [pc, #100]	; fffd01c0 <_exit+0x18>
    ldr     r1, =_sdata   /* Start address for the .data section */
fffd0158:	e59f1064 	ldr	r1, [pc, #100]	; fffd01c4 <_exit+0x1c>
    ldr     r2, =_edata   /* End address for the .data section */
fffd015c:	e59f2064 	ldr	r2, [pc, #100]	; fffd01c8 <_exit+0x20>

fffd0160 <data_loop>:
 data_loop:
    cmp     r1, r2
fffd0160:	e1510002 	cmp	r1, r2
    itt     lt
    ldrlt   r3, [r0], #4
fffd0164:	b4903004 	ldrlt	r3, [r0], #4
    strlt   r3, [r1], #4
fffd0168:	b4813004 	strlt	r3, [r1], #4
    blt     data_loop
fffd016c:	bafffffb 	blt	fffd0160 <data_loop>

     /* Zero fill the stack  */
    ldr     r0, =__StackLimit   /* Start address for the stack  */
fffd0170:	e59f0054 	ldr	r0, [pc, #84]	; fffd01cc <_exit+0x24>
    ldr     r1, =__StackTop     /* End address for the stack */
fffd0174:	e59f1040 	ldr	r1, [pc, #64]	; fffd01bc <_exit+0x14>
    sub		r1, r1 ,#8
fffd0178:	e2411008 	sub	r1, r1, #8
    mov     r2, #0
fffd017c:	e3a02000 	mov	r2, #0

fffd0180 <stack_loop>:
 stack_loop:
    cmp     r0, r1
fffd0180:	e1500001 	cmp	r0, r1
    it      lt
    strlt   r2, [r0], #4
fffd0184:	b4802004 	strlt	r2, [r0], #4
    blt     stack_loop
fffd0188:	bafffffc 	blt	fffd0180 <stack_loop>

    /* Zero fill the bss segment  */
    ldr     r0, =__bss_start__      /* Start address for the .bss section */
fffd018c:	e59f003c 	ldr	r0, [pc, #60]	; fffd01d0 <_exit+0x28>
    ldr     r1, =__bss_end__        /* End address for the .bss section   */
fffd0190:	e59f103c 	ldr	r1, [pc, #60]	; fffd01d4 <_exit+0x2c>
    mov     r2, #0
fffd0194:	e3a02000 	mov	r2, #0

fffd0198 <bss_loop>:
 bss_loop:
    cmp     r0, r1
fffd0198:	e1500001 	cmp	r0, r1
    it      lt
    strlt   r2, [r0], #4
fffd019c:	b4802004 	strlt	r2, [r0], #4
    blt     bss_loop
fffd01a0:	bafffffc 	blt	fffd0198 <bss_loop>


	/* jump to main  */
    bl main
fffd01a4:	eb000f11 	bl	fffd3df0 <main>

fffd01a8 <_exit>:
    /* return from main, r0 is update, all other are invalid */
 
_exit:

    // return caller sp and registers (except r0)
    ldr r1, =__StackTop // top of the stack
fffd01a8:	e59f100c 	ldr	r1, [pc, #12]	; fffd01bc <_exit+0x14>
    sub r1, r1 ,#4
fffd01ac:	e2411004 	sub	r1, r1, #4
	ldr sp, [r1]
fffd01b0:	e591d000 	ldr	sp, [r1]
    pop {r1-r12,pc}
fffd01b4:	e8bd9ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, pc}
	
    /* endless loop in case of a problem */
    b   .
fffd01b8:	eafffffe 	b	fffd01b8 <_exit+0x10>
	ldr r0, =__StackTop // top of the stack
fffd01bc:	fffdedc4 	.word	0xfffdedc4
    ldr     r0, =_sidata  /* Start address for the initialization values of the .data section */
fffd01c0:	fffdd270 	.word	0xfffdd270
    ldr     r1, =_sdata   /* Start address for the .data section */
fffd01c4:	fffdd270 	.word	0xfffdd270
    ldr     r2, =_edata   /* End address for the .data section */
fffd01c8:	fffddc34 	.word	0xfffddc34
    ldr     r0, =__StackLimit   /* Start address for the stack  */
fffd01cc:	fffdddc4 	.word	0xfffdddc4
    ldr     r0, =__bss_start__      /* Start address for the .bss section */
fffd01d0:	fffddc34 	.word	0xfffddc34
    ldr     r1, =__bss_end__        /* End address for the .bss section   */
fffd01d4:	fffdddc4 	.word	0xfffdddc4

Disassembly of section text_all_others:

fffd01d8 <AHB2PCI_Config_Read>:
DWORD AHB2PCI_Config_Read(DWORD address, BYTE size)
{
	DWORD readData, aligned_addr, aligned_data, offset = 0;
	DWORD cnt = 0;

	if ((size > sizeof(DWORD)) || (size == 3))
fffd01d8:	e241c003 	sub	r12, r1, #3
{
fffd01dc:	e92d4013 	push	{r0, r1, r4, lr}
	if ((size > sizeof(DWORD)) || (size == 3))
fffd01e0:	e16fcf1c 	clz	r12, r12
{
fffd01e4:	e59fe0cc 	ldr	lr, [pc, #204]	; fffd02b8 <AHB2PCI_Config_Read+0xe0>
	if ((size > sizeof(DWORD)) || (size == 3))
fffd01e8:	e1a0c2ac 	lsr	r12, r12, #5
fffd01ec:	e3510004 	cmp	r1, #4
fffd01f0:	838cc001 	orrhi	r12, r12, #1
{
fffd01f4:	e08fe00e 	add	lr, pc, lr
	if ((size > sizeof(DWORD)) || (size == 3))
fffd01f8:	e35c0000 	cmp	r12, #0
fffd01fc:	0a000006 	beq	fffd021c <AHB2PCI_Config_Read+0x44>
	{
		LogError ("AHB2PCI_Memory_Read error : Illegal data size (%d).\n", size);
fffd0200:	e59f00b4 	ldr	r0, [pc, #180]	; fffd02bc <AHB2PCI_Config_Read+0xe4>
fffd0204:	e08f0000 	add	r0, pc, r0
	{
		cnt++;
		if(cnt > 1000)
		{
			LogError("AHB2PCI_Config_Read: Read transaction time out! AHB_ISTATUS = 0x%04X\n", READ_REG(AHB_ISTATUS));
			return(0xDEADBEEF);
fffd0208:	e59f40b0 	ldr	r4, [pc, #176]	; fffd02c0 <AHB2PCI_Config_Read+0xe8>
			LogError("AHB2PCI_Config_Read: Read transaction time out! AHB_ISTATUS = 0x%04X\n", READ_REG(AHB_ISTATUS));
fffd020c:	eb001255 	bl	fffd4b68 <LogError>

	if (AHB2PCI_IsLogEnable_g == TRUE)
		LogMessage("AHB2PCI_Config_Read: read from address=0x%X, size=%d, data=0x%X (DW data=0x%X)\n", address, size, aligned_data, readData);

	return(aligned_data);
} // *End of AHB2PCI_Config_Read*
fffd0210:	e1a00004 	mov	r0, r4
fffd0214:	e28dd008 	add	sp, sp, #8
fffd0218:	e8bd8010 	pop	{r4, pc}
	WRITE_REG(RD_AHB_IBYTE, 0); 
fffd021c:	e59f30a0 	ldr	r3, [pc, #160]	; fffd02c4 <AHB2PCI_Config_Read+0xec>
fffd0220:	e1a02001 	mov	r2, r1
fffd0224:	e583c024 	str	r12, [r3, #36]	; 0x24
	WRITE_REG(AHB_ISTATUS, READ_REG(AHB_ISTATUS));
fffd0228:	e5931044 	ldr	r1, [r3, #68]	; 0x44
fffd022c:	e5831044 	str	r1, [r3, #68]	; 0x44
	aligned_addr = (address & ~0x3); // Bits 0,1 must be 0
fffd0230:	e3c01003 	bic	r1, r0, #3
	WRITE_REG(RD_PCI_ADDR, aligned_addr);
fffd0234:	e5831020 	str	r1, [r3, #32]
	WRITE_REG(RD_CONTROL, (1 << 0) | (PCI_CFG_READ << 4) | (4 << 8)); // read size must be 4
fffd0238:	e30014a1 	movw	r1, #1185	; 0x4a1
fffd023c:	e5831028 	str	r1, [r3, #40]	; 0x28
	while(!READ_BIT_REG(AHB_ISTATUS, RD_END))
fffd0240:	e30013e9 	movw	r1, #1001	; 0x3e9
fffd0244:	e593c044 	ldr	r12, [r3, #68]	; 0x44
fffd0248:	e31c0c01 	tst	r12, #256	; 0x100
fffd024c:	0a000013 	beq	fffd02a0 <AHB2PCI_Config_Read+0xc8>
	readData = READ_REG(DATA_REG);
fffd0250:	e593c400 	ldr	r12, [r3, #1024]	; 0x400
	offset = (address % 4);			 // the original address includes the offset in the lower two bits
fffd0254:	e2004003 	and	r4, r0, #3
	aligned_data = (readData >> (offset * 8)) & FIELD_MASK(0, size*8);
fffd0258:	e3a03001 	mov	r3, #1
fffd025c:	e1a01184 	lsl	r1, r4, #3
fffd0260:	e0834182 	add	r4, r3, r2, lsl #3
fffd0264:	e1a04413 	lsl	r4, r3, r4
	if (AHB2PCI_IsLogEnable_g == TRUE)
fffd0268:	e59f3058 	ldr	r3, [pc, #88]	; fffd02c8 <AHB2PCI_Config_Read+0xf0>
	aligned_data = (readData >> (offset * 8)) & FIELD_MASK(0, size*8);
fffd026c:	e2444001 	sub	r4, r4, #1
	if (AHB2PCI_IsLogEnable_g == TRUE)
fffd0270:	e79e3003 	ldr	r3, [lr, r3]
	aligned_data = (readData >> (offset * 8)) & FIELD_MASK(0, size*8);
fffd0274:	e004413c 	and	r4, r4, r12, lsr r1
	if (AHB2PCI_IsLogEnable_g == TRUE)
fffd0278:	e5933000 	ldr	r3, [r3]
fffd027c:	e3530001 	cmp	r3, #1
fffd0280:	1affffe2 	bne	fffd0210 <AHB2PCI_Config_Read+0x38>
		LogMessage("AHB2PCI_Config_Read: read from address=0x%X, size=%d, data=0x%X (DW data=0x%X)\n", address, size, aligned_data, readData);
fffd0284:	e1a01000 	mov	r1, r0
fffd0288:	e59f003c 	ldr	r0, [pc, #60]	; fffd02cc <AHB2PCI_Config_Read+0xf4>
fffd028c:	e58dc000 	str	r12, [sp]
fffd0290:	e1a03004 	mov	r3, r4
fffd0294:	e08f0000 	add	r0, pc, r0
fffd0298:	eb001206 	bl	fffd4ab8 <LogMessage>
fffd029c:	eaffffdb 	b	fffd0210 <AHB2PCI_Config_Read+0x38>
		if(cnt > 1000)
fffd02a0:	e2511001 	subs	r1, r1, #1
fffd02a4:	1affffe6 	bne	fffd0244 <AHB2PCI_Config_Read+0x6c>
			LogError("AHB2PCI_Config_Read: Read transaction time out! AHB_ISTATUS = 0x%04X\n", READ_REG(AHB_ISTATUS));
fffd02a8:	e59f0020 	ldr	r0, [pc, #32]	; fffd02d0 <AHB2PCI_Config_Read+0xf8>
fffd02ac:	e5931044 	ldr	r1, [r3, #68]	; 0x44
fffd02b0:	e08f0000 	add	r0, pc, r0
fffd02b4:	eaffffd3 	b	fffd0208 <AHB2PCI_Config_Read+0x30>
fffd02b8:	0000d028 	.word	0x0000d028
fffd02bc:	0000b3dc 	.word	0x0000b3dc
fffd02c0:	deadbeef 	.word	0xdeadbeef
fffd02c4:	f0400000 	.word	0xf0400000
fffd02c8:	00000004 	.word	0x00000004
fffd02cc:	0000b3c7 	.word	0x0000b3c7
fffd02d0:	0000b365 	.word	0x0000b365

fffd02d4 <AHB2PCI_Config_Write>:
/* The function takes care of "Data" - and puts it in the right place in the data */ 
/* reg(with iByte offset).														  */
/*--------------------------------------------------------------------------------*/

BOOL AHB2PCI_Config_Write(DWORD address, BYTE size, DWORD data, BYTE iByte)
{
fffd02d4:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
	DWORD offset;
	DWORD cnt = 0;
	
	if ((size > sizeof(DWORD)) || (size == 3))
fffd02d8:	e2414003 	sub	r4, r1, #3
fffd02dc:	e16f4f14 	clz	r4, r4
{
fffd02e0:	e59f610c 	ldr	r6, [pc, #268]	; fffd03f4 <AHB2PCI_Config_Write+0x120>
	if ((size > sizeof(DWORD)) || (size == 3))
fffd02e4:	e1a042a4 	lsr	r4, r4, #5
fffd02e8:	e3510004 	cmp	r1, #4
fffd02ec:	83844001 	orrhi	r4, r4, #1
{
fffd02f0:	e08f6006 	add	r6, pc, r6
	if ((size > sizeof(DWORD)) || (size == 3))
fffd02f4:	e3540000 	cmp	r4, #0
fffd02f8:	0a000006 	beq	fffd0318 <AHB2PCI_Config_Write+0x44>
	{
		LogError("AHB2PCI_Config_Write error: Illegal data size\n");
fffd02fc:	e59f00f4 	ldr	r0, [pc, #244]	; fffd03f8 <AHB2PCI_Config_Write+0x124>
		return(FALSE);
fffd0300:	e3a04000 	mov	r4, #0
		LogError("AHB2PCI_Config_Write error: Illegal data size\n");
fffd0304:	e08f0000 	add	r0, pc, r0
fffd0308:	eb001216 	bl	fffd4b68 <LogError>

	if (AHB2PCI_IsLogEnable_g == TRUE)
		LogMessage("AHB2PCI_Config_Write: wrote to address=0x%X, size=%d, data=0x%X, ibyte=%d\n", address, size, data, offset);

	return(TRUE);
} // *End of AHB2PCI_Config_Write*
fffd030c:	e1a00004 	mov	r0, r4
fffd0310:	e28dd008 	add	sp, sp, #8
fffd0314:	e8bd8070 	pop	{r4, r5, r6, pc}
fffd0318:	e1a05001 	mov	r5, r1
	offset = (address % 4) + iByte;
fffd031c:	e2001003 	and	r1, r0, #3
fffd0320:	e0811003 	add	r1, r1, r3
	if (offset > 3)
fffd0324:	e3510003 	cmp	r1, #3
fffd0328:	9a000003 	bls	fffd033c <AHB2PCI_Config_Write+0x68>
		LogError("Config_Write: Illegal offset(iByte): %d. Must be in range 0-3\n", offset);
fffd032c:	e59f00c8 	ldr	r0, [pc, #200]	; fffd03fc <AHB2PCI_Config_Write+0x128>
fffd0330:	e08f0000 	add	r0, pc, r0
			LogError("AHB2PCI_Config_Write: Write transaction time out! AHB_ISTATUS = 0x%04X\n", READ_REG(AHB_ISTATUS));
fffd0334:	eb00120b 	bl	fffd4b68 <LogError>
			return(FALSE);
fffd0338:	eafffff3 	b	fffd030c <AHB2PCI_Config_Write+0x38>
	if((offset + size) > 4)
fffd033c:	e0853001 	add	r3, r5, r1
fffd0340:	e3530004 	cmp	r3, #4
		LogError("Config_Write: Offset + size exceeding 4 byte size.\n", offset);
fffd0344:	859f00b4 	ldrhi	r0, [pc, #180]	; fffd0400 <AHB2PCI_Config_Write+0x12c>
fffd0348:	808f0000 	addhi	r0, pc, r0
fffd034c:	8afffff8 	bhi	fffd0334 <AHB2PCI_Config_Write+0x60>
	WRITE_REG(WR_AHB_IBYTE, offset);
fffd0350:	e59fc0ac 	ldr	r12, [pc, #172]	; fffd0404 <AHB2PCI_Config_Write+0x130>
	WRITE_REG(DATA_REG, ((data & FIELD_MASK(0,size*8)) << (offset * 8)));
fffd0354:	e3a0e001 	mov	lr, #1
	while(!READ_BIT_REG(AHB_ISTATUS, WR_END))
fffd0358:	e30043e9 	movw	r4, #1001	; 0x3e9
	WRITE_REG(WR_AHB_IBYTE, offset);
fffd035c:	e58c1004 	str	r1, [r12, #4]
	WRITE_REG(AHB_ISTATUS, READ_REG(AHB_ISTATUS));
fffd0360:	e59c3044 	ldr	r3, [r12, #68]	; 0x44
fffd0364:	e58c3044 	str	r3, [r12, #68]	; 0x44
	WRITE_REG(WR_PCI_ADDR, (address & 0xFFFFFFFC));
fffd0368:	e3c03003 	bic	r3, r0, #3
fffd036c:	e58c3000 	str	r3, [r12]
	WRITE_REG(DATA_REG, ((data & FIELD_MASK(0,size*8)) << (offset * 8)));
fffd0370:	e08e3185 	add	r3, lr, r5, lsl #3
fffd0374:	e1a0e31e 	lsl	lr, lr, r3
fffd0378:	e1a03181 	lsl	r3, r1, #3
fffd037c:	e24ee001 	sub	lr, lr, #1
fffd0380:	e00ee002 	and	lr, lr, r2
fffd0384:	e1a0e31e 	lsl	lr, lr, r3
	WRITE_REG(WR_CONTROL, (1 << 0) | (PCI_CFG_WRITE << 4) | (size << 8));
fffd0388:	e1a03405 	lsl	r3, r5, #8
fffd038c:	e38330b1 	orr	r3, r3, #177	; 0xb1
	WRITE_REG(DATA_REG, ((data & FIELD_MASK(0,size*8)) << (offset * 8)));
fffd0390:	e58ce400 	str	lr, [r12, #1024]	; 0x400
	WRITE_REG(WR_CONTROL, (1 << 0) | (PCI_CFG_WRITE << 4) | (size << 8));
fffd0394:	e58c3008 	str	r3, [r12, #8]
	while(!READ_BIT_REG(AHB_ISTATUS, WR_END))
fffd0398:	e59c3044 	ldr	r3, [r12, #68]	; 0x44
fffd039c:	e3130001 	tst	r3, #1
fffd03a0:	0a00000d 	beq	fffd03dc <AHB2PCI_Config_Write+0x108>
	if (AHB2PCI_IsLogEnable_g == TRUE)
fffd03a4:	e59f305c 	ldr	r3, [pc, #92]	; fffd0408 <AHB2PCI_Config_Write+0x134>
fffd03a8:	e7963003 	ldr	r3, [r6, r3]
fffd03ac:	e5934000 	ldr	r4, [r3]
fffd03b0:	e3540001 	cmp	r4, #1
	return(TRUE);
fffd03b4:	13a04001 	movne	r4, #1
	if (AHB2PCI_IsLogEnable_g == TRUE)
fffd03b8:	1affffd3 	bne	fffd030c <AHB2PCI_Config_Write+0x38>
		LogMessage("AHB2PCI_Config_Write: wrote to address=0x%X, size=%d, data=0x%X, ibyte=%d\n", address, size, data, offset);
fffd03bc:	e58d1000 	str	r1, [sp]
fffd03c0:	e1a01000 	mov	r1, r0
fffd03c4:	e59f0040 	ldr	r0, [pc, #64]	; fffd040c <AHB2PCI_Config_Write+0x138>
fffd03c8:	e1a03002 	mov	r3, r2
fffd03cc:	e1a02005 	mov	r2, r5
fffd03d0:	e08f0000 	add	r0, pc, r0
fffd03d4:	eb0011b7 	bl	fffd4ab8 <LogMessage>
fffd03d8:	eaffffcb 	b	fffd030c <AHB2PCI_Config_Write+0x38>
		if(cnt > 1000)
fffd03dc:	e2544001 	subs	r4, r4, #1
fffd03e0:	1affffec 	bne	fffd0398 <AHB2PCI_Config_Write+0xc4>
			LogError("AHB2PCI_Config_Write: Write transaction time out! AHB_ISTATUS = 0x%04X\n", READ_REG(AHB_ISTATUS));
fffd03e4:	e59f0024 	ldr	r0, [pc, #36]	; fffd0410 <AHB2PCI_Config_Write+0x13c>
fffd03e8:	e59c1044 	ldr	r1, [r12, #68]	; 0x44
fffd03ec:	e08f0000 	add	r0, pc, r0
fffd03f0:	eaffffcf 	b	fffd0334 <AHB2PCI_Config_Write+0x60>
fffd03f4:	0000cf2c 	.word	0x0000cf2c
fffd03f8:	0000b3a7 	.word	0x0000b3a7
fffd03fc:	0000b3aa 	.word	0x0000b3aa
fffd0400:	0000b3d1 	.word	0x0000b3d1
fffd0404:	f0400000 	.word	0xf0400000
fffd0408:	00000004 	.word	0x00000004
fffd040c:	0000b3c5 	.word	0x0000b3c5
fffd0410:	0000b361 	.word	0x0000b361

fffd0414 <AHB2PCI_Memory_Read>:
/* Description:                                                              	  */
/*               Memory Read transaction through the AHB2PCI Bridge.        	  */
/*--------------------------------------------------------------------------------*/

DWORD AHB2PCI_Memory_Read(DWORD address, BYTE size)
{
fffd0414:	e59f2094 	ldr	r2, [pc, #148]	; fffd04b0 <AHB2PCI_Memory_Read+0x9c>
	DWORD readData, aligned_addr;
	BYTE cnt = 0;

	if (size != 4)
fffd0418:	e3510004 	cmp	r1, #4
{
fffd041c:	e92d4010 	push	{r4, lr}
fffd0420:	e08f2002 	add	r2, pc, r2
	if (size != 4)
fffd0424:	0a000005 	beq	fffd0440 <AHB2PCI_Memory_Read+0x2c>
	{
		LogError("AHB2PCI_Memory_Read error : Illegal data size (%d). Read transfer must be 4 bytes.\n", size);
fffd0428:	e59f0084 	ldr	r0, [pc, #132]	; fffd04b4 <AHB2PCI_Memory_Read+0xa0>
fffd042c:	e08f0000 	add	r0, pc, r0
	}

	if (address % 4 != 0)
	{
		LogError("AHB2PCI_Memory_Read error : Illegal address (0x%X) must be aligned to DWORD.\n", size);
		return(0xDEADBEEF);
fffd0430:	e59f4080 	ldr	r4, [pc, #128]	; fffd04b8 <AHB2PCI_Memory_Read+0xa4>
		LogError("AHB2PCI_Memory_Read error : Illegal address (0x%X) must be aligned to DWORD.\n", size);
fffd0434:	eb0011cb 	bl	fffd4b68 <LogError>
	if (AHB2PCI_IsLogEnable_g == TRUE)
		LogMessage("AHB2PCI_Memory_Read: Addr=0x%lX, Size=%d, Data=0x%lX\n", address, size, readData);

	return(readData);
	
} // *End of AHB2PCI_Memory_Read*
fffd0438:	e1a00004 	mov	r0, r4
fffd043c:	e8bd8010 	pop	{r4, pc}
	if (address % 4 != 0)
fffd0440:	e210c003 	ands	r12, r0, #3
		LogError("AHB2PCI_Memory_Read error : Illegal address (0x%X) must be aligned to DWORD.\n", size);
fffd0444:	159f0070 	ldrne	r0, [pc, #112]	; fffd04bc <AHB2PCI_Memory_Read+0xa8>
fffd0448:	108f0000 	addne	r0, pc, r0
fffd044c:	1afffff7 	bne	fffd0430 <AHB2PCI_Memory_Read+0x1c>
	WRITE_REG(RD_AHB_IBYTE, 0); 
fffd0450:	e59f3068 	ldr	r3, [pc, #104]	; fffd04c0 <AHB2PCI_Memory_Read+0xac>
fffd0454:	e583c024 	str	r12, [r3, #36]	; 0x24
	WRITE_REG(AHB_ISTATUS, READ_REG(AHB_ISTATUS));
fffd0458:	e5931044 	ldr	r1, [r3, #68]	; 0x44
fffd045c:	e5831044 	str	r1, [r3, #68]	; 0x44
	aligned_addr = (address & ~0x3); // Bits 0,1 must be 0
fffd0460:	e3c01003 	bic	r1, r0, #3
	WRITE_REG(RD_PCI_ADDR, aligned_addr);
fffd0464:	e5831020 	str	r1, [r3, #32]
	WRITE_REG(RD_CONTROL, (1 << 0) | (PCI_MEM_READ << 4) | (size << 8)); // Read size must be 4
fffd0468:	e3001461 	movw	r1, #1121	; 0x461
fffd046c:	e5831028 	str	r1, [r3, #40]	; 0x28
	while(!READ_BIT_REG(AHB_ISTATUS, RD_END))
fffd0470:	e5931044 	ldr	r1, [r3, #68]	; 0x44
fffd0474:	e3110c01 	tst	r1, #256	; 0x100
fffd0478:	0afffffc 	beq	fffd0470 <AHB2PCI_Memory_Read+0x5c>
	readData = READ_REG(DATA_REG);
fffd047c:	e5934400 	ldr	r4, [r3, #1024]	; 0x400
	if (AHB2PCI_IsLogEnable_g == TRUE)
fffd0480:	e59f303c 	ldr	r3, [pc, #60]	; fffd04c4 <AHB2PCI_Memory_Read+0xb0>
fffd0484:	e7923003 	ldr	r3, [r2, r3]
fffd0488:	e5933000 	ldr	r3, [r3]
fffd048c:	e3530001 	cmp	r3, #1
fffd0490:	1affffe8 	bne	fffd0438 <AHB2PCI_Memory_Read+0x24>
		LogMessage("AHB2PCI_Memory_Read: Addr=0x%lX, Size=%d, Data=0x%lX\n", address, size, readData);
fffd0494:	e1a01000 	mov	r1, r0
fffd0498:	e59f0028 	ldr	r0, [pc, #40]	; fffd04c8 <AHB2PCI_Memory_Read+0xb4>
fffd049c:	e1a03004 	mov	r3, r4
fffd04a0:	e3a02004 	mov	r2, #4
fffd04a4:	e08f0000 	add	r0, pc, r0
fffd04a8:	eb001182 	bl	fffd4ab8 <LogMessage>
fffd04ac:	eaffffe1 	b	fffd0438 <AHB2PCI_Memory_Read+0x24>
fffd04b0:	0000cdfc 	.word	0x0000cdfc
fffd04b4:	0000b3b4 	.word	0x0000b3b4
fffd04b8:	deadbeef 	.word	0xdeadbeef
fffd04bc:	0000b3ec 	.word	0x0000b3ec
fffd04c0:	f0400000 	.word	0xf0400000
fffd04c4:	00000004 	.word	0x00000004
fffd04c8:	0000b3de 	.word	0x0000b3de

fffd04cc <AHB2PCI_Memory_Write>:
/* the data register, and the address defines where to write the data (no need    */
/* for address alignment).														  */
/*--------------------------------------------------------------------------------*/

BOOL AHB2PCI_Memory_Write(DWORD address, BYTE size, DWORD data)
{
fffd04cc:	e92d4010 	push	{r4, lr}
	DWORD cnt = 0;

	if ((size > sizeof(DWORD)) || (size == 3))
fffd04d0:	e241e003 	sub	lr, r1, #3
fffd04d4:	e16fef1e 	clz	lr, lr
{
fffd04d8:	e1a03002 	mov	r3, r2
	if ((size > sizeof(DWORD)) || (size == 3))
fffd04dc:	e1a0e2ae 	lsr	lr, lr, #5
{
fffd04e0:	e59f20a8 	ldr	r2, [pc, #168]	; fffd0590 <AHB2PCI_Memory_Write+0xc4>
	if ((size > sizeof(DWORD)) || (size == 3))
fffd04e4:	e3510004 	cmp	r1, #4
fffd04e8:	838ee001 	orrhi	lr, lr, #1
fffd04ec:	e35e0000 	cmp	lr, #0
{
fffd04f0:	e08f2002 	add	r2, pc, r2
	if ((size > sizeof(DWORD)) || (size == 3))
fffd04f4:	0a000005 	beq	fffd0510 <AHB2PCI_Memory_Write+0x44>
	{
		LogError("AHB2PCI_Memory_Write error : Illegal data size\n");
fffd04f8:	e59f0094 	ldr	r0, [pc, #148]	; fffd0594 <AHB2PCI_Memory_Write+0xc8>
		return(FALSE);
fffd04fc:	e3a04000 	mov	r4, #0
		LogError("AHB2PCI_Memory_Write error : Illegal data size\n");
fffd0500:	e08f0000 	add	r0, pc, r0
fffd0504:	eb001197 	bl	fffd4b68 <LogError>

	if (AHB2PCI_IsLogEnable_g == TRUE)
		LogMessage ("AHB2PCI_Memory_Write: Addr=0x%lX, Size=%d, Data=0x%lX\n", address, size, data);
	
	return(TRUE);
} // *End of AHB2PCI_Memory_Write*
fffd0508:	e1a00004 	mov	r0, r4
fffd050c:	e8bd8010 	pop	{r4, pc}
	WRITE_REG(WR_AHB_IBYTE, 0);
fffd0510:	e59fc080 	ldr	r12, [pc, #128]	; fffd0598 <AHB2PCI_Memory_Write+0xcc>
	while(!READ_BIT_REG(AHB_ISTATUS, WR_END))
fffd0514:	e30043e9 	movw	r4, #1001	; 0x3e9
	WRITE_REG(WR_AHB_IBYTE, 0);
fffd0518:	e58ce004 	str	lr, [r12, #4]
	WRITE_REG(AHB_ISTATUS, READ_REG(AHB_ISTATUS));
fffd051c:	e59ce044 	ldr	lr, [r12, #68]	; 0x44
fffd0520:	e58ce044 	str	lr, [r12, #68]	; 0x44
	WRITE_REG(WR_CONTROL, (1 << 0) | (PCI_MEM_WRITE << 4) | (size << 8));
fffd0524:	e1a0e401 	lsl	lr, r1, #8
	WRITE_REG(WR_PCI_ADDR, address);
fffd0528:	e58c0000 	str	r0, [r12]
	WRITE_REG(WR_CONTROL, (1 << 0) | (PCI_MEM_WRITE << 4) | (size << 8));
fffd052c:	e38ee071 	orr	lr, lr, #113	; 0x71
	WRITE_REG(DATA_REG, data);
fffd0530:	e58c3400 	str	r3, [r12, #1024]	; 0x400
	WRITE_REG(WR_CONTROL, (1 << 0) | (PCI_MEM_WRITE << 4) | (size << 8));
fffd0534:	e58ce008 	str	lr, [r12, #8]
	while(!READ_BIT_REG(AHB_ISTATUS, WR_END))
fffd0538:	e59ce044 	ldr	lr, [r12, #68]	; 0x44
fffd053c:	e31e0001 	tst	lr, #1
fffd0540:	0a00000b 	beq	fffd0574 <AHB2PCI_Memory_Write+0xa8>
	if (AHB2PCI_IsLogEnable_g == TRUE)
fffd0544:	e59fc050 	ldr	r12, [pc, #80]	; fffd059c <AHB2PCI_Memory_Write+0xd0>
fffd0548:	e792200c 	ldr	r2, [r2, r12]
fffd054c:	e5924000 	ldr	r4, [r2]
fffd0550:	e3540001 	cmp	r4, #1
	return(TRUE);
fffd0554:	13a04001 	movne	r4, #1
	if (AHB2PCI_IsLogEnable_g == TRUE)
fffd0558:	1affffea 	bne	fffd0508 <AHB2PCI_Memory_Write+0x3c>
		LogMessage ("AHB2PCI_Memory_Write: Addr=0x%lX, Size=%d, Data=0x%lX\n", address, size, data);
fffd055c:	e1a02001 	mov	r2, r1
fffd0560:	e1a01000 	mov	r1, r0
fffd0564:	e59f0034 	ldr	r0, [pc, #52]	; fffd05a0 <AHB2PCI_Memory_Write+0xd4>
fffd0568:	e08f0000 	add	r0, pc, r0
fffd056c:	eb001151 	bl	fffd4ab8 <LogMessage>
fffd0570:	eaffffe4 	b	fffd0508 <AHB2PCI_Memory_Write+0x3c>
		if(cnt > 1000)
fffd0574:	e2544001 	subs	r4, r4, #1
fffd0578:	1affffee 	bne	fffd0538 <AHB2PCI_Memory_Write+0x6c>
			LogError("AHB2PCI_Memory_Write: Write transaction time out! AHB_ISTATUS = 0x%04X\n", READ_REG(AHB_ISTATUS));
fffd057c:	e59f0020 	ldr	r0, [pc, #32]	; fffd05a4 <AHB2PCI_Memory_Write+0xd8>
fffd0580:	e59c1044 	ldr	r1, [r12, #68]	; 0x44
fffd0584:	e08f0000 	add	r0, pc, r0
fffd0588:	eb001176 	bl	fffd4b68 <LogError>
			return(FALSE);
fffd058c:	eaffffdd 	b	fffd0508 <AHB2PCI_Memory_Write+0x3c>
fffd0590:	0000cd2c 	.word	0x0000cd2c
fffd0594:	0000b3b8 	.word	0x0000b3b8
fffd0598:	f0400000 	.word	0xf0400000
fffd059c:	00000004 	.word	0x00000004
fffd05a0:	0000b3c8 	.word	0x0000b3c8
fffd05a4:	0000b364 	.word	0x0000b364

fffd05a8 <FB_Initialize>:
/*               Find the Frame Buffer base physical address		         	  */
/*--------------------------------------------------------------------------------*/
void FB_Initialize()
{
	
	BYTE gmmapVal = GET_FIELD_REG(INTCR3, 8, 10);
fffd05a8:	e59f2044 	ldr	r2, [pc, #68]	; fffd05f4 <FB_Initialize+0x4c>
{
fffd05ac:	e59f3044 	ldr	r3, [pc, #68]	; fffd05f8 <FB_Initialize+0x50>
	BYTE gmmapVal = GET_FIELD_REG(INTCR3, 8, 10);
fffd05b0:	e592109c 	ldr	r1, [r2, #156]	; 0x9c
{
fffd05b4:	e08f3003 	add	r3, pc, r3
	BYTE gmmapVal = GET_FIELD_REG(INTCR3, 8, 10);
fffd05b8:	e7e21451 	ubfx	r1, r1, #8, #3

	if (gmmapVal >= NUM_OF_GMMAP_OPTIONS)
fffd05bc:	e3510004 	cmp	r1, #4
fffd05c0:	9a000002 	bls	fffd05d0 <FB_Initialize+0x28>
	{
		LogError("Error: Invalid value for Graphics Memory Map (GMMAP = %u) \n", gmmapVal);
fffd05c4:	e59f0030 	ldr	r0, [pc, #48]	; fffd05fc <FB_Initialize+0x54>
fffd05c8:	e08f0000 	add	r0, pc, r0
fffd05cc:	ea001165 	b	fffd4b68 <LogError>
		return;
	}
	FB_BA = FB_BaseAddresses[gmmapVal];
fffd05d0:	e59f2028 	ldr	r2, [pc, #40]	; fffd0600 <FB_Initialize+0x58>

	LogMessage("FB_Initialize(): Frame-Buffer address = %08Xh\n", FB_BA);
fffd05d4:	e59f0028 	ldr	r0, [pc, #40]	; fffd0604 <FB_Initialize+0x5c>
	FB_BA = FB_BaseAddresses[gmmapVal];
fffd05d8:	e08f2002 	add	r2, pc, r2
fffd05dc:	e7921101 	ldr	r1, [r2, r1, lsl #2]
	LogMessage("FB_Initialize(): Frame-Buffer address = %08Xh\n", FB_BA);
fffd05e0:	e08f0000 	add	r0, pc, r0
	FB_BA = FB_BaseAddresses[gmmapVal];
fffd05e4:	e59f201c 	ldr	r2, [pc, #28]	; fffd0608 <FB_Initialize+0x60>
fffd05e8:	e7933002 	ldr	r3, [r3, r2]
fffd05ec:	e5831000 	str	r1, [r3]
	LogMessage("FB_Initialize(): Frame-Buffer address = %08Xh\n", FB_BA);
fffd05f0:	ea001130 	b	fffd4ab8 <LogMessage>
fffd05f4:	f0800000 	.word	0xf0800000
fffd05f8:	0000cc68 	.word	0x0000cc68
fffd05fc:	0000b39f 	.word	0x0000b39f
fffd0600:	0000cc90 	.word	0x0000cc90
fffd0604:	0000b3c3 	.word	0x0000b3c3
fffd0608:	00000034 	.word	0x00000034

fffd060c <GFX_GetFrameBufferBase>:
} // *End of FB_Initialize*

//--------------------------------------------------------------
DWORD GFX_GetFrameBufferBase()
{
	BYTE gmmapVal = GET_FIELD_REG(INTCR3, 8, 10);
fffd060c:	e59f3034 	ldr	r3, [pc, #52]	; fffd0648 <GFX_GetFrameBufferBase+0x3c>
fffd0610:	e593109c 	ldr	r1, [r3, #156]	; 0x9c
fffd0614:	e7e21451 	ubfx	r1, r1, #8, #3

	if (gmmapVal >= NUM_OF_GMMAP_OPTIONS)
fffd0618:	e3510004 	cmp	r1, #4
fffd061c:	9a000005 	bls	fffd0638 <GFX_GetFrameBufferBase+0x2c>
	{
		LogError("Error: Invalid value for Graphics Memory Map (GMMAP = %u) \n", gmmapVal);
fffd0620:	e59f0024 	ldr	r0, [pc, #36]	; fffd064c <GFX_GetFrameBufferBase+0x40>
{
fffd0624:	e92d4010 	push	{r4, lr}
		LogError("Error: Invalid value for Graphics Memory Map (GMMAP = %u) \n", gmmapVal);
fffd0628:	e08f0000 	add	r0, pc, r0
fffd062c:	eb00114d 	bl	fffd4b68 <LogError>
		return 0 ;
fffd0630:	e3a00000 	mov	r0, #0
	}
	 return FB_BaseAddresses[gmmapVal];
}
fffd0634:	e8bd8010 	pop	{r4, pc}
	 return FB_BaseAddresses[gmmapVal];
fffd0638:	e59f3010 	ldr	r3, [pc, #16]	; fffd0650 <GFX_GetFrameBufferBase+0x44>
fffd063c:	e08f3003 	add	r3, pc, r3
fffd0640:	e7930101 	ldr	r0, [r3, r1, lsl #2]
}
fffd0644:	e12fff1e 	bx	lr
fffd0648:	f0800000 	.word	0xf0800000
fffd064c:	0000b33f 	.word	0x0000b33f
fffd0650:	0000cc2c 	.word	0x0000cc2c

fffd0654 <PLL_Configure>:
//----------------------------------------------------------------
BOOL PLL_Configure (BYTE GPLLINDIV, BYTE GPLLFBDIV, BYTE GPLLST)
{
fffd0654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
fffd0658:	e1a08000 	mov	r8, r0
	LogMessage("> Pixel Clock Configuration start\n");

	// Configure PLL (write to Pixel clock control - power down pixel clock)									
	if (!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1A)) {return (FALSE);}
fffd065c:	e59f4238 	ldr	r4, [pc, #568]	; fffd089c <PLL_Configure+0x248>
{
fffd0660:	e1a06001 	mov	r6, r1
fffd0664:	e1a07002 	mov	r7, r2
	LogMessage("> Pixel Clock Configuration start\n");
fffd0668:	e59f0230 	ldr	r0, [pc, #560]	; fffd08a0 <PLL_Configure+0x24c>
	if (!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1A)) {return (FALSE);}
fffd066c:	e08f4004 	add	r4, pc, r4
	LogMessage("> Pixel Clock Configuration start\n");
fffd0670:	e08f0000 	add	r0, pc, r0
fffd0674:	eb00110f 	bl	fffd4ab8 <LogMessage>
	if (!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1A)) {return (FALSE);}
fffd0678:	e5940000 	ldr	r0, [r4]
fffd067c:	e3a0201a 	mov	r2, #26
fffd0680:	e3a01001 	mov	r1, #1
fffd0684:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd0688:	ebffff8f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd068c:	e3500000 	cmp	r0, #0
fffd0690:	1a000001 	bne	fffd069c <PLL_Configure+0x48>
fffd0694:	e3a00000 	mov	r0, #0
fffd0698:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	if (!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x8D)) {return (FALSE);}			
fffd069c:	e5940000 	ldr	r0, [r4]
fffd06a0:	e3035c0a 	movw	r5, #15370	; 0x3c0a
fffd06a4:	e3a0208d 	mov	r2, #141	; 0x8d
fffd06a8:	e3a01001 	mov	r1, #1
fffd06ac:	e0850000 	add	r0, r5, r0
fffd06b0:	ebffff85 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd06b4:	e3500000 	cmp	r0, #0
fffd06b8:	0afffff5 	beq	fffd0694 <PLL_Configure+0x40>

	// Configure PLL C only 
	if (!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0xB6)) {return (FALSE);} // GPLLFBDIV (FBDV)												
fffd06bc:	e5940000 	ldr	r0, [r4]
fffd06c0:	e3a020b6 	mov	r2, #182	; 0xb6
fffd06c4:	e3a01001 	mov	r1, #1
fffd06c8:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd06cc:	ebffff7e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd06d0:	e3500000 	cmp	r0, #0
fffd06d4:	0affffee 	beq	fffd0694 <PLL_Configure+0x40>
	if (!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), GPLLFBDIV)) {return (FALSE);}												
fffd06d8:	e5940000 	ldr	r0, [r4]
fffd06dc:	e1a02006 	mov	r2, r6
fffd06e0:	e3a01001 	mov	r1, #1
fffd06e4:	e0850000 	add	r0, r5, r0
fffd06e8:	ebffff77 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd06ec:	e3500000 	cmp	r0, #0
fffd06f0:	0affffe7 	beq	fffd0694 <PLL_Configure+0x40>
	LogMessage("  * GPLLFBDIV (FBDV): %08Xh\n", AHB2PCI_Memory_Read((MGABASE1 + 0x3C08), sizeof(DWORD)));
fffd06f4:	e5940000 	ldr	r0, [r4]
fffd06f8:	e3036c08 	movw	r6, #15368	; 0x3c08
fffd06fc:	e3a01004 	mov	r1, #4
fffd0700:	e0860000 	add	r0, r6, r0
fffd0704:	ebffff42 	bl	fffd0414 <AHB2PCI_Memory_Read>
fffd0708:	e1a01000 	mov	r1, r0
fffd070c:	e59f0190 	ldr	r0, [pc, #400]	; fffd08a4 <PLL_Configure+0x250>
fffd0710:	e08f0000 	add	r0, pc, r0
fffd0714:	eb0010e7 	bl	fffd4ab8 <LogMessage>

	if (!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0xB7)) {return (FALSE);} // GPLLINDIV (INDV + FBDV8)										
fffd0718:	e5940000 	ldr	r0, [r4]
fffd071c:	e3a020b7 	mov	r2, #183	; 0xb7
fffd0720:	e3a01001 	mov	r1, #1
fffd0724:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd0728:	ebffff67 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd072c:	e3500000 	cmp	r0, #0
fffd0730:	0affffd7 	beq	fffd0694 <PLL_Configure+0x40>
	if (!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), GPLLINDIV)) {return (FALSE);}													
fffd0734:	e5940000 	ldr	r0, [r4]
fffd0738:	e1a02008 	mov	r2, r8
fffd073c:	e3a01001 	mov	r1, #1
fffd0740:	e0850000 	add	r0, r5, r0
fffd0744:	ebffff60 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0748:	e3500000 	cmp	r0, #0
fffd074c:	0affffd0 	beq	fffd0694 <PLL_Configure+0x40>
	LogMessage("  * GPLLINDIV (INDV + FBDV8): %08Xh\n", AHB2PCI_Memory_Read((MGABASE1 + 0x3C08), sizeof(DWORD)));
fffd0750:	e5940000 	ldr	r0, [r4]
fffd0754:	e3a01004 	mov	r1, #4
fffd0758:	e0860000 	add	r0, r6, r0
fffd075c:	ebffff2c 	bl	fffd0414 <AHB2PCI_Memory_Read>
fffd0760:	e1a01000 	mov	r1, r0
fffd0764:	e59f013c 	ldr	r0, [pc, #316]	; fffd08a8 <PLL_Configure+0x254>
fffd0768:	e08f0000 	add	r0, pc, r0
fffd076c:	eb0010d1 	bl	fffd4ab8 <LogMessage>

	if (!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0xB8)) {return (FALSE);}// GPLLST (OTDV1/OTDV2)
fffd0770:	e5940000 	ldr	r0, [r4]
fffd0774:	e3a020b8 	mov	r2, #184	; 0xb8
fffd0778:	e3a01001 	mov	r1, #1
fffd077c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd0780:	ebffff51 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0784:	e3500000 	cmp	r0, #0
fffd0788:	0affffc1 	beq	fffd0694 <PLL_Configure+0x40>
	if (!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), GPLLST)) {return (FALSE);}
fffd078c:	e5940000 	ldr	r0, [r4]
fffd0790:	e1a02007 	mov	r2, r7
fffd0794:	e3a01001 	mov	r1, #1
fffd0798:	e0850000 	add	r0, r5, r0
fffd079c:	ebffff4a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd07a0:	e3500000 	cmp	r0, #0
fffd07a4:	0affffba 	beq	fffd0694 <PLL_Configure+0x40>
	LogMessage("  * GPLLST (OTDV1/OTDV2): %08Xh\n", AHB2PCI_Memory_Read((MGABASE1 + 0x3C08), sizeof(DWORD)));
fffd07a8:	e5940000 	ldr	r0, [r4]
fffd07ac:	e3a01004 	mov	r1, #4
fffd07b0:	e0860000 	add	r0, r6, r0
fffd07b4:	ebffff16 	bl	fffd0414 <AHB2PCI_Memory_Read>
fffd07b8:	e1a01000 	mov	r1, r0
fffd07bc:	e59f00e8 	ldr	r0, [pc, #232]	; fffd08ac <PLL_Configure+0x258>
fffd07c0:	e08f0000 	add	r0, pc, r0
fffd07c4:	eb0010bb 	bl	fffd4ab8 <LogMessage>


	if (!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1A)) {return (FALSE);}// XPIXCLKCTRL
fffd07c8:	e5940000 	ldr	r0, [r4]
fffd07cc:	e3a0201a 	mov	r2, #26
fffd07d0:	e3a01001 	mov	r1, #1
fffd07d4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd07d8:	ebffff3b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd07dc:	e3500000 	cmp	r0, #0
fffd07e0:	0affffab 	beq	fffd0694 <PLL_Configure+0x40>
	if (!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x09)) {return (FALSE);}
fffd07e4:	e5940000 	ldr	r0, [r4]
fffd07e8:	e3a02009 	mov	r2, #9
fffd07ec:	e3a01001 	mov	r1, #1
fffd07f0:	e0850000 	add	r0, r5, r0
fffd07f4:	ebffff34 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd07f8:	e3500000 	cmp	r0, #0
fffd07fc:	0affffa4 	beq	fffd0694 <PLL_Configure+0x40>
	LogMessage("  * XPIXCLKCTRL: %08Xh\n", AHB2PCI_Memory_Read((MGABASE1 + 0x3C08), sizeof(DWORD)));
fffd0800:	e59f40a8 	ldr	r4, [pc, #168]	; fffd08b0 <PLL_Configure+0x25c>
fffd0804:	e3a01004 	mov	r1, #4
fffd0808:	e1a05006 	mov	r5, r6
fffd080c:	e08f4004 	add	r4, pc, r4
fffd0810:	e5940000 	ldr	r0, [r4]
fffd0814:	e0860000 	add	r0, r6, r0
fffd0818:	ebfffefd 	bl	fffd0414 <AHB2PCI_Memory_Read>
fffd081c:	e1a01000 	mov	r1, r0
fffd0820:	e59f008c 	ldr	r0, [pc, #140]	; fffd08b4 <PLL_Configure+0x260>
fffd0824:	e08f0000 	add	r0, pc, r0
fffd0828:	eb0010a2 	bl	fffd4ab8 <LogMessage>

	if (!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x18)) {return (FALSE);}// XVREFCTRL
fffd082c:	e5940000 	ldr	r0, [r4]
fffd0830:	e3a02018 	mov	r2, #24
fffd0834:	e3a01001 	mov	r1, #1
fffd0838:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd083c:	ebffff22 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0840:	e3500000 	cmp	r0, #0
fffd0844:	0affff92 	beq	fffd0694 <PLL_Configure+0x40>
	if (!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x0F)) {return (FALSE);}
fffd0848:	e5940000 	ldr	r0, [r4]
fffd084c:	e3a0200f 	mov	r2, #15
fffd0850:	e3a01001 	mov	r1, #1
fffd0854:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd0858:	e280000a 	add	r0, r0, #10
fffd085c:	ebffff1a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0860:	e3500000 	cmp	r0, #0
fffd0864:	0affff8a 	beq	fffd0694 <PLL_Configure+0x40>
	LogMessage("  * XVREFCTRL: %08Xh\n", AHB2PCI_Memory_Read((MGABASE1 + 0x3C08), sizeof(DWORD)));
fffd0868:	e5940000 	ldr	r0, [r4]
fffd086c:	e3a01004 	mov	r1, #4
fffd0870:	e0860000 	add	r0, r6, r0
fffd0874:	ebfffee6 	bl	fffd0414 <AHB2PCI_Memory_Read>
fffd0878:	e1a01000 	mov	r1, r0
fffd087c:	e59f0034 	ldr	r0, [pc, #52]	; fffd08b8 <PLL_Configure+0x264>
fffd0880:	e08f0000 	add	r0, pc, r0
fffd0884:	eb00108b 	bl	fffd4ab8 <LogMessage>

	LogMessage("> Pixel Clock Configuration done.\n");
fffd0888:	e59f002c 	ldr	r0, [pc, #44]	; fffd08bc <PLL_Configure+0x268>
fffd088c:	e08f0000 	add	r0, pc, r0
fffd0890:	eb001088 	bl	fffd4ab8 <LogMessage>

	return (TRUE);
fffd0894:	e3a00001 	mov	r0, #1
}
fffd0898:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
fffd089c:	0000d5c0 	.word	0x0000d5c0
fffd08a0:	0000b362 	.word	0x0000b362
fffd08a4:	0000b2e5 	.word	0x0000b2e5
fffd08a8:	0000b2aa 	.word	0x0000b2aa
fffd08ac:	0000b277 	.word	0x0000b277
fffd08b0:	0000d420 	.word	0x0000d420
fffd08b4:	0000b234 	.word	0x0000b234
fffd08b8:	0000b1f0 	.word	0x0000b1f0
fffd08bc:	0000b1fa 	.word	0x0000b1fa

fffd08c0 <GFX_ConfigureDisplayTo1024x768>:
//----------------------------------------------------------------

BOOL GFX_ConfigureDisplayTo1024x768(GFX_ColorDepth colorDepth)
{
fffd08c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
fffd08c4:	e1a04000 	mov	r4, r0
	/* GFX PCI Configuration Space - Read and Configure												*/
	/*----------------------------------------------------------------------------------------------*/
	// Wait until GFX Device/Vendor ID is read correctly
	while (AHB2PCI_Config_Read(GFX_IDSEL + GFX_VENDOR_ID, sizeof(DWORD)) != GFX_VEN_DEV_ID_RV)
	{
		LogMessage("Waiting until PCI is out of reset; Press any key to abort .... \n");
fffd08c8:	e59f8fe8 	ldr	r8, [pc, #4072]	; fffd18b8 <GFX_ConfigureDisplayTo1024x768+0xff8>
	while (AHB2PCI_Config_Read(GFX_IDSEL + GFX_VENDOR_ID, sizeof(DWORD)) != GFX_VEN_DEV_ID_RV)
fffd08cc:	e3a0500b 	mov	r5, #11
	LogHeader("GFX Display Configuration to 1024x768");
fffd08d0:	e59f0fe4 	ldr	r0, [pc, #4068]	; fffd18bc <GFX_ConfigureDisplayTo1024x768+0xffc>
	while (AHB2PCI_Config_Read(GFX_IDSEL + GFX_VENDOR_ID, sizeof(DWORD)) != GFX_VEN_DEV_ID_RV)
fffd08d4:	e59f7fe4 	ldr	r7, [pc, #4068]	; fffd18c0 <GFX_ConfigureDisplayTo1024x768+0x1000>
		LogMessage("Waiting until PCI is out of reset; Press any key to abort .... \n");
fffd08d8:	e08f8008 	add	r8, pc, r8
{
fffd08dc:	e59f6fe0 	ldr	r6, [pc, #4064]	; fffd18c4 <GFX_ConfigureDisplayTo1024x768+0x1004>
	LogHeader("GFX Display Configuration to 1024x768");
fffd08e0:	e08f0000 	add	r0, pc, r0
fffd08e4:	eb0010df 	bl	fffd4c68 <LogHeader>
{
fffd08e8:	e08f6006 	add	r6, pc, r6
	FB_Initialize();
fffd08ec:	ebffff2d 	bl	fffd05a8 <FB_Initialize>
	while (AHB2PCI_Config_Read(GFX_IDSEL + GFX_VENDOR_ID, sizeof(DWORD)) != GFX_VEN_DEV_ID_RV)
fffd08f0:	e3a01004 	mov	r1, #4
fffd08f4:	e3a00801 	mov	r0, #65536	; 0x10000
fffd08f8:	ebfffe36 	bl	fffd01d8 <AHB2PCI_Config_Read>
fffd08fc:	e1500007 	cmp	r0, r7
fffd0900:	1a00051b 	bne	fffd1d74 <GFX_ConfigureDisplayTo1024x768+0x14b4>
			return (FALSE);
		}
		Sleep (1000);
		cnt++;
	}
	LogPass ("> Found correct GFX Device/Vendor ID 0x%08lX. \n", GFX_VEN_DEV_ID_RV);
fffd0904:	e59f0fbc 	ldr	r0, [pc, #4028]	; fffd18c8 <GFX_ConfigureDisplayTo1024x768+0x1008>
fffd0908:	e1a01007 	mov	r1, r7

	// Get the MGA Registers base address (MGABASE1)
	AHB2PCI_Config_Write(GFX_IDSEL + GFX_BAR1, sizeof(DWORD), MGABASE1 = 0x10000000, 0);
fffd090c:	e59f5fb8 	ldr	r5, [pc, #4024]	; fffd18cc <GFX_ConfigureDisplayTo1024x768+0x100c>
	LogPass ("> Found correct GFX Device/Vendor ID 0x%08lX. \n", GFX_VEN_DEV_ID_RV);
fffd0910:	e08f0000 	add	r0, pc, r0
fffd0914:	eb0010c3 	bl	fffd4c28 <LogPass>
	AHB2PCI_Config_Write(GFX_IDSEL + GFX_BAR1, sizeof(DWORD), MGABASE1 = 0x10000000, 0);
fffd0918:	e08f5005 	add	r5, pc, r5
fffd091c:	e3a02201 	mov	r2, #268435456	; 0x10000000
fffd0920:	e3a03000 	mov	r3, #0
fffd0924:	e3a01004 	mov	r1, #4
fffd0928:	e59f0fa0 	ldr	r0, [pc, #4000]	; fffd18d0 <GFX_ConfigureDisplayTo1024x768+0x1010>
fffd092c:	e5852000 	str	r2, [r5]
fffd0930:	ebfffe67 	bl	fffd02d4 <AHB2PCI_Config_Write>
	MGABASE1 = AHB2PCI_Config_Read(GFX_IDSEL + GFX_BAR1, sizeof(DWORD));
fffd0934:	e3a01004 	mov	r1, #4
fffd0938:	e59f0f90 	ldr	r0, [pc, #3984]	; fffd18d0 <GFX_ConfigureDisplayTo1024x768+0x1010>
fffd093c:	ebfffe25 	bl	fffd01d8 <AHB2PCI_Config_Read>
	if (MGABASE1 == 0)
fffd0940:	e3500000 	cmp	r0, #0
	MGABASE1 = AHB2PCI_Config_Read(GFX_IDSEL + GFX_BAR1, sizeof(DWORD));
fffd0944:	e1a01000 	mov	r1, r0
fffd0948:	e5850000 	str	r0, [r5]
	if (MGABASE1 == 0)
fffd094c:	1a000514 	bne	fffd1da4 <GFX_ConfigureDisplayTo1024x768+0x14e4>
	{
		LogError("TEST_ConfigureDisplay failed : MGABASE1 is invalid = %08Xh\n", MGABASE1);
fffd0950:	e59f0f7c 	ldr	r0, [pc, #3964]	; fffd18d4 <GFX_ConfigureDisplayTo1024x768+0x1014>
fffd0954:	e08f0000 	add	r0, pc, r0
fffd0958:	eb001082 	bl	fffd4b68 <LogError>
	}
	else
	{
		LogPass("TEST_ConfigureDisplay : MGABASE1 = %08Xh\n", MGABASE1);
	}
	AHB2PCI_Config_Write(GFX_IDSEL + GFX_BAR2, sizeof(DWORD), 0xf0000000, 0);
fffd095c:	e3a03000 	mov	r3, #0
fffd0960:	e3a0220f 	mov	r2, #-268435456	; 0xf0000000
fffd0964:	e3a01004 	mov	r1, #4
fffd0968:	e59f0f68 	ldr	r0, [pc, #3944]	; fffd18d8 <GFX_ConfigureDisplayTo1024x768+0x1018>
fffd096c:	ebfffe58 	bl	fffd02d4 <AHB2PCI_Config_Write>

	LogMessage("MGABASE1 = %08Xh, MGABASE2 = %08Xh\n",
fffd0970:	e3a01004 	mov	r1, #4
fffd0974:	e59f0f54 	ldr	r0, [pc, #3924]	; fffd18d0 <GFX_ConfigureDisplayTo1024x768+0x1010>
fffd0978:	ebfffe16 	bl	fffd01d8 <AHB2PCI_Config_Read>
fffd097c:	e3a01004 	mov	r1, #4
fffd0980:	e1a05000 	mov	r5, r0
fffd0984:	e59f0f4c 	ldr	r0, [pc, #3916]	; fffd18d8 <GFX_ConfigureDisplayTo1024x768+0x1018>
fffd0988:	ebfffe12 	bl	fffd01d8 <AHB2PCI_Config_Read>
fffd098c:	e1a02000 	mov	r2, r0
fffd0990:	e59f0f44 	ldr	r0, [pc, #3908]	; fffd18dc <GFX_ConfigureDisplayTo1024x768+0x101c>
fffd0994:	e1a01005 	mov	r1, r5
fffd0998:	e08f0000 	add	r0, pc, r0
fffd099c:	eb001045 	bl	fffd4ab8 <LogMessage>
		AHB2PCI_Config_Read(GFX_IDSEL + GFX_BAR1, sizeof(DWORD)),
		AHB2PCI_Config_Read(GFX_IDSEL + GFX_BAR2, sizeof(DWORD)));

	// Enable Bus Master and Memory Space
	data = AHB2PCI_Config_Read(GFX_IDSEL + GFX_COMMAND_REG, sizeof(DWORD));
fffd09a0:	e3a01004 	mov	r1, #4
fffd09a4:	e59f0f34 	ldr	r0, [pc, #3892]	; fffd18e0 <GFX_ConfigureDisplayTo1024x768+0x1020>
fffd09a8:	ebfffe0a 	bl	fffd01d8 <AHB2PCI_Config_Read>
	AHB2PCI_Config_Write(GFX_IDSEL + GFX_COMMAND_REG, sizeof(DWORD), data | 0x06, 0);
fffd09ac:	e3a01004 	mov	r1, #4
fffd09b0:	e3802006 	orr	r2, r0, #6
fffd09b4:	e3a03000 	mov	r3, #0
fffd09b8:	e59f0f20 	ldr	r0, [pc, #3872]	; fffd18e0 <GFX_ConfigureDisplayTo1024x768+0x1020>
fffd09bc:	ebfffe44 	bl	fffd02d4 <AHB2PCI_Config_Write>
	/* Graphics PLL Configuration																	*/
	/*----------------------------------------------------------------------------------------------*/
									
	BYTE GPLLINDIV,GPLLFBDIV,GPLLST;

	if (GFX_IsPllDebug_g == FALSE)
fffd09c0:	e59f3f1c 	ldr	r3, [pc, #3868]	; fffd18e4 <GFX_ConfigureDisplayTo1024x768+0x1024>
fffd09c4:	e7963003 	ldr	r3, [r6, r3]
fffd09c8:	e5933000 	ldr	r3, [r3]
	{ // the correct values
		GPLLINDIV = 0x03; // GPLLINDIV (INDV + FBDV8)
		GPLLFBDIV = 0x4E; // GPLLFBDIV (FBDV) 
		GPLLST    = 0x15; // GPLLST (OTDV1/OTDV2)
fffd09cc:	e3530000 	cmp	r3, #0
		GPLLINDIV = 0x1A;  // GPLLINDIV (INDV + FBDV8)
		GPLLFBDIV = 0x40;  // GPLLFBDIV (FBDV) 
		GPLLST    = 0x00;  // GPLLST (OTDV1/OTDV2)
	}

	if(!PLL_Configure(GPLLINDIV, GPLLFBDIV, GPLLST)) {return (FALSE);}
fffd09d0:	03a02015 	moveq	r2, #21
fffd09d4:	13a02000 	movne	r2, #0
fffd09d8:	13a01040 	movne	r1, #64	; 0x40
fffd09dc:	03a0104e 	moveq	r1, #78	; 0x4e
fffd09e0:	13a0001a 	movne	r0, #26
fffd09e4:	03a00003 	moveq	r0, #3
fffd09e8:	ebffff19 	bl	fffd0654 <PLL_Configure>
fffd09ec:	e3500000 	cmp	r0, #0
fffd09f0:	0a0004e6 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>

	/*----------------------------------------------------------------------------------------------*/
	/* Sequencers Configuration																		*/
	/*----------------------------------------------------------------------------------------------*/

	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0100)) {return (FALSE);}	// Reset sequencer
fffd09f4:	e59f5eec 	ldr	r5, [pc, #3820]	; fffd18e8 <GFX_ConfigureDisplayTo1024x768+0x1028>
fffd09f8:	e3017fc4 	movw	r7, #8132	; 0x1fc4
fffd09fc:	e3a02c01 	mov	r2, #256	; 0x100
fffd0a00:	e3a01002 	mov	r1, #2
fffd0a04:	e08f5005 	add	r5, pc, r5
fffd0a08:	e5950000 	ldr	r0, [r5]
fffd0a0c:	e0870000 	add	r0, r7, r0
fffd0a10:	ebfffead 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0a14:	e3500000 	cmp	r0, #0
fffd0a18:	0a0004dc 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0101)) {return (FALSE);}	// 8-dot character clock
fffd0a1c:	e5950000 	ldr	r0, [r5]
fffd0a20:	e3002101 	movw	r2, #257	; 0x101
fffd0a24:	e3a01002 	mov	r1, #2
fffd0a28:	e0870000 	add	r0, r7, r0
fffd0a2c:	ebfffea6 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0a30:	e3500000 	cmp	r0, #0
fffd0a34:	0a0004d5 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0302)) {return (FALSE);}	// Map 3 write enable
fffd0a38:	e5950000 	ldr	r0, [r5]
fffd0a3c:	e3002302 	movw	r2, #770	; 0x302
fffd0a40:	e3a01002 	mov	r1, #2
fffd0a44:	e0870000 	add	r0, r7, r0
fffd0a48:	ebfffe9f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0a4c:	e3500000 	cmp	r0, #0
fffd0a50:	0a0004ce 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0003)) {return (FALSE);}	// another mapping of VGA (??)
fffd0a54:	e5950000 	ldr	r0, [r5]
fffd0a58:	e3a02003 	mov	r2, #3
fffd0a5c:	e3a01002 	mov	r1, #2
fffd0a60:	e0870000 	add	r0, r7, r0
fffd0a64:	ebfffe98 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0a68:	e3500000 	cmp	r0, #0
fffd0a6c:	0a0004c7 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0204)) {return (FALSE);}	// 256K memory is installed
fffd0a70:	e5950000 	ldr	r0, [r5]
fffd0a74:	e3a02f81 	mov	r2, #516	; 0x204
fffd0a78:	e3a01002 	mov	r1, #2
fffd0a7c:	e0870000 	add	r0, r7, r0
fffd0a80:	ebfffe91 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0a84:	e3500000 	cmp	r0, #0
fffd0a88:	0a0004c0 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(MISC, sizeof(BYTE), 0xC9)) {return (FALSE);}		// Configure CRTC addresses, Select MGA pixel clock, VSYNC and HSYNC active LOW
fffd0a8c:	e5950000 	ldr	r0, [r5]
fffd0a90:	e3a020c9 	mov	r2, #201	; 0xc9
fffd0a94:	e3a01001 	mov	r1, #1
fffd0a98:	e2800d7f 	add	r0, r0, #8128	; 0x1fc0
fffd0a9c:	e2800002 	add	r0, r0, #2
fffd0aa0:	ebfffe89 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0aa4:	e3500000 	cmp	r0, #0
fffd0aa8:	0a0004b8 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0300)) {return (FALSE);}	// Reset sequencer
fffd0aac:	e5950000 	ldr	r0, [r5]
fffd0ab0:	e3a02c03 	mov	r2, #768	; 0x300
fffd0ab4:	e3a01002 	mov	r1, #2
fffd0ab8:	e0870000 	add	r0, r7, r0
fffd0abc:	ebfffe82 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0ac0:	e3500000 	cmp	r0, #0
fffd0ac4:	0a0004b1 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>

	LogMessage("> Sequencers Configuration done.\n");
fffd0ac8:	e59f0e1c 	ldr	r0, [pc, #3612]	; fffd18ec <GFX_ConfigureDisplayTo1024x768+0x102c>
	/*----------------------------------------------------------------------------------------------*/
	/* Graphics Controller Configuration															*/
	/*----------------------------------------------------------------------------------------------*/

	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0000)) {return (FALSE);}	// Reset bytes in the VGA memory map
fffd0acc:	e3017fce 	movw	r7, #8142	; 0x1fce
	LogMessage("> Sequencers Configuration done.\n");
fffd0ad0:	e08f0000 	add	r0, pc, r0
fffd0ad4:	eb000ff7 	bl	fffd4ab8 <LogMessage>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0000)) {return (FALSE);}	// Reset bytes in the VGA memory map
fffd0ad8:	e5950000 	ldr	r0, [r5]
fffd0adc:	e3a02000 	mov	r2, #0
fffd0ae0:	e3a01002 	mov	r1, #2
fffd0ae4:	e0870000 	add	r0, r7, r0
fffd0ae8:	ebfffe77 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0aec:	e3500000 	cmp	r0, #0
fffd0af0:	0a0004a6 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0001)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd0af4:	e5950000 	ldr	r0, [r5]
fffd0af8:	e3a02001 	mov	r2, #1
fffd0afc:	e3a01002 	mov	r1, #2
fffd0b00:	e0870000 	add	r0, r7, r0
fffd0b04:	ebfffe70 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0b08:	e3500000 	cmp	r0, #0
fffd0b0c:	0a00049f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0002)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd0b10:	e59f5dd8 	ldr	r5, [pc, #3544]	; fffd18f0 <GFX_ConfigureDisplayTo1024x768+0x1030>
fffd0b14:	e3a02002 	mov	r2, #2
fffd0b18:	e1a01002 	mov	r1, r2
fffd0b1c:	e08f5005 	add	r5, pc, r5
fffd0b20:	e5950000 	ldr	r0, [r5]
fffd0b24:	e0870000 	add	r0, r7, r0
fffd0b28:	ebfffe67 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0b2c:	e3500000 	cmp	r0, #0
fffd0b30:	0a000496 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0003)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd0b34:	e5950000 	ldr	r0, [r5]
fffd0b38:	e3a02003 	mov	r2, #3
fffd0b3c:	e3a01002 	mov	r1, #2
fffd0b40:	e0870000 	add	r0, r7, r0
fffd0b44:	ebfffe60 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0b48:	e3500000 	cmp	r0, #0
fffd0b4c:	0a00048f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0004)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd0b50:	e5950000 	ldr	r0, [r5]
fffd0b54:	e3a02004 	mov	r2, #4
fffd0b58:	e3a01002 	mov	r1, #2
fffd0b5c:	e0870000 	add	r0, r7, r0
fffd0b60:	ebfffe59 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0b64:	e3500000 	cmp	r0, #0
fffd0b68:	0a000488 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x1005)) {return (FALSE);}	// Selects Odd/Even addressing mode
fffd0b6c:	e5950000 	ldr	r0, [r5]
fffd0b70:	e3012005 	movw	r2, #4101	; 0x1005
fffd0b74:	e3a01002 	mov	r1, #2
fffd0b78:	e0870000 	add	r0, r7, r0
fffd0b7c:	ebfffe52 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0b80:	e3500000 	cmp	r0, #0
fffd0b84:	0a000481 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0E06)) {return (FALSE);}	// VGA mode select, Memory map is '0b11'
fffd0b88:	e5950000 	ldr	r0, [r5]
fffd0b8c:	e3002e06 	movw	r2, #3590	; 0xe06
fffd0b90:	e3a01002 	mov	r1, #2
fffd0b94:	e0870000 	add	r0, r7, r0
fffd0b98:	ebfffe4b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0b9c:	e3500000 	cmp	r0, #0
fffd0ba0:	0a00047a 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0007)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd0ba4:	e5950000 	ldr	r0, [r5]
fffd0ba8:	e3a02007 	mov	r2, #7
fffd0bac:	e3a01002 	mov	r1, #2
fffd0bb0:	e0870000 	add	r0, r7, r0
fffd0bb4:	ebfffe44 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0bb8:	e3500000 	cmp	r0, #0
fffd0bbc:	0a000473 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0xFF08)) {return (FALSE);}	// Write mask to 0xFF
fffd0bc0:	e5950000 	ldr	r0, [r5]
fffd0bc4:	e30f2f08 	movw	r2, #65288	; 0xff08
fffd0bc8:	e3a01002 	mov	r1, #2
fffd0bcc:	e0870000 	add	r0, r7, r0
fffd0bd0:	ebfffe3d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0bd4:	e3500000 	cmp	r0, #0
fffd0bd8:	0a00046c 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>

	LogMessage("> Graphics Controller Configuration done.\n");
fffd0bdc:	e59f0d10 	ldr	r0, [pc, #3344]	; fffd18f4 <GFX_ConfigureDisplayTo1024x768+0x1034>

	/*----------------------------------------------------------------------------------------------*/
	/* CRTC Controller Configuration																*/
	/*----------------------------------------------------------------------------------------------*/

	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xA300)) {return (FALSE);} // HTOTAL[7:0] = 0xA3 (HTOTAL[8] appears in CRTCEXT1[0])
fffd0be0:	e3017fd4 	movw	r7, #8148	; 0x1fd4
	LogMessage("> Graphics Controller Configuration done.\n");
fffd0be4:	e08f0000 	add	r0, pc, r0
fffd0be8:	eb000fb2 	bl	fffd4ab8 <LogMessage>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xA300)) {return (FALSE);} // HTOTAL[7:0] = 0xA3 (HTOTAL[8] appears in CRTCEXT1[0])
fffd0bec:	e5950000 	ldr	r0, [r5]
fffd0bf0:	e3a02ca3 	mov	r2, #41728	; 0xa300
fffd0bf4:	e3a01002 	mov	r1, #2
fffd0bf8:	e0870000 	add	r0, r7, r0
fffd0bfc:	ebfffe32 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0c00:	e3500000 	cmp	r0, #0
fffd0c04:	0a000461 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x7F01)) {return (FALSE);} // HDISP_END
fffd0c08:	e5950000 	ldr	r0, [r5]
fffd0c0c:	e3072f01 	movw	r2, #32513	; 0x7f01
fffd0c10:	e3a01002 	mov	r1, #2
fffd0c14:	e0870000 	add	r0, r7, r0
fffd0c18:	ebfffe2b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0c1c:	e3500000 	cmp	r0, #0
fffd0c20:	0a00045a 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x7F02)) {return (FALSE);} // HBLANK_START HBLKSTR[8] appears in CRTCEXT1[1]
fffd0c24:	e5950000 	ldr	r0, [r5]
fffd0c28:	e3072f02 	movw	r2, #32514	; 0x7f02
fffd0c2c:	e3a01002 	mov	r1, #2
fffd0c30:	e0870000 	add	r0, r7, r0
fffd0c34:	ebfffe24 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0c38:	e3500000 	cmp	r0, #0
fffd0c3c:	0a000453 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x8703)) {return (FALSE);} // HBLANK_END
fffd0c40:	e59f7cb0 	ldr	r7, [pc, #3248]	; fffd18f8 <GFX_ConfigureDisplayTo1024x768+0x1038>
fffd0c44:	e3015fd4 	movw	r5, #8148	; 0x1fd4
fffd0c48:	e3082703 	movw	r2, #34563	; 0x8703
fffd0c4c:	e3a01002 	mov	r1, #2
fffd0c50:	e08f7007 	add	r7, pc, r7
fffd0c54:	e5970000 	ldr	r0, [r7]
fffd0c58:	e0850000 	add	r0, r5, r0
fffd0c5c:	ebfffe1a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0c60:	e3500000 	cmp	r0, #0
fffd0c64:	0a000449 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x8304)) {return (FALSE);} // HRETRACE_START 
fffd0c68:	e5970000 	ldr	r0, [r7]
fffd0c6c:	e3082304 	movw	r2, #33540	; 0x8304
fffd0c70:	e3a01002 	mov	r1, #2
fffd0c74:	e0850000 	add	r0, r5, r0
fffd0c78:	ebfffe13 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0c7c:	e3500000 	cmp	r0, #0
fffd0c80:	0a000442 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x9305)) {return (FALSE);} // HRETRACE_END
fffd0c84:	e5970000 	ldr	r0, [r7]
fffd0c88:	e3092305 	movw	r2, #37637	; 0x9305
fffd0c8c:	e3a01002 	mov	r1, #2
fffd0c90:	e0850000 	add	r0, r5, r0
fffd0c94:	ebfffe0c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0c98:	e3500000 	cmp	r0, #0
fffd0c9c:	0a00043b 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x2606)) {return (FALSE);} // VTOTAL		// was 24
fffd0ca0:	e5970000 	ldr	r0, [r7]
fffd0ca4:	e3022606 	movw	r2, #9734	; 0x2606
fffd0ca8:	e3a01002 	mov	r1, #2
fffd0cac:	e0850000 	add	r0, r5, r0
fffd0cb0:	ebfffe05 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0cb4:	e3500000 	cmp	r0, #0
fffd0cb8:	0a000434 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xF507)) {return (FALSE);} // OVERFLOW (overflow of other fields)
fffd0cbc:	e5970000 	ldr	r0, [r7]
fffd0cc0:	e30f2507 	movw	r2, #62727	; 0xf507
fffd0cc4:	e3a01002 	mov	r1, #2
fffd0cc8:	e0850000 	add	r0, r5, r0
fffd0ccc:	ebfffdfe 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0cd0:	e3500000 	cmp	r0, #0
fffd0cd4:	0a00042d 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x0008)) {return (FALSE);} // PRE_ROW_SCAN
fffd0cd8:	e5970000 	ldr	r0, [r7]
fffd0cdc:	e3a02008 	mov	r2, #8
fffd0ce0:	e3a01002 	mov	r1, #2
fffd0ce4:	e0850000 	add	r0, r5, r0
fffd0ce8:	ebfffdf7 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0cec:	e3500000 	cmp	r0, #0
fffd0cf0:	0a000426 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x6009)) {return (FALSE);} // MAX_SCAN_LINE
fffd0cf4:	e5970000 	ldr	r0, [r7]
fffd0cf8:	e3062009 	movw	r2, #24585	; 0x6009
fffd0cfc:	e3a01002 	mov	r1, #2
fffd0d00:	e0850000 	add	r0, r5, r0
fffd0d04:	ebfffdf0 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0d08:	e3500000 	cmp	r0, #0
fffd0d0c:	0a00041f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x200A)) {return (FALSE);} // CUR_START
fffd0d10:	e5970000 	ldr	r0, [r7]
fffd0d14:	e302200a 	movw	r2, #8202	; 0x200a
fffd0d18:	e3a01002 	mov	r1, #2
fffd0d1c:	e0850000 	add	r0, r5, r0
fffd0d20:	ebfffde9 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0d24:	e3500000 	cmp	r0, #0
fffd0d28:	0a000418 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x000B)) {return (FALSE);} // CUR_END
fffd0d2c:	e5970000 	ldr	r0, [r7]
fffd0d30:	e3a0200b 	mov	r2, #11
fffd0d34:	e3a01002 	mov	r1, #2
fffd0d38:	e0850000 	add	r0, r5, r0
fffd0d3c:	ebfffde2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0d40:	e3500000 	cmp	r0, #0
fffd0d44:	0a000411 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>

	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x000C)) {return (FALSE);} // ST_ADDR_HI
fffd0d48:	e5970000 	ldr	r0, [r7]
fffd0d4c:	e3a0200c 	mov	r2, #12
fffd0d50:	e3a01002 	mov	r1, #2
fffd0d54:	e0850000 	add	r0, r5, r0
fffd0d58:	ebfffddb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0d5c:	e3500000 	cmp	r0, #0
fffd0d60:	0a00040a 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x000D)) {return (FALSE);} // ST_ADDR_LOW
fffd0d64:	e59f7b90 	ldr	r7, [pc, #2960]	; fffd18fc <GFX_ConfigureDisplayTo1024x768+0x103c>
fffd0d68:	e3a0200d 	mov	r2, #13
fffd0d6c:	e3a01002 	mov	r1, #2
fffd0d70:	e08f7007 	add	r7, pc, r7
fffd0d74:	e5970000 	ldr	r0, [r7]
fffd0d78:	e0850000 	add	r0, r5, r0
fffd0d7c:	ebfffdd2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0d80:	e3500000 	cmp	r0, #0
fffd0d84:	0a000401 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xA300)) {return (FALSE);} // HTOTAL again?
fffd0d88:	e5970000 	ldr	r0, [r7]
fffd0d8c:	e3a02ca3 	mov	r2, #41728	; 0xa300
fffd0d90:	e3a01002 	mov	r1, #2
fffd0d94:	e0850000 	add	r0, r5, r0
fffd0d98:	ebfffdcb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0d9c:	e3500000 	cmp	r0, #0
fffd0da0:	0a0003fa 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>

	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x000E)) {return (FALSE);} // CUR_POS_HI
fffd0da4:	e5970000 	ldr	r0, [r7]
fffd0da8:	e3a0200e 	mov	r2, #14
fffd0dac:	e3a01002 	mov	r1, #2
fffd0db0:	e0850000 	add	r0, r5, r0
fffd0db4:	ebfffdc4 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0db8:	e3500000 	cmp	r0, #0
fffd0dbc:	0a0003f3 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x000F)) {return (FALSE);} // CUR_POS_LOW
fffd0dc0:	e5970000 	ldr	r0, [r7]
fffd0dc4:	e3a0200f 	mov	r2, #15
fffd0dc8:	e3a01002 	mov	r1, #2
fffd0dcc:	e0850000 	add	r0, r5, r0
fffd0dd0:	ebfffdbd 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0dd4:	e3500000 	cmp	r0, #0
fffd0dd8:	0a0003ec 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x0210)) {return (FALSE);} // VRETRACE_START
fffd0ddc:	e5970000 	ldr	r0, [r7]
fffd0de0:	e3a02e21 	mov	r2, #528	; 0x210
fffd0de4:	e3a01002 	mov	r1, #2
fffd0de8:	e0850000 	add	r0, r5, r0
fffd0dec:	ebfffdb6 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0df0:	e3500000 	cmp	r0, #0
fffd0df4:	0a0003e5 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x2811)) {return (FALSE);} // VRETRACE_END
fffd0df8:	e5970000 	ldr	r0, [r7]
fffd0dfc:	e3022811 	movw	r2, #10257	; 0x2811
fffd0e00:	e3a01002 	mov	r1, #2
fffd0e04:	e0850000 	add	r0, r5, r0
fffd0e08:	ebfffdaf 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0e0c:	e3500000 	cmp	r0, #0
fffd0e10:	0a0003de 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xFF12)) {return (FALSE);} // VDISP_END
fffd0e14:	e5970000 	ldr	r0, [r7]
fffd0e18:	e30f2f12 	movw	r2, #65298	; 0xff12
fffd0e1c:	e3a01002 	mov	r1, #2
fffd0e20:	e0850000 	add	r0, r5, r0
fffd0e24:	ebfffda8 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0e28:	e3500000 	cmp	r0, #0
fffd0e2c:	0a0003d7 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
fffd0e30:	e5970000 	ldr	r0, [r7]
	if (colorDepth == COLOR_DEPTH_32BIT) {
fffd0e34:	e3540004 	cmp	r4, #4
fffd0e38:	e0850000 	add	r0, r5, r0
fffd0e3c:	1a0003dc 	bne	fffd1db4 <GFX_ConfigureDisplayTo1024x768+0x14f4>
		if (!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x0013)) // OFFSET
fffd0e40:	e3a02013 	mov	r2, #19
fffd0e44:	e3a01002 	mov	r1, #2
fffd0e48:	ebfffd9f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0e4c:	e3500000 	cmp	r0, #0
fffd0e50:	0a0003ce 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
		{
			if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x8013)) // OFFSET
				return (FALSE);
		}
	}
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x0014)) {return (FALSE);} // UND_LOC
fffd0e54:	e59f5aa4 	ldr	r5, [pc, #2724]	; fffd1900 <GFX_ConfigureDisplayTo1024x768+0x1040>
fffd0e58:	e3017fd4 	movw	r7, #8148	; 0x1fd4
fffd0e5c:	e3a02014 	mov	r2, #20
fffd0e60:	e3a01002 	mov	r1, #2
fffd0e64:	e08f5005 	add	r5, pc, r5
fffd0e68:	e5950000 	ldr	r0, [r5]
fffd0e6c:	e0870000 	add	r0, r7, r0
fffd0e70:	ebfffd95 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0e74:	e3500000 	cmp	r0, #0
fffd0e78:	0a0003c4 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xFF15)) {return (FALSE);} // VBLANK_START
fffd0e7c:	e5950000 	ldr	r0, [r5]
fffd0e80:	e30f2f15 	movw	r2, #65301	; 0xff15
fffd0e84:	e3a01002 	mov	r1, #2
fffd0e88:	e0870000 	add	r0, r7, r0
fffd0e8c:	ebfffd8e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0e90:	e3500000 	cmp	r0, #0
fffd0e94:	0a0003bd 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x2516)) {return (FALSE);} // VBLANK_END
fffd0e98:	e5950000 	ldr	r0, [r5]
fffd0e9c:	e3022516 	movw	r2, #9494	; 0x2516
fffd0ea0:	e3a01002 	mov	r1, #2
fffd0ea4:	e0870000 	add	r0, r7, r0
fffd0ea8:	ebfffd87 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0eac:	e3500000 	cmp	r0, #0
fffd0eb0:	0a0003b6 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xC317)) {return (FALSE);} // MODE_CTRL
fffd0eb4:	e5950000 	ldr	r0, [r5]
fffd0eb8:	e30c2317 	movw	r2, #49943	; 0xc317
fffd0ebc:	e3a01002 	mov	r1, #2
fffd0ec0:	e0870000 	add	r0, r7, r0
fffd0ec4:	ebfffd80 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0ec8:	e3500000 	cmp	r0, #0
fffd0ecc:	0a0003af 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xFF18)) {return (FALSE);} // LINE_COMP
fffd0ed0:	e5950000 	ldr	r0, [r5]
fffd0ed4:	e30f2f18 	movw	r2, #65304	; 0xff18
fffd0ed8:	e3a01002 	mov	r1, #2
fffd0edc:	e0870000 	add	r0, r7, r0
fffd0ee0:	ebfffd79 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0ee4:	e3500000 	cmp	r0, #0
fffd0ee8:	0a0003a8 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x0022)) {return (FALSE);} // CPU_LATCH_RD
fffd0eec:	e5950000 	ldr	r0, [r5]
fffd0ef0:	e3a02022 	mov	r2, #34	; 0x22
fffd0ef4:	e3a01002 	mov	r1, #2
fffd0ef8:	e0870000 	add	r0, r7, r0
fffd0efc:	ebfffd72 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0f00:	e3500000 	cmp	r0, #0
fffd0f04:	0a0003a1 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x8024)) {return (FALSE);} // DATA_SEL
fffd0f08:	e5950000 	ldr	r0, [r5]
fffd0f0c:	e3082024 	movw	r2, #32804	; 0x8024
fffd0f10:	e3a01002 	mov	r1, #2
fffd0f14:	e0870000 	add	r0, r7, r0
fffd0f18:	ebfffd6b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0f1c:	e3500000 	cmp	r0, #0
fffd0f20:	0a00039a 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x3426)) {return (FALSE);} // ATTRIB_ADDR (34 in diag 20 in Yarkon?)
fffd0f24:	e5950000 	ldr	r0, [r5]
fffd0f28:	e3032426 	movw	r2, #13350	; 0x3426
fffd0f2c:	e3a01002 	mov	r1, #2
fffd0f30:	e0870000 	add	r0, r7, r0
fffd0f34:	ebfffd64 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0f38:	e3500000 	cmp	r0, #0
fffd0f3c:	0a000393 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	

	LogMessage("> CRTC Configuration done.\n");
fffd0f40:	e59f09bc 	ldr	r0, [pc, #2492]	; fffd1904 <GFX_ConfigureDisplayTo1024x768+0x1044>
fffd0f44:	e08f0000 	add	r0, pc, r0
fffd0f48:	eb000eda 	bl	fffd4ab8 <LogMessage>

	/*----------------------------------------------------------------------------------------------*/
	/* CRTC Controller Extension Configuration														*/
	/*----------------------------------------------------------------------------------------------*/

	if (colorDepth == COLOR_DEPTH_32BIT) {
fffd0f4c:	e3540004 	cmp	r4, #4
		if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x1000))  // ADDR_GEN
fffd0f50:	e5953000 	ldr	r3, [r5]
fffd0f54:	e3010fde 	movw	r0, #8158	; 0x1fde
	if (colorDepth == COLOR_DEPTH_32BIT) {
fffd0f58:	1a000399 	bne	fffd1dc4 <GFX_ConfigureDisplayTo1024x768+0x1504>
		if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x1000))  // ADDR_GEN
fffd0f5c:	e3a02a01 	mov	r2, #4096	; 0x1000
fffd0f60:	e3a01002 	mov	r1, #2
fffd0f64:	e0800003 	add	r0, r0, r3
fffd0f68:	ebfffd57 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0f6c:	e3500000 	cmp	r0, #0
fffd0f70:	0a000386 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
			if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0000))  // ADDR_GEN
				return (FALSE);
		}
	}

	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0801)) {return (FALSE);} // H_COUNT
fffd0f74:	e59f798c 	ldr	r7, [pc, #2444]	; fffd1908 <GFX_ConfigureDisplayTo1024x768+0x1048>
fffd0f78:	e3015fde 	movw	r5, #8158	; 0x1fde
fffd0f7c:	e3002801 	movw	r2, #2049	; 0x801
fffd0f80:	e3a01002 	mov	r1, #2
fffd0f84:	e08f7007 	add	r7, pc, r7
fffd0f88:	e5970000 	ldr	r0, [r7]
fffd0f8c:	e0850000 	add	r0, r5, r0
fffd0f90:	ebfffd4d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0f94:	e3500000 	cmp	r0, #0
fffd0f98:	0a00037c 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x8002)) {return (FALSE);} // V_COUNT 
fffd0f9c:	e5970000 	ldr	r0, [r7]
fffd0fa0:	e3082002 	movw	r2, #32770	; 0x8002
fffd0fa4:	e3a01002 	mov	r1, #2
fffd0fa8:	e0850000 	add	r0, r5, r0
fffd0fac:	ebfffd46 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0fb0:	e3500000 	cmp	r0, #0
fffd0fb4:	0a000375 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
fffd0fb8:	e5970000 	ldr	r0, [r7]
	
	if (colorDepth == COLOR_DEPTH_32BIT) {
fffd0fbc:	e3540004 	cmp	r4, #4
fffd0fc0:	e0850000 	add	r0, r5, r0
fffd0fc4:	1a000385 	bne	fffd1de0 <GFX_ConfigureDisplayTo1024x768+0x1520>
		if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x8303)) //MISC
fffd0fc8:	e3082303 	movw	r2, #33539	; 0x8303
fffd0fcc:	e3a01002 	mov	r1, #2
fffd0fd0:	ebfffd3d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0fd4:	e3500000 	cmp	r0, #0
fffd0fd8:	0a00036c 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
    } else if (colorDepth == COLOR_DEPTH_24BIT) {
			if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x8203)) // MISC
				return (FALSE);
	}

	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0004)) {return (FALSE);} // MEM_PAGE
fffd0fdc:	e59f5928 	ldr	r5, [pc, #2344]	; fffd190c <GFX_ConfigureDisplayTo1024x768+0x104c>
fffd0fe0:	e3017fde 	movw	r7, #8158	; 0x1fde
fffd0fe4:	e3a02004 	mov	r2, #4
fffd0fe8:	e3a01002 	mov	r1, #2
fffd0fec:	e08f5005 	add	r5, pc, r5
fffd0ff0:	e5950000 	ldr	r0, [r5]
fffd0ff4:	e0870000 	add	r0, r7, r0
fffd0ff8:	ebfffd33 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd0ffc:	e3500000 	cmp	r0, #0
fffd1000:	0a000362 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0005)) {return (FALSE);} // HVIDMID
fffd1004:	e5950000 	ldr	r0, [r5]
fffd1008:	e3a02005 	mov	r2, #5
fffd100c:	e3a01002 	mov	r1, #2
fffd1010:	e0870000 	add	r0, r7, r0
fffd1014:	ebfffd2c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1018:	e3500000 	cmp	r0, #0
fffd101c:	0a00035b 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x2006)) {return (FALSE);} // P_REQ_CTL
fffd1020:	e5950000 	ldr	r0, [r5]
fffd1024:	e3022006 	movw	r2, #8198	; 0x2006
fffd1028:	e3a01002 	mov	r1, #2
fffd102c:	e0870000 	add	r0, r7, r0
fffd1030:	ebfffd25 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1034:	e3500000 	cmp	r0, #0
fffd1038:	0a000354 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0007)) {return (FALSE);} // REQ_CTL
fffd103c:	e5950000 	ldr	r0, [r5]
fffd1040:	e3a02007 	mov	r2, #7
fffd1044:	e3a01002 	mov	r1, #2
fffd1048:	e0870000 	add	r0, r7, r0
fffd104c:	ebfffd1e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1050:	e3500000 	cmp	r0, #0
fffd1054:	0a00034d 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	
	// Poleg - New registers
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x1030)) {return (FALSE);} //MGABURSTSIZE
fffd1058:	e5950000 	ldr	r0, [r5]
fffd105c:	e3012030 	movw	r2, #4144	; 0x1030
fffd1060:	e3a01002 	mov	r1, #2
fffd1064:	e0870000 	add	r0, r7, r0
fffd1068:	ebfffd17 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd106c:	e3500000 	cmp	r0, #0
fffd1070:	0a000346 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0534)) {return (FALSE);} //MGAREQCTL
fffd1074:	e5950000 	ldr	r0, [r5]
fffd1078:	e3002534 	movw	r2, #1332	; 0x534
fffd107c:	e3a01002 	mov	r1, #2
fffd1080:	e0870000 	add	r0, r7, r0
fffd1084:	ebfffd10 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1088:	e3500000 	cmp	r0, #0
fffd108c:	0a00033f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	LogMessage("> CRTC Extension configuration done.\n");
fffd1090:	e59f0878 	ldr	r0, [pc, #2168]	; fffd1910 <GFX_ConfigureDisplayTo1024x768+0x1050>
fffd1094:	e08f0000 	add	r0, pc, r0
fffd1098:	eb000e86 	bl	fffd4ab8 <LogMessage>

	/*----------------------------------------------------------------------------------------------*/
	/* DAC Eclipse Configuration																	*/
	/*----------------------------------------------------------------------------------------------*/

	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x04)) {return (FALSE);} // XCURADDL
fffd109c:	e5950000 	ldr	r0, [r5]
fffd10a0:	e3a02004 	mov	r2, #4
fffd10a4:	e3a01001 	mov	r1, #1
fffd10a8:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd10ac:	ebfffd06 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd10b0:	e3500000 	cmp	r0, #0
fffd10b4:	0a000335 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x4F)) {return (FALSE);} 
fffd10b8:	e5950000 	ldr	r0, [r5]
fffd10bc:	e3037c0a 	movw	r7, #15370	; 0x3c0a
fffd10c0:	e3a0204f 	mov	r2, #79	; 0x4f
fffd10c4:	e3a01001 	mov	r1, #1
fffd10c8:	e0870000 	add	r0, r7, r0
fffd10cc:	ebfffcfe 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd10d0:	e3500000 	cmp	r0, #0
fffd10d4:	0a00032d 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x05)) {return (FALSE);} // XCURADDH
fffd10d8:	e5950000 	ldr	r0, [r5]
fffd10dc:	e3a02005 	mov	r2, #5
fffd10e0:	e3a01001 	mov	r1, #1
fffd10e4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd10e8:	ebfffcf7 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd10ec:	e3500000 	cmp	r0, #0
fffd10f0:	0a000326 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x3A)) {return (FALSE);}
fffd10f4:	e5950000 	ldr	r0, [r5]
fffd10f8:	e3a0203a 	mov	r2, #58	; 0x3a
fffd10fc:	e3a01001 	mov	r1, #1
fffd1100:	e0870000 	add	r0, r7, r0
fffd1104:	ebfffcf0 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1108:	e3500000 	cmp	r0, #0
fffd110c:	0a00031f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x06)) {return (FALSE);} // XCURCTRL
fffd1110:	e59f57fc 	ldr	r5, [pc, #2044]	; fffd1914 <GFX_ConfigureDisplayTo1024x768+0x1054>
fffd1114:	e3a02006 	mov	r2, #6
fffd1118:	e3a01001 	mov	r1, #1
fffd111c:	e08f5005 	add	r5, pc, r5
fffd1120:	e5950000 	ldr	r0, [r5]
fffd1124:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1128:	ebfffce7 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd112c:	e3500000 	cmp	r0, #0
fffd1130:	0a000316 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd1134:	e5950000 	ldr	r0, [r5]
fffd1138:	e3a02000 	mov	r2, #0
fffd113c:	e3a01001 	mov	r1, #1
fffd1140:	e0870000 	add	r0, r7, r0
fffd1144:	ebfffce0 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1148:	e3500000 	cmp	r0, #0
fffd114c:	0a00030f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x08)) {return (FALSE);} // XCURCOL0RED
fffd1150:	e5950000 	ldr	r0, [r5]
fffd1154:	e3a02008 	mov	r2, #8
fffd1158:	e3a01001 	mov	r1, #1
fffd115c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1160:	ebfffcd9 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1164:	e3500000 	cmp	r0, #0
fffd1168:	0a000308 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x82)) {return (FALSE);}
fffd116c:	e5950000 	ldr	r0, [r5]
fffd1170:	e3a02082 	mov	r2, #130	; 0x82
fffd1174:	e3a01001 	mov	r1, #1
fffd1178:	e0870000 	add	r0, r7, r0
fffd117c:	ebfffcd2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1180:	e3500000 	cmp	r0, #0
fffd1184:	0a000301 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x09)) {return (FALSE);} // XCURCOL0GREEN
fffd1188:	e5950000 	ldr	r0, [r5]
fffd118c:	e3a02009 	mov	r2, #9
fffd1190:	e3a01001 	mov	r1, #1
fffd1194:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1198:	ebfffccb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd119c:	e3500000 	cmp	r0, #0
fffd11a0:	0a0002fa 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xFB)) {return (FALSE);}
fffd11a4:	e5950000 	ldr	r0, [r5]
fffd11a8:	e3a020fb 	mov	r2, #251	; 0xfb
fffd11ac:	e3a01001 	mov	r1, #1
fffd11b0:	e0870000 	add	r0, r7, r0
fffd11b4:	ebfffcc4 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd11b8:	e3500000 	cmp	r0, #0
fffd11bc:	0a0002f3 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x0A)) {return (FALSE);} // XCURCOL0BLUE
fffd11c0:	e5950000 	ldr	r0, [r5]
fffd11c4:	e3a0200a 	mov	r2, #10
fffd11c8:	e3a01001 	mov	r1, #1
fffd11cc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd11d0:	ebfffcbd 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd11d4:	e3500000 	cmp	r0, #0
fffd11d8:	0a0002ec 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x44)) {return (FALSE);}
fffd11dc:	e5950000 	ldr	r0, [r5]
fffd11e0:	e3a02044 	mov	r2, #68	; 0x44
fffd11e4:	e3a01001 	mov	r1, #1
fffd11e8:	e0870000 	add	r0, r7, r0
fffd11ec:	ebfffcb6 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd11f0:	e3500000 	cmp	r0, #0
fffd11f4:	0a0002e5 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x0C)) {return (FALSE);} // XCURCOL1RED
fffd11f8:	e5950000 	ldr	r0, [r5]
fffd11fc:	e3a0200c 	mov	r2, #12
fffd1200:	e3a01001 	mov	r1, #1
fffd1204:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1208:	ebfffcaf 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd120c:	e3500000 	cmp	r0, #0
fffd1210:	0a0002de 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x2C)) {return (FALSE);}
fffd1214:	e5950000 	ldr	r0, [r5]
fffd1218:	e3a0202c 	mov	r2, #44	; 0x2c
fffd121c:	e3a01001 	mov	r1, #1
fffd1220:	e0870000 	add	r0, r7, r0
fffd1224:	ebfffca8 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1228:	e3500000 	cmp	r0, #0
fffd122c:	0a0002d7 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x0D)) {return (FALSE);} // XCURCOL1GREE
fffd1230:	e59f56e0 	ldr	r5, [pc, #1760]	; fffd1918 <GFX_ConfigureDisplayTo1024x768+0x1058>
fffd1234:	e3a0200d 	mov	r2, #13
fffd1238:	e3a01001 	mov	r1, #1
fffd123c:	e08f5005 	add	r5, pc, r5
fffd1240:	e5950000 	ldr	r0, [r5]
fffd1244:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1248:	ebfffc9f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd124c:	e3500000 	cmp	r0, #0
fffd1250:	0a0002ce 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x75)) {return (FALSE);}
fffd1254:	e5950000 	ldr	r0, [r5]
fffd1258:	e3a02075 	mov	r2, #117	; 0x75
fffd125c:	e3a01001 	mov	r1, #1
fffd1260:	e0870000 	add	r0, r7, r0
fffd1264:	ebfffc98 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1268:	e3500000 	cmp	r0, #0
fffd126c:	0a0002c7 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x0E)) {return (FALSE);} // XCURCOL1BLUE
fffd1270:	e5950000 	ldr	r0, [r5]
fffd1274:	e3a0200e 	mov	r2, #14
fffd1278:	e3a01001 	mov	r1, #1
fffd127c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1280:	ebfffc91 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1284:	e3500000 	cmp	r0, #0
fffd1288:	0a0002c0 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x8B)) {return (FALSE);}
fffd128c:	e5950000 	ldr	r0, [r5]
fffd1290:	e3a0208b 	mov	r2, #139	; 0x8b
fffd1294:	e3a01001 	mov	r1, #1
fffd1298:	e0870000 	add	r0, r7, r0
fffd129c:	ebfffc8a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd12a0:	e3500000 	cmp	r0, #0
fffd12a4:	0a0002b9 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x10)) {return (FALSE);} // XCURCOL2RED
fffd12a8:	e5950000 	ldr	r0, [r5]
fffd12ac:	e3a02010 	mov	r2, #16
fffd12b0:	e3a01001 	mov	r1, #1
fffd12b4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd12b8:	ebfffc83 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd12bc:	e3500000 	cmp	r0, #0
fffd12c0:	0a0002b2 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x14)) {return (FALSE);}
fffd12c4:	e5950000 	ldr	r0, [r5]
fffd12c8:	e3a02014 	mov	r2, #20
fffd12cc:	e3a01001 	mov	r1, #1
fffd12d0:	e0870000 	add	r0, r7, r0
fffd12d4:	ebfffc7c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd12d8:	e3500000 	cmp	r0, #0
fffd12dc:	0a0002ab 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x11)) {return (FALSE);} // XCURCOL2GREEN
fffd12e0:	e5950000 	ldr	r0, [r5]
fffd12e4:	e3a02011 	mov	r2, #17
fffd12e8:	e3a01001 	mov	r1, #1
fffd12ec:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd12f0:	ebfffc75 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd12f4:	e3500000 	cmp	r0, #0
fffd12f8:	0a0002a4 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x2E)) {return (FALSE);}
fffd12fc:	e5950000 	ldr	r0, [r5]
fffd1300:	e3a0202e 	mov	r2, #46	; 0x2e
fffd1304:	e3a01001 	mov	r1, #1
fffd1308:	e0870000 	add	r0, r7, r0
fffd130c:	ebfffc6e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1310:	e3500000 	cmp	r0, #0
fffd1314:	0a00029d 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x12)) {return (FALSE);} // XCURCOL2BLUE
fffd1318:	e5950000 	ldr	r0, [r5]
fffd131c:	e3a02012 	mov	r2, #18
fffd1320:	e3a01001 	mov	r1, #1
fffd1324:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1328:	ebfffc67 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd132c:	e3500000 	cmp	r0, #0
fffd1330:	0a000296 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x4A)) {return (FALSE);}
fffd1334:	e5950000 	ldr	r0, [r5]
fffd1338:	e3a0204a 	mov	r2, #74	; 0x4a
fffd133c:	e3a01001 	mov	r1, #1
fffd1340:	e0870000 	add	r0, r7, r0
fffd1344:	ebfffc60 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1348:	e3500000 	cmp	r0, #0
fffd134c:	0a00028f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x19)) {return (FALSE);}		// XMULCTRL
fffd1350:	e59f55c4 	ldr	r5, [pc, #1476]	; fffd191c <GFX_ConfigureDisplayTo1024x768+0x105c>
fffd1354:	e3a02019 	mov	r2, #25
fffd1358:	e3a01001 	mov	r1, #1
fffd135c:	e08f5005 	add	r5, pc, r5
fffd1360:	e5950000 	ldr	r0, [r5]
fffd1364:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1368:	ebfffc57 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd136c:	e3500000 	cmp	r0, #0
fffd1370:	0a000286 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if (colorDepth == COLOR_DEPTH_32BIT) {
fffd1374:	e3540004 	cmp	r4, #4
fffd1378:	e5950000 	ldr	r0, [r5]
fffd137c:	1a00029e 	bne	fffd1dfc <GFX_ConfigureDisplayTo1024x768+0x153c>
		if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x07))
fffd1380:	e3a02007 	mov	r2, #7
fffd1384:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1388:	e3a01001 	mov	r1, #1
fffd138c:	e280000a 	add	r0, r0, #10
fffd1390:	ebfffc4d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1394:	e3500000 	cmp	r0, #0
fffd1398:	0a00027c 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
				return (FALSE);
	} else if (colorDepth == COLOR_DEPTH_24BIT) {
			if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x03))
				return (FALSE);
	}
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1A)) {return (FALSE);}		// XPIXCLKCTRL (should be 9?)
fffd139c:	e59f557c 	ldr	r5, [pc, #1404]	; fffd1920 <GFX_ConfigureDisplayTo1024x768+0x1060>
fffd13a0:	e3a0201a 	mov	r2, #26
fffd13a4:	e3a01001 	mov	r1, #1
fffd13a8:	e08f5005 	add	r5, pc, r5
fffd13ac:	e5950000 	ldr	r0, [r5]
fffd13b0:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd13b4:	ebfffc44 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd13b8:	e3500000 	cmp	r0, #0
fffd13bc:	0a000273 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x09)) {return (FALSE);}
fffd13c0:	e5950000 	ldr	r0, [r5]
fffd13c4:	e3037c0a 	movw	r7, #15370	; 0x3c0a
fffd13c8:	e3a02009 	mov	r2, #9
fffd13cc:	e3a01001 	mov	r1, #1
fffd13d0:	e0870000 	add	r0, r7, r0
fffd13d4:	ebfffc3c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd13d8:	e3500000 	cmp	r0, #0
fffd13dc:	0a00026b 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1D)) {return (FALSE);}		// XGENCTRL
fffd13e0:	e5950000 	ldr	r0, [r5]
fffd13e4:	e3a0201d 	mov	r2, #29
fffd13e8:	e3a01001 	mov	r1, #1
fffd13ec:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd13f0:	ebfffc35 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd13f4:	e3500000 	cmp	r0, #0
fffd13f8:	0a000264 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x20)) {return (FALSE);}
fffd13fc:	e5950000 	ldr	r0, [r5]
fffd1400:	e3a02020 	mov	r2, #32
fffd1404:	e3a01001 	mov	r1, #1
fffd1408:	e0870000 	add	r0, r7, r0
fffd140c:	ebfffc2e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1410:	e3500000 	cmp	r0, #0
fffd1414:	0a00025d 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1E)) {return (FALSE);}		// XMISCCTRL
fffd1418:	e5950000 	ldr	r0, [r5]
fffd141c:	e3a0201e 	mov	r2, #30
fffd1420:	e3a01001 	mov	r1, #1
fffd1424:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1428:	ebfffc27 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd142c:	e3500000 	cmp	r0, #0
fffd1430:	0a000256 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x1F)) {return (FALSE);}
fffd1434:	e5950000 	ldr	r0, [r5]
fffd1438:	e3a0201f 	mov	r2, #31
fffd143c:	e3a01001 	mov	r1, #1
fffd1440:	e0870000 	add	r0, r7, r0
fffd1444:	ebfffc20 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1448:	e3500000 	cmp	r0, #0
fffd144c:	0a00024f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2A)) {return (FALSE);}		// XGENIOCTRL
fffd1450:	e5950000 	ldr	r0, [r5]
fffd1454:	e3a0202a 	mov	r2, #42	; 0x2a
fffd1458:	e3a01001 	mov	r1, #1
fffd145c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1460:	ebfffc19 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1464:	e3500000 	cmp	r0, #0
fffd1468:	0a000248 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x01)) {return (FALSE);}
fffd146c:	e5950000 	ldr	r0, [r5]
fffd1470:	e3a02001 	mov	r2, #1
fffd1474:	e1a01002 	mov	r1, r2
fffd1478:	e0870000 	add	r0, r7, r0
fffd147c:	ebfffc12 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1480:	e3500000 	cmp	r0, #0
fffd1484:	0a000241 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2B)) {return (FALSE);}		// XGENIODATA		
fffd1488:	e5950000 	ldr	r0, [r5]
fffd148c:	e3a0202b 	mov	r2, #43	; 0x2b
fffd1490:	e3a01001 	mov	r1, #1
fffd1494:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1498:	ebfffc0b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd149c:	e3500000 	cmp	r0, #0
fffd14a0:	0a00023a 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x02)) {return (FALSE);}
fffd14a4:	e5950000 	ldr	r0, [r5]
fffd14a8:	e3a02002 	mov	r2, #2
fffd14ac:	e3a01001 	mov	r1, #1
fffd14b0:	e0870000 	add	r0, r7, r0
fffd14b4:	ebfffc04 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd14b8:	e3500000 	cmp	r0, #0
fffd14bc:	0a000233 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2C)) {return (FALSE);}		// ?? rsvd.
fffd14c0:	e59f545c 	ldr	r5, [pc, #1116]	; fffd1924 <GFX_ConfigureDisplayTo1024x768+0x1064>
fffd14c4:	e3a0202c 	mov	r2, #44	; 0x2c
fffd14c8:	e3a01001 	mov	r1, #1
fffd14cc:	e08f5005 	add	r5, pc, r5
fffd14d0:	e5950000 	ldr	r0, [r5]
fffd14d4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd14d8:	ebfffbfb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd14dc:	e3500000 	cmp	r0, #0
fffd14e0:	0a00022a 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x14)) {return (FALSE);}
fffd14e4:	e5950000 	ldr	r0, [r5]
fffd14e8:	e3a02014 	mov	r2, #20
fffd14ec:	e3a01001 	mov	r1, #1
fffd14f0:	e0870000 	add	r0, r7, r0
fffd14f4:	ebfffbf4 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd14f8:	e3500000 	cmp	r0, #0
fffd14fc:	0a000223 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2D)) {return (FALSE);}		// ?? rsvd.
fffd1500:	e5950000 	ldr	r0, [r5]
fffd1504:	e3a0202d 	mov	r2, #45	; 0x2d
fffd1508:	e3a01001 	mov	r1, #1
fffd150c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1510:	ebfffbed 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1514:	e3500000 	cmp	r0, #0
fffd1518:	0a00021c 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x71)) {return (FALSE);}
fffd151c:	e5950000 	ldr	r0, [r5]
fffd1520:	e3a02071 	mov	r2, #113	; 0x71
fffd1524:	e3a01001 	mov	r1, #1
fffd1528:	e0870000 	add	r0, r7, r0
fffd152c:	ebfffbe6 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1530:	e3500000 	cmp	r0, #0
fffd1534:	0a000215 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2E)) {return (FALSE);}		// ?? rsvd.
fffd1538:	e5950000 	ldr	r0, [r5]
fffd153c:	e3a0202e 	mov	r2, #46	; 0x2e
fffd1540:	e3a01001 	mov	r1, #1
fffd1544:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1548:	ebfffbdf 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd154c:	e3500000 	cmp	r0, #0
fffd1550:	0a00020e 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x01)) {return (FALSE);}
fffd1554:	e5950000 	ldr	r0, [r5]
fffd1558:	e3a02001 	mov	r2, #1
fffd155c:	e1a01002 	mov	r1, r2
fffd1560:	e0870000 	add	r0, r7, r0
fffd1564:	ebfffbd8 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1568:	e3500000 	cmp	r0, #0
fffd156c:	0a000207 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2F)) {return (FALSE);}		// ?? rsvd.
fffd1570:	e5950000 	ldr	r0, [r5]
fffd1574:	e3a0202f 	mov	r2, #47	; 0x2f
fffd1578:	e3a01001 	mov	r1, #1
fffd157c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1580:	ebfffbd1 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1584:	e3500000 	cmp	r0, #0
fffd1588:	0a000200 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x40)) {return (FALSE);}
fffd158c:	e5950000 	ldr	r0, [r5]
fffd1590:	e3a02040 	mov	r2, #64	; 0x40
fffd1594:	e3a01001 	mov	r1, #1
fffd1598:	e0870000 	add	r0, r7, r0
fffd159c:	ebfffbca 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd15a0:	e3500000 	cmp	r0, #0
fffd15a4:	0a0001f9 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x38)) {return (FALSE);}		// XZOOMCTRL
fffd15a8:	e5950000 	ldr	r0, [r5]
fffd15ac:	e3a02038 	mov	r2, #56	; 0x38
fffd15b0:	e3a01001 	mov	r1, #1
fffd15b4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd15b8:	ebfffbc3 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd15bc:	e3500000 	cmp	r0, #0
fffd15c0:	0a0001f2 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd15c4:	e5950000 	ldr	r0, [r5]
fffd15c8:	e3a02000 	mov	r2, #0
fffd15cc:	e3a01001 	mov	r1, #1
fffd15d0:	e0870000 	add	r0, r7, r0
fffd15d4:	ebfffbbc 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd15d8:	e3500000 	cmp	r0, #0
fffd15dc:	0a0001eb 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x3A)) {return (FALSE);}		// XSENSETEST (RO)
fffd15e0:	e59f5340 	ldr	r5, [pc, #832]	; fffd1928 <GFX_ConfigureDisplayTo1024x768+0x1068>
fffd15e4:	e3a0203a 	mov	r2, #58	; 0x3a
fffd15e8:	e3a01001 	mov	r1, #1
fffd15ec:	e08f5005 	add	r5, pc, r5
fffd15f0:	e5950000 	ldr	r0, [r5]
fffd15f4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd15f8:	ebfffbb3 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd15fc:	e3500000 	cmp	r0, #0
fffd1600:	0a0001e2 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd1604:	e5950000 	ldr	r0, [r5]
fffd1608:	e3a02000 	mov	r2, #0
fffd160c:	e3a01001 	mov	r1, #1
fffd1610:	e0870000 	add	r0, r7, r0
fffd1614:	ebfffbac 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1618:	e3500000 	cmp	r0, #0
fffd161c:	0a0001db 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x3C)) {return (FALSE);}		// XCRCREML
fffd1620:	e5950000 	ldr	r0, [r5]
fffd1624:	e3a0203c 	mov	r2, #60	; 0x3c
fffd1628:	e3a01001 	mov	r1, #1
fffd162c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1630:	ebfffba5 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1634:	e3500000 	cmp	r0, #0
fffd1638:	0a0001d4 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd163c:	e5950000 	ldr	r0, [r5]
fffd1640:	e3a02000 	mov	r2, #0
fffd1644:	e3a01001 	mov	r1, #1
fffd1648:	e0870000 	add	r0, r7, r0
fffd164c:	ebfffb9e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1650:	e3500000 	cmp	r0, #0
fffd1654:	0a0001cd 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x3D)) {return (FALSE);}		// XCRCREMH (RO)
fffd1658:	e5950000 	ldr	r0, [r5]
fffd165c:	e3a0203d 	mov	r2, #61	; 0x3d
fffd1660:	e3a01001 	mov	r1, #1
fffd1664:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1668:	ebfffb97 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd166c:	e3500000 	cmp	r0, #0
fffd1670:	0a0001c6 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xB5)) {return (FALSE);}
fffd1674:	e5950000 	ldr	r0, [r5]
fffd1678:	e3a020b5 	mov	r2, #181	; 0xb5
fffd167c:	e3a01001 	mov	r1, #1
fffd1680:	e0870000 	add	r0, r7, r0
fffd1684:	ebfffb90 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1688:	e3500000 	cmp	r0, #0
fffd168c:	0a0001bf 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x3E)) {return (FALSE);}		// XCRCBITSEL
fffd1690:	e5950000 	ldr	r0, [r5]
fffd1694:	e3a0203e 	mov	r2, #62	; 0x3e
fffd1698:	e3a01001 	mov	r1, #1
fffd169c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd16a0:	ebfffb89 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd16a4:	e3500000 	cmp	r0, #0
fffd16a8:	0a0001b8 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x0B)) {return (FALSE);}		
fffd16ac:	e5950000 	ldr	r0, [r5]
fffd16b0:	e3a0200b 	mov	r2, #11
fffd16b4:	e3a01001 	mov	r1, #1
fffd16b8:	e0870000 	add	r0, r7, r0
fffd16bc:	ebfffb82 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd16c0:	e3500000 	cmp	r0, #0
fffd16c4:	0a0001b1 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x40)) {return (FALSE);}		// ?? rsvd. 
fffd16c8:	e5950000 	ldr	r0, [r5]
fffd16cc:	e3a02040 	mov	r2, #64	; 0x40
fffd16d0:	e3a01001 	mov	r1, #1
fffd16d4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd16d8:	ebfffb7b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd16dc:	e3500000 	cmp	r0, #0
fffd16e0:	0a0001aa 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xFD)) {return (FALSE);}
fffd16e4:	e5950000 	ldr	r0, [r5]
fffd16e8:	e3a020fd 	mov	r2, #253	; 0xfd
fffd16ec:	e3a01001 	mov	r1, #1
fffd16f0:	e0870000 	add	r0, r7, r0
fffd16f4:	ebfffb74 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd16f8:	e3500000 	cmp	r0, #0
fffd16fc:	0a0001a3 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x41)) {return (FALSE);}		// ?? rsvd.
fffd1700:	e59f5224 	ldr	r5, [pc, #548]	; fffd192c <GFX_ConfigureDisplayTo1024x768+0x106c>
fffd1704:	e3a02041 	mov	r2, #65	; 0x41
fffd1708:	e3a01001 	mov	r1, #1
fffd170c:	e08f5005 	add	r5, pc, r5
fffd1710:	e5950000 	ldr	r0, [r5]
fffd1714:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1718:	ebfffb6b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd171c:	e3500000 	cmp	r0, #0
fffd1720:	0a00019a 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd1724:	e5950000 	ldr	r0, [r5]
fffd1728:	e3a02000 	mov	r2, #0
fffd172c:	e3a01001 	mov	r1, #1
fffd1730:	e0870000 	add	r0, r7, r0
fffd1734:	ebfffb64 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1738:	e3500000 	cmp	r0, #0
fffd173c:	0a000193 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x42)) {return (FALSE);}		// ?? rsvd.
fffd1740:	e5950000 	ldr	r0, [r5]
fffd1744:	e3a02042 	mov	r2, #66	; 0x42
fffd1748:	e3a01001 	mov	r1, #1
fffd174c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1750:	ebfffb5d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1754:	e3500000 	cmp	r0, #0
fffd1758:	0a00018c 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xB6)) {return (FALSE);}
fffd175c:	e5950000 	ldr	r0, [r5]
fffd1760:	e3a020b6 	mov	r2, #182	; 0xb6
fffd1764:	e3a01001 	mov	r1, #1
fffd1768:	e0870000 	add	r0, r7, r0
fffd176c:	ebfffb56 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1770:	e3500000 	cmp	r0, #0
fffd1774:	0a000185 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x43)) {return (FALSE);}		// ?? rsvd.
fffd1778:	e5950000 	ldr	r0, [r5]
fffd177c:	e3a02043 	mov	r2, #67	; 0x43
fffd1780:	e3a01001 	mov	r1, #1
fffd1784:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1788:	ebfffb4f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd178c:	e3500000 	cmp	r0, #0
fffd1790:	0a00017e 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd1794:	e5950000 	ldr	r0, [r5]
fffd1798:	e3a02000 	mov	r2, #0
fffd179c:	e3a01001 	mov	r1, #1
fffd17a0:	e0870000 	add	r0, r7, r0
fffd17a4:	ebfffb48 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd17a8:	e3500000 	cmp	r0, #0
fffd17ac:	0a000177 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x44)) {return (FALSE);}		// ?? rsvd.
fffd17b0:	e5950000 	ldr	r0, [r5]
fffd17b4:	e3a02044 	mov	r2, #68	; 0x44
fffd17b8:	e3a01001 	mov	r1, #1
fffd17bc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd17c0:	ebfffb41 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd17c4:	e3500000 	cmp	r0, #0
fffd17c8:	0a000170 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x11)) {return (FALSE);}
fffd17cc:	e5950000 	ldr	r0, [r5]
fffd17d0:	e3a02011 	mov	r2, #17
fffd17d4:	e3a01001 	mov	r1, #1
fffd17d8:	e0870000 	add	r0, r7, r0
fffd17dc:	ebfffb3a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd17e0:	e3500000 	cmp	r0, #0
fffd17e4:	0a000169 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x45)) {return (FALSE);}		// ?? rsvd.
fffd17e8:	e5950000 	ldr	r0, [r5]
fffd17ec:	e3a02045 	mov	r2, #69	; 0x45
fffd17f0:	e3a01001 	mov	r1, #1
fffd17f4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd17f8:	ebfffb33 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd17fc:	e3500000 	cmp	r0, #0
fffd1800:	0a000162 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x10)) {return (FALSE);}
fffd1804:	e5950000 	ldr	r0, [r5]
fffd1808:	e3a02010 	mov	r2, #16
fffd180c:	e3a01001 	mov	r1, #1
fffd1810:	e0870000 	add	r0, r7, r0
fffd1814:	ebfffb2c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1818:	e3500000 	cmp	r0, #0
fffd181c:	0a00015b 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x46)) {return (FALSE);}		// ?? rsvd.
fffd1820:	e59f5108 	ldr	r5, [pc, #264]	; fffd1930 <GFX_ConfigureDisplayTo1024x768+0x1070>
fffd1824:	e3a02046 	mov	r2, #70	; 0x46
fffd1828:	e3a01001 	mov	r1, #1
fffd182c:	e08f5005 	add	r5, pc, r5
fffd1830:	e5950000 	ldr	r0, [r5]
fffd1834:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1838:	ebfffb23 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd183c:	e3500000 	cmp	r0, #0
fffd1840:	0a000152 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x07)) {return (FALSE);}
fffd1844:	e5950000 	ldr	r0, [r5]
fffd1848:	e3a02007 	mov	r2, #7
fffd184c:	e3a01001 	mov	r1, #1
fffd1850:	e0870000 	add	r0, r7, r0
fffd1854:	ebfffb1c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1858:	e3500000 	cmp	r0, #0
fffd185c:	0a00014b 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x48)) {return (FALSE);}		// ?? rsvd.
fffd1860:	e5950000 	ldr	r0, [r5]
fffd1864:	e3a02048 	mov	r2, #72	; 0x48
fffd1868:	e3a01001 	mov	r1, #1
fffd186c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1870:	ebfffb15 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1874:	e3500000 	cmp	r0, #0
fffd1878:	0a000144 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x0C)) {return (FALSE);}
fffd187c:	e5950000 	ldr	r0, [r5]
fffd1880:	e3a0200c 	mov	r2, #12
fffd1884:	e3a01001 	mov	r1, #1
fffd1888:	e0870000 	add	r0, r7, r0
fffd188c:	ebfffb0e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1890:	e3500000 	cmp	r0, #0
fffd1894:	0a00013d 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x49)) {return (FALSE);}		// ?? rsvd.
fffd1898:	e5950000 	ldr	r0, [r5]
fffd189c:	e3a02049 	mov	r2, #73	; 0x49
fffd18a0:	e3a01001 	mov	r1, #1
fffd18a4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd18a8:	ebfffb07 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd18ac:	e3500000 	cmp	r0, #0
fffd18b0:	0a000136 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
fffd18b4:	ea000029 	b	fffd1960 <GFX_ConfigureDisplayTo1024x768+0x10a0>
fffd18b8:	0000b1f7 	.word	0x0000b1f7
fffd18bc:	0000b1c9 	.word	0x0000b1c9
fffd18c0:	0536102b 	.word	0x0536102b
fffd18c4:	0000c934 	.word	0x0000c934
fffd18c8:	0000b210 	.word	0x0000b210
fffd18cc:	0000d314 	.word	0x0000d314
fffd18d0:	00010014 	.word	0x00010014
fffd18d4:	0000b1fc 	.word	0x0000b1fc
fffd18d8:	00010010 	.word	0x00010010
fffd18dc:	0000b21e 	.word	0x0000b21e
fffd18e0:	00010004 	.word	0x00010004
fffd18e4:	00000030 	.word	0x00000030
fffd18e8:	0000d228 	.word	0x0000d228
fffd18ec:	0000b10a 	.word	0x0000b10a
fffd18f0:	0000d110 	.word	0x0000d110
fffd18f4:	0000b018 	.word	0x0000b018
fffd18f8:	0000cfdc 	.word	0x0000cfdc
fffd18fc:	0000cebc 	.word	0x0000cebc
fffd1900:	0000cdc8 	.word	0x0000cdc8
fffd1904:	0000ace3 	.word	0x0000ace3
fffd1908:	0000cca8 	.word	0x0000cca8
fffd190c:	0000cc40 	.word	0x0000cc40
fffd1910:	0000abaf 	.word	0x0000abaf
fffd1914:	0000cb10 	.word	0x0000cb10
fffd1918:	0000c9f0 	.word	0x0000c9f0
fffd191c:	0000c8d0 	.word	0x0000c8d0
fffd1920:	0000c884 	.word	0x0000c884
fffd1924:	0000c760 	.word	0x0000c760
fffd1928:	0000c640 	.word	0x0000c640
fffd192c:	0000c520 	.word	0x0000c520
fffd1930:	0000c400 	.word	0x0000c400
fffd1934:	0000c234 	.word	0x0000c234
fffd1938:	0000c114 	.word	0x0000c114
fffd193c:	0000bff4 	.word	0x0000bff4
fffd1940:	00009ff5 	.word	0x00009ff5
fffd1944:	00009f7c 	.word	0x00009f7c
fffd1948:	00009f8f 	.word	0x00009f8f
fffd194c:	00000034 	.word	0x00000034
fffd1950:	00009f94 	.word	0x00009f94
fffd1954:	00009d88 	.word	0x00009d88
fffd1958:	00009de4 	.word	0x00009de4
fffd195c:	00009dee 	.word	0x00009dee
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x75)) {return (FALSE);}
fffd1960:	e5950000 	ldr	r0, [r5]
fffd1964:	e3a02075 	mov	r2, #117	; 0x75
fffd1968:	e3a01001 	mov	r1, #1
fffd196c:	e0870000 	add	r0, r7, r0
fffd1970:	ebfffad5 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1974:	e3500000 	cmp	r0, #0
fffd1978:	0a000104 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4A)) {return (FALSE);}		// ?? rsvd.
fffd197c:	e5950000 	ldr	r0, [r5]
fffd1980:	e3a0204a 	mov	r2, #74	; 0x4a
fffd1984:	e3a01001 	mov	r1, #1
fffd1988:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd198c:	ebffface 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1990:	e3500000 	cmp	r0, #0
fffd1994:	0a0000fd 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x07)) {return (FALSE);}
fffd1998:	e5950000 	ldr	r0, [r5]
fffd199c:	e3a02007 	mov	r2, #7
fffd19a0:	e3a01001 	mov	r1, #1
fffd19a4:	e0870000 	add	r0, r7, r0
fffd19a8:	ebfffac7 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd19ac:	e3500000 	cmp	r0, #0
fffd19b0:	0a0000f6 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4C)) {return (FALSE);}		// ?? rsvd.
fffd19b4:	e5950000 	ldr	r0, [r5]
fffd19b8:	e3a0204c 	mov	r2, #76	; 0x4c
fffd19bc:	e3a01001 	mov	r1, #1
fffd19c0:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd19c4:	ebfffac0 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd19c8:	e3500000 	cmp	r0, #0
fffd19cc:	0a0000ef 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x13)) {return (FALSE);}
fffd19d0:	e5950000 	ldr	r0, [r5]
fffd19d4:	e3a02013 	mov	r2, #19
fffd19d8:	e3a01001 	mov	r1, #1
fffd19dc:	e0870000 	add	r0, r7, r0
fffd19e0:	ebfffab9 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd19e4:	e3500000 	cmp	r0, #0
fffd19e8:	0a0000e8 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4D)) {return (FALSE);}		// ?? rsvd.
fffd19ec:	e51f50c0 	ldr	r5, [pc, #-192]	; fffd1934 <GFX_ConfigureDisplayTo1024x768+0x1074>
fffd19f0:	e3a0204d 	mov	r2, #77	; 0x4d
fffd19f4:	e3a01001 	mov	r1, #1
fffd19f8:	e08f5005 	add	r5, pc, r5
fffd19fc:	e5950000 	ldr	r0, [r5]
fffd1a00:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1a04:	ebfffab0 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1a08:	e3500000 	cmp	r0, #0
fffd1a0c:	0a0000df 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x5D)) {return (FALSE);}		
fffd1a10:	e5950000 	ldr	r0, [r5]
fffd1a14:	e3a0205d 	mov	r2, #93	; 0x5d
fffd1a18:	e3a01001 	mov	r1, #1
fffd1a1c:	e0870000 	add	r0, r7, r0
fffd1a20:	ebfffaa9 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1a24:	e3500000 	cmp	r0, #0
fffd1a28:	0a0000d8 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4E)) {return (FALSE);}		// ?? rsvd.
fffd1a2c:	e5950000 	ldr	r0, [r5]
fffd1a30:	e3a0204e 	mov	r2, #78	; 0x4e
fffd1a34:	e3a01001 	mov	r1, #1
fffd1a38:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1a3c:	ebfffaa2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1a40:	e3500000 	cmp	r0, #0
fffd1a44:	0a0000d1 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x05)) {return (FALSE);}
fffd1a48:	e5950000 	ldr	r0, [r5]
fffd1a4c:	e3a02005 	mov	r2, #5
fffd1a50:	e3a01001 	mov	r1, #1
fffd1a54:	e0870000 	add	r0, r7, r0
fffd1a58:	ebfffa9b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1a5c:	e3500000 	cmp	r0, #0
fffd1a60:	0a0000ca 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4F)) {return (FALSE);}		// XPIXPLLSTAT
fffd1a64:	e5950000 	ldr	r0, [r5]
fffd1a68:	e3a0204f 	mov	r2, #79	; 0x4f
fffd1a6c:	e3a01001 	mov	r1, #1
fffd1a70:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1a74:	ebfffa94 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1a78:	e3500000 	cmp	r0, #0
fffd1a7c:	0a0000c3 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd1a80:	e5950000 	ldr	r0, [r5]
fffd1a84:	e3a02000 	mov	r2, #0
fffd1a88:	e3a01001 	mov	r1, #1
fffd1a8c:	e0870000 	add	r0, r7, r0
fffd1a90:	ebfffa8d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1a94:	e3500000 	cmp	r0, #0
fffd1a98:	0a0000bc 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x51)) {return (FALSE);}		// ?? rsvd.
fffd1a9c:	e5950000 	ldr	r0, [r5]
fffd1aa0:	e3a02051 	mov	r2, #81	; 0x51
fffd1aa4:	e3a01001 	mov	r1, #1
fffd1aa8:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1aac:	ebfffa86 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1ab0:	e3500000 	cmp	r0, #0
fffd1ab4:	0a0000b5 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x01)) {return (FALSE);}
fffd1ab8:	e5950000 	ldr	r0, [r5]
fffd1abc:	e3a02001 	mov	r2, #1
fffd1ac0:	e1a01002 	mov	r1, r2
fffd1ac4:	e0870000 	add	r0, r7, r0
fffd1ac8:	ebfffa7f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1acc:	e3500000 	cmp	r0, #0
fffd1ad0:	0a0000ae 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x18)) {return (FALSE);}	// XVREFCTRL
fffd1ad4:	e5950000 	ldr	r0, [r5]
fffd1ad8:	e3a02018 	mov	r2, #24
fffd1adc:	e3a01001 	mov	r1, #1
fffd1ae0:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1ae4:	ebfffa78 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1ae8:	e3500000 	cmp	r0, #0
fffd1aec:	0a0000a7 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x04)) {return (FALSE);}
fffd1af0:	e5950000 	ldr	r0, [r5]
fffd1af4:	e3a02004 	mov	r2, #4
fffd1af8:	e3a01001 	mov	r1, #1
fffd1afc:	e0870000 	add	r0, r7, r0
fffd1b00:	ebfffa71 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1b04:	e3500000 	cmp	r0, #0
fffd1b08:	0a0000a0 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x52)) {return (FALSE);}	
fffd1b0c:	e51f51dc 	ldr	r5, [pc, #-476]	; fffd1938 <GFX_ConfigureDisplayTo1024x768+0x1078>
fffd1b10:	e3a02052 	mov	r2, #82	; 0x52
fffd1b14:	e3a01001 	mov	r1, #1
fffd1b18:	e08f5005 	add	r5, pc, r5
fffd1b1c:	e5950000 	ldr	r0, [r5]
fffd1b20:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1b24:	ebfffa68 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1b28:	e3500000 	cmp	r0, #0
fffd1b2c:	0a000097 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x61)) {return (FALSE);}
fffd1b30:	e5950000 	ldr	r0, [r5]
fffd1b34:	e3a02061 	mov	r2, #97	; 0x61
fffd1b38:	e3a01001 	mov	r1, #1
fffd1b3c:	e0870000 	add	r0, r7, r0
fffd1b40:	ebfffa61 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1b44:	e3500000 	cmp	r0, #0
fffd1b48:	0a000090 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x53)) {return (FALSE);}
fffd1b4c:	e5950000 	ldr	r0, [r5]
fffd1b50:	e3a02053 	mov	r2, #83	; 0x53
fffd1b54:	e3a01001 	mov	r1, #1
fffd1b58:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1b5c:	ebfffa5a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1b60:	e3500000 	cmp	r0, #0
fffd1b64:	0a000089 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x7D)) {return (FALSE);}
fffd1b68:	e5950000 	ldr	r0, [r5]
fffd1b6c:	e3a0207d 	mov	r2, #125	; 0x7d
fffd1b70:	e3a01001 	mov	r1, #1
fffd1b74:	e0870000 	add	r0, r7, r0
fffd1b78:	ebfffa53 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1b7c:	e3500000 	cmp	r0, #0
fffd1b80:	0a000082 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x54)) {return (FALSE);}
fffd1b84:	e5950000 	ldr	r0, [r5]
fffd1b88:	e3a02054 	mov	r2, #84	; 0x54
fffd1b8c:	e3a01001 	mov	r1, #1
fffd1b90:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1b94:	ebfffa4c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1b98:	e3500000 	cmp	r0, #0
fffd1b9c:	0a00007b 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xD1)) {return (FALSE);}
fffd1ba0:	e5950000 	ldr	r0, [r5]
fffd1ba4:	e3a020d1 	mov	r2, #209	; 0xd1
fffd1ba8:	e3a01001 	mov	r1, #1
fffd1bac:	e0870000 	add	r0, r7, r0
fffd1bb0:	ebfffa45 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1bb4:	e3500000 	cmp	r0, #0
fffd1bb8:	0a000074 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x55)) {return (FALSE);}
fffd1bbc:	e5950000 	ldr	r0, [r5]
fffd1bc0:	e3a02055 	mov	r2, #85	; 0x55
fffd1bc4:	e3a01001 	mov	r1, #1
fffd1bc8:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1bcc:	ebfffa3e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1bd0:	e3500000 	cmp	r0, #0
fffd1bd4:	0a00006d 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xFE)) {return (FALSE);}
fffd1bd8:	e5950000 	ldr	r0, [r5]
fffd1bdc:	e3a020fe 	mov	r2, #254	; 0xfe
fffd1be0:	e3a01001 	mov	r1, #1
fffd1be4:	e0870000 	add	r0, r7, r0
fffd1be8:	ebfffa37 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1bec:	e3500000 	cmp	r0, #0
fffd1bf0:	0a000066 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x56)) {return (FALSE);}
fffd1bf4:	e5950000 	ldr	r0, [r5]
fffd1bf8:	e3a02056 	mov	r2, #86	; 0x56
fffd1bfc:	e3a01001 	mov	r1, #1
fffd1c00:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1c04:	ebfffa30 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1c08:	e3500000 	cmp	r0, #0
fffd1c0c:	0a00005f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x7D)) {return (FALSE);}
fffd1c10:	e5950000 	ldr	r0, [r5]
fffd1c14:	e3a0207d 	mov	r2, #125	; 0x7d
fffd1c18:	e3a01001 	mov	r1, #1
fffd1c1c:	e0870000 	add	r0, r7, r0
fffd1c20:	ebfffa29 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1c24:	e3500000 	cmp	r0, #0
fffd1c28:	0a000058 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x57)) {return (FALSE);}
fffd1c2c:	e51f52f8 	ldr	r5, [pc, #-760]	; fffd193c <GFX_ConfigureDisplayTo1024x768+0x107c>
fffd1c30:	e3a02057 	mov	r2, #87	; 0x57
fffd1c34:	e3a01001 	mov	r1, #1
fffd1c38:	e08f5005 	add	r5, pc, r5
fffd1c3c:	e5950000 	ldr	r0, [r5]
fffd1c40:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1c44:	ebfffa20 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1c48:	e3500000 	cmp	r0, #0
fffd1c4c:	0a00004f 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x3A)) {return (FALSE);}
fffd1c50:	e5950000 	ldr	r0, [r5]
fffd1c54:	e3a0203a 	mov	r2, #58	; 0x3a
fffd1c58:	e3a01001 	mov	r1, #1
fffd1c5c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1c60:	e280000a 	add	r0, r0, #10
fffd1c64:	ebfffa18 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1c68:	e3500000 	cmp	r0, #0
fffd1c6c:	0a000047 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>

	LogMessage("> DAC Eclipse Configuration done.\n");
fffd1c70:	e51f0338 	ldr	r0, [pc, #-824]	; fffd1940 <GFX_ConfigureDisplayTo1024x768+0x1080>
fffd1c74:	e08f0000 	add	r0, pc, r0
fffd1c78:	eb000b8e 	bl	fffd4ab8 <LogMessage>

	/*----------------------------------------------------------------------------------------------*/
	/* palette Configuration																		*/
	/*----------------------------------------------------------------------------------------------*/

	if(!AHB2PCI_Memory_Write(PALWTADD, sizeof(BYTE), 0)) {return (FALSE);}
fffd1c7c:	e5950000 	ldr	r0, [r5]
fffd1c80:	e3a02000 	mov	r2, #0
fffd1c84:	e3a01001 	mov	r1, #1
fffd1c88:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd1c8c:	ebfffa0e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1c90:	e3500000 	cmp	r0, #0
fffd1c94:	0a00003d 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>

	if ((colorDepth == COLOR_DEPTH_32BIT) || (colorDepth == COLOR_DEPTH_24BIT))
fffd1c98:	e2443003 	sub	r3, r4, #3
fffd1c9c:	e3530001 	cmp	r3, #1
fffd1ca0:	8a00005c 	bhi	fffd1e18 <GFX_ConfigureDisplayTo1024x768+0x1558>
	{
		// palette for 8:8:8 color format
		for (i = 0; i <= 255; i++)
fffd1ca4:	e3a07000 	mov	r7, #0
		{
			if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i)) {return (FALSE);}
fffd1ca8:	e3038c01 	movw	r8, #15361	; 0x3c01
fffd1cac:	e5950000 	ldr	r0, [r5]
fffd1cb0:	e1a02007 	mov	r2, r7
fffd1cb4:	e3a01001 	mov	r1, #1
fffd1cb8:	e0880000 	add	r0, r8, r0
fffd1cbc:	ebfffa02 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1cc0:	e3500000 	cmp	r0, #0
fffd1cc4:	0a000031 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
			if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i)) {return (FALSE);}
fffd1cc8:	e5950000 	ldr	r0, [r5]
fffd1ccc:	e1a02007 	mov	r2, r7
fffd1cd0:	e3a01001 	mov	r1, #1
fffd1cd4:	e0880000 	add	r0, r8, r0
fffd1cd8:	ebfff9fb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1cdc:	e3500000 	cmp	r0, #0
fffd1ce0:	0a00002a 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
			if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i)) {return (FALSE);}
fffd1ce4:	e5950000 	ldr	r0, [r5]
fffd1ce8:	e1a02007 	mov	r2, r7
fffd1cec:	e3a01001 	mov	r1, #1
fffd1cf0:	e0880000 	add	r0, r8, r0
fffd1cf4:	ebfff9f4 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1cf8:	e3500000 	cmp	r0, #0
fffd1cfc:	0a000023 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
		for (i = 0; i <= 255; i++)
fffd1d00:	e2877001 	add	r7, r7, #1
fffd1d04:	e3570c01 	cmp	r7, #256	; 0x100
fffd1d08:	1affffe7 	bne	fffd1cac <GFX_ConfigureDisplayTo1024x768+0x13ec>
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 4)) {return (FALSE);}
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 8)) {return (FALSE);}
			}
		}

		LogMessage("> Palette Configuration done.\n");
fffd1d0c:	e51f03d0 	ldr	r0, [pc, #-976]	; fffd1944 <GFX_ConfigureDisplayTo1024x768+0x1084>
fffd1d10:	e08f0000 	add	r0, pc, r0
fffd1d14:	eb000b67 	bl	fffd4ab8 <LogMessage>
		/*----------------------------------------------------------------------------------------------*/
		/* Configuration Done																			*/
		/*----------------------------------------------------------------------------------------------*/
	
		// fill frame buffer with random lines
		LogMessage("> Filling Frame Buffer...\n");
fffd1d18:	e51f03d8 	ldr	r0, [pc, #-984]	; fffd1948 <GFX_ConfigureDisplayTo1024x768+0x1088>
fffd1d1c:	e08f0000 	add	r0, pc, r0
fffd1d20:	eb000b64 	bl	fffd4ab8 <LogMessage>

		// fill frame buffer with random lines
		DWORD lineNum = 0;
		const DWORD numOfBars=16;
		DWORD Address = FB_BA;
fffd1d24:	e51f33e0 	ldr	r3, [pc, #-992]	; fffd194c <GFX_ConfigureDisplayTo1024x768+0x108c>
		DWORD Index;
		DWORD Color;

		if (colorDepth == COLOR_DEPTH_32BIT)
fffd1d28:	e3540004 	cmp	r4, #4
		DWORD Address = FB_BA;
fffd1d2c:	e7963003 	ldr	r3, [r6, r3]
fffd1d30:	e5935000 	ldr	r5, [r3]
		if (colorDepth == COLOR_DEPTH_32BIT)
fffd1d34:	1a000055 	bne	fffd1e90 <GFX_ConfigureDisplayTo1024x768+0x15d0>
fffd1d38:	e2856603 	add	r6, r5, #3145728	; 0x300000
			for (lineNum = 0; lineNum < numOfBars; ++lineNum)
			{
				Color = (DWORD)rand() ^ ((DWORD)rand()<<16); 
fffd1d3c:	eb000d5f 	bl	fffd52c0 <rand>
fffd1d40:	e1a04000 	mov	r4, r0
fffd1d44:	eb000d5d 	bl	fffd52c0 <rand>
fffd1d48:	e0240800 	eor	r0, r4, r0, lsl #16
fffd1d4c:	e2853803 	add	r3, r5, #196608	; 0x30000
				for (Index =0; Index<((1024*768)/numOfBars); Index++, Address=Address+4)
					WRITE_REG (HW_DWORD(Address), Color);
fffd1d50:	e4850004 	str	r0, [r5], #4
				for (Index =0; Index<((1024*768)/numOfBars); Index++, Address=Address+4)
fffd1d54:	e1530005 	cmp	r3, r5
fffd1d58:	1afffffc 	bne	fffd1d50 <GFX_ConfigureDisplayTo1024x768+0x1490>
			for (lineNum = 0; lineNum < numOfBars; ++lineNum)
fffd1d5c:	e1560005 	cmp	r6, r5
fffd1d60:	1afffff5 	bne	fffd1d3c <GFX_ConfigureDisplayTo1024x768+0x147c>
				for (Index =0; Index<((1024*768)/numOfBars); Index++, Address=Address+4)
					WRITE_REG (HW_DWORD(Address), Color);
			}
		}

		LogMessage("> Filling Frame Buffer done.\n");
fffd1d64:	e51f041c 	ldr	r0, [pc, #-1052]	; fffd1950 <GFX_ConfigureDisplayTo1024x768+0x1090>
fffd1d68:	e08f0000 	add	r0, pc, r0
fffd1d6c:	eb000b51 	bl	fffd4ab8 <LogMessage>
}; 
fffd1d70:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
		LogMessage("Waiting until PCI is out of reset; Press any key to abort .... \n");
fffd1d74:	e1a00008 	mov	r0, r8
fffd1d78:	eb000b4e 	bl	fffd4ab8 <LogMessage>
		if (cnt == 10) 
fffd1d7c:	e2555001 	subs	r5, r5, #1
fffd1d80:	1a000004 	bne	fffd1d98 <GFX_ConfigureDisplayTo1024x768+0x14d8>
			LogWarning ("Test Aborted .\n");
fffd1d84:	e51f0438 	ldr	r0, [pc, #-1080]	; fffd1954 <GFX_ConfigureDisplayTo1024x768+0x1094>
fffd1d88:	e08f0000 	add	r0, pc, r0
fffd1d8c:	eb000b85 	bl	fffd4ba8 <LogWarning>
fffd1d90:	e3a00000 	mov	r0, #0
}; 
fffd1d94:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
		Sleep (1000);
fffd1d98:	e3a00ffa 	mov	r0, #1000	; 0x3e8
fffd1d9c:	eb000c8e 	bl	fffd4fdc <Sleep>
fffd1da0:	eafffad2 	b	fffd08f0 <GFX_ConfigureDisplayTo1024x768+0x30>
		LogPass("TEST_ConfigureDisplay : MGABASE1 = %08Xh\n", MGABASE1);
fffd1da4:	e51f0454 	ldr	r0, [pc, #-1108]	; fffd1958 <GFX_ConfigureDisplayTo1024x768+0x1098>
fffd1da8:	e08f0000 	add	r0, pc, r0
fffd1dac:	eb000b9d 	bl	fffd4c28 <LogPass>
fffd1db0:	eafffae9 	b	fffd095c <GFX_ConfigureDisplayTo1024x768+0x9c>
		if (colorDepth == COLOR_DEPTH_16BIT)
fffd1db4:	e3540002 	cmp	r4, #2
			if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x8013)) // OFFSET
fffd1db8:	03082013 	movweq	r2, #32787	; 0x8013
		if (colorDepth == COLOR_DEPTH_16BIT)
fffd1dbc:	1afffc24 	bne	fffd0e54 <GFX_ConfigureDisplayTo1024x768+0x594>
fffd1dc0:	eafffc1f 	b	fffd0e44 <GFX_ConfigureDisplayTo1024x768+0x584>
fffd1dc4:	e0800003 	add	r0, r0, r3
		if ((colorDepth == COLOR_DEPTH_16BIT) || (colorDepth == COLOR_DEPTH_24BIT)) {
fffd1dc8:	e2443002 	sub	r3, r4, #2
fffd1dcc:	e3530001 	cmp	r3, #1
			if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0000))  // ADDR_GEN
fffd1dd0:	93a02000 	movls	r2, #0
fffd1dd4:	93a01002 	movls	r1, #2
		if ((colorDepth == COLOR_DEPTH_16BIT) || (colorDepth == COLOR_DEPTH_24BIT)) {
fffd1dd8:	8afffc65 	bhi	fffd0f74 <GFX_ConfigureDisplayTo1024x768+0x6b4>
fffd1ddc:	eafffc61 	b	fffd0f68 <GFX_ConfigureDisplayTo1024x768+0x6a8>
	} else if (colorDepth == COLOR_DEPTH_16BIT) {
fffd1de0:	e3540002 	cmp	r4, #2
			if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x8103))  // MISC
fffd1de4:	03082103 	movweq	r2, #33027	; 0x8103
	} else if (colorDepth == COLOR_DEPTH_16BIT) {
fffd1de8:	0afffc77 	beq	fffd0fcc <GFX_ConfigureDisplayTo1024x768+0x70c>
    } else if (colorDepth == COLOR_DEPTH_24BIT) {
fffd1dec:	e3540003 	cmp	r4, #3
			if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x8203)) // MISC
fffd1df0:	03082203 	movweq	r2, #33283	; 0x8203
    } else if (colorDepth == COLOR_DEPTH_24BIT) {
fffd1df4:	1afffc78 	bne	fffd0fdc <GFX_ConfigureDisplayTo1024x768+0x71c>
fffd1df8:	eafffc73 	b	fffd0fcc <GFX_ConfigureDisplayTo1024x768+0x70c>
	} else if (colorDepth == COLOR_DEPTH_16BIT) {
fffd1dfc:	e3540002 	cmp	r4, #2
fffd1e00:	1a000001 	bne	fffd1e0c <GFX_ConfigureDisplayTo1024x768+0x154c>
			if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x03))
fffd1e04:	e1a02004 	mov	r2, r4
fffd1e08:	eafffd5d 	b	fffd1384 <GFX_ConfigureDisplayTo1024x768+0xac4>
	} else if (colorDepth == COLOR_DEPTH_24BIT) {
fffd1e0c:	e3540003 	cmp	r4, #3
fffd1e10:	1afffd61 	bne	fffd139c <GFX_ConfigureDisplayTo1024x768+0xadc>
fffd1e14:	eafffffa 	b	fffd1e04 <GFX_ConfigureDisplayTo1024x768+0x1544>
		if (colorDepth == COLOR_DEPTH_16BIT)
fffd1e18:	e3540002 	cmp	r4, #2
fffd1e1c:	1affffba 	bne	fffd1d0c <GFX_ConfigureDisplayTo1024x768+0x144c>
fffd1e20:	e3a07000 	mov	r7, #0
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 8)) {return (FALSE);}
fffd1e24:	e3038c01 	movw	r8, #15361	; 0x3c01
fffd1e28:	e5950000 	ldr	r0, [r5]
fffd1e2c:	e1a09087 	lsl	r9, r7, #1
fffd1e30:	e3a01001 	mov	r1, #1
fffd1e34:	e1a02009 	mov	r2, r9
fffd1e38:	e0880000 	add	r0, r8, r0
fffd1e3c:	ebfff9a2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1e40:	e3500000 	cmp	r0, #0
fffd1e44:	0affffd1 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 4)) {return (FALSE);}
fffd1e48:	e5950000 	ldr	r0, [r5]
fffd1e4c:	e1a02007 	mov	r2, r7
fffd1e50:	e3a01001 	mov	r1, #1
fffd1e54:	e0880000 	add	r0, r8, r0
fffd1e58:	ebfff99b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1e5c:	e3500000 	cmp	r0, #0
fffd1e60:	0affffca 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 8)) {return (FALSE);}
fffd1e64:	e5950000 	ldr	r0, [r5]
fffd1e68:	e1a02009 	mov	r2, r9
fffd1e6c:	e3a01001 	mov	r1, #1
fffd1e70:	e0880000 	add	r0, r8, r0
fffd1e74:	ebfff994 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd1e78:	e3500000 	cmp	r0, #0
fffd1e7c:	0affffc3 	beq	fffd1d90 <GFX_ConfigureDisplayTo1024x768+0x14d0>
fffd1e80:	e2877004 	add	r7, r7, #4
			for (i = 0; i <= 63; i++)
fffd1e84:	e3570c01 	cmp	r7, #256	; 0x100
fffd1e88:	1affffe6 	bne	fffd1e28 <GFX_ConfigureDisplayTo1024x768+0x1568>
fffd1e8c:	eaffff9e 	b	fffd1d0c <GFX_ConfigureDisplayTo1024x768+0x144c>
		else if (colorDepth == COLOR_DEPTH_16BIT)
fffd1e90:	e3540002 	cmp	r4, #2
fffd1e94:	1a00000b 	bne	fffd1ec8 <GFX_ConfigureDisplayTo1024x768+0x1608>
fffd1e98:	e2856706 	add	r6, r5, #1572864	; 0x180000
				Color = (DWORD)rand() ^ ((DWORD)rand()<<16);  
fffd1e9c:	eb000d07 	bl	fffd52c0 <rand>
fffd1ea0:	e1a04000 	mov	r4, r0
					WRITE_REG (HW_WORD(Address), (WORD)Color);
fffd1ea4:	e6ff4074 	uxth	r4, r4
				Color = (DWORD)rand() ^ ((DWORD)rand()<<16);  
fffd1ea8:	eb000d04 	bl	fffd52c0 <rand>
fffd1eac:	e2853906 	add	r3, r5, #98304	; 0x18000
					WRITE_REG (HW_WORD(Address), (WORD)Color);
fffd1eb0:	e0c540b2 	strh	r4, [r5], #2
				for (Index =0; Index<((1024*768)/numOfBars); Index++, Address=Address+2)
fffd1eb4:	e1530005 	cmp	r3, r5
fffd1eb8:	1afffffc 	bne	fffd1eb0 <GFX_ConfigureDisplayTo1024x768+0x15f0>
			for (lineNum = 0; lineNum < numOfBars; ++lineNum)
fffd1ebc:	e1560005 	cmp	r6, r5
fffd1ec0:	1afffff5 	bne	fffd1e9c <GFX_ConfigureDisplayTo1024x768+0x15dc>
fffd1ec4:	eaffffa6 	b	fffd1d64 <GFX_ConfigureDisplayTo1024x768+0x14a4>
		else if (colorDepth == COLOR_DEPTH_24BIT)
fffd1ec8:	e3540003 	cmp	r4, #3
fffd1ecc:	1affffa4 	bne	fffd1d64 <GFX_ConfigureDisplayTo1024x768+0x14a4>
			LogWarning ("\n Using 32 bit frame buffer method for 24bit mode ! \n");
fffd1ed0:	e51f057c 	ldr	r0, [pc, #-1404]	; fffd195c <GFX_ConfigureDisplayTo1024x768+0x109c>
fffd1ed4:	e2856603 	add	r6, r5, #3145728	; 0x300000
fffd1ed8:	e08f0000 	add	r0, pc, r0
fffd1edc:	eb000b31 	bl	fffd4ba8 <LogWarning>
				Color = (DWORD)rand() ^ ((DWORD)rand()<<16); 
fffd1ee0:	eb000cf6 	bl	fffd52c0 <rand>
fffd1ee4:	e1a04000 	mov	r4, r0
fffd1ee8:	eb000cf4 	bl	fffd52c0 <rand>
fffd1eec:	e0240800 	eor	r0, r4, r0, lsl #16
fffd1ef0:	e2853803 	add	r3, r5, #196608	; 0x30000
					WRITE_REG (HW_DWORD(Address), Color);
fffd1ef4:	e4850004 	str	r0, [r5], #4
				for (Index =0; Index<((1024*768)/numOfBars); Index++, Address=Address+4)
fffd1ef8:	e1530005 	cmp	r3, r5
fffd1efc:	1afffffc 	bne	fffd1ef4 <GFX_ConfigureDisplayTo1024x768+0x1634>
			for (lineNum = 0; lineNum < numOfBars; ++lineNum)
fffd1f00:	e1560005 	cmp	r6, r5
fffd1f04:	1afffff5 	bne	fffd1ee0 <GFX_ConfigureDisplayTo1024x768+0x1620>
fffd1f08:	eaffff95 	b	fffd1d64 <GFX_ConfigureDisplayTo1024x768+0x14a4>

fffd1f0c <GFX_ConfigureDisplayTo1920x1200>:



//---------------------------------------------------------------------------------------
BOOL GFX_ConfigureDisplayTo1920x1200(GFX_ColorDepth colorDepth)
{
fffd1f0c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
fffd1f10:	e1a04000 	mov	r4, r0
	/* GFX PCI Configuration Space - Read and Configure												*/
	/*----------------------------------------------------------------------------------------------*/
	// Wait until GFX Device/Vendor ID is read correctly
	while (AHB2PCI_Config_Read(GFX_IDSEL + GFX_VENDOR_ID, sizeof(DWORD)) != GFX_VEN_DEV_ID_RV)
	{
		LogMessage("Waiting until PCI is out of reset; Press any key to abort .... \n");
fffd1f14:	e59f8fe4 	ldr	r8, [pc, #4068]	; fffd2f00 <GFX_ConfigureDisplayTo1920x1200+0xff4>
	while (AHB2PCI_Config_Read(GFX_IDSEL + GFX_VENDOR_ID, sizeof(DWORD)) != GFX_VEN_DEV_ID_RV)
fffd1f18:	e3a0500b 	mov	r5, #11
	LogHeader("GFX Display Configuration to 1920x1200");
fffd1f1c:	e59f0fe0 	ldr	r0, [pc, #4064]	; fffd2f04 <GFX_ConfigureDisplayTo1920x1200+0xff8>
	while (AHB2PCI_Config_Read(GFX_IDSEL + GFX_VENDOR_ID, sizeof(DWORD)) != GFX_VEN_DEV_ID_RV)
fffd1f20:	e59f7fe0 	ldr	r7, [pc, #4064]	; fffd2f08 <GFX_ConfigureDisplayTo1920x1200+0xffc>
		LogMessage("Waiting until PCI is out of reset; Press any key to abort .... \n");
fffd1f24:	e08f8008 	add	r8, pc, r8
{
fffd1f28:	e59f6fdc 	ldr	r6, [pc, #4060]	; fffd2f0c <GFX_ConfigureDisplayTo1920x1200+0x1000>
	LogHeader("GFX Display Configuration to 1920x1200");
fffd1f2c:	e08f0000 	add	r0, pc, r0
fffd1f30:	eb000b4c 	bl	fffd4c68 <LogHeader>
{
fffd1f34:	e08f6006 	add	r6, pc, r6
	FB_Initialize();
fffd1f38:	ebfff99a 	bl	fffd05a8 <FB_Initialize>
	while (AHB2PCI_Config_Read(GFX_IDSEL + GFX_VENDOR_ID, sizeof(DWORD)) != GFX_VEN_DEV_ID_RV)
fffd1f3c:	e3a01004 	mov	r1, #4
fffd1f40:	e3a00801 	mov	r0, #65536	; 0x10000
fffd1f44:	ebfff8a3 	bl	fffd01d8 <AHB2PCI_Config_Read>
fffd1f48:	e1500007 	cmp	r0, r7
fffd1f4c:	1a000518 	bne	fffd33b4 <GFX_ConfigureDisplayTo1920x1200+0x14a8>
			return (FALSE);
		}
		Sleep (1000);
		cnt++;
	}
	LogPass ("> Found correct GFX Device/Vendor ID 0x%08lX. \n", GFX_VEN_DEV_ID_RV);
fffd1f50:	e59f0fb8 	ldr	r0, [pc, #4024]	; fffd2f10 <GFX_ConfigureDisplayTo1920x1200+0x1004>
fffd1f54:	e1a01007 	mov	r1, r7

	// Get the MGA Registers base address (MGABASE1)
	AHB2PCI_Config_Write(GFX_IDSEL + GFX_BAR1, sizeof(DWORD), MGABASE1 = 0x10000000, 0);
fffd1f58:	e59f5fb4 	ldr	r5, [pc, #4020]	; fffd2f14 <GFX_ConfigureDisplayTo1920x1200+0x1008>
	LogPass ("> Found correct GFX Device/Vendor ID 0x%08lX. \n", GFX_VEN_DEV_ID_RV);
fffd1f5c:	e08f0000 	add	r0, pc, r0
fffd1f60:	eb000b30 	bl	fffd4c28 <LogPass>
	AHB2PCI_Config_Write(GFX_IDSEL + GFX_BAR1, sizeof(DWORD), MGABASE1 = 0x10000000, 0);
fffd1f64:	e08f5005 	add	r5, pc, r5
fffd1f68:	e3a02201 	mov	r2, #268435456	; 0x10000000
fffd1f6c:	e3a03000 	mov	r3, #0
fffd1f70:	e3a01004 	mov	r1, #4
fffd1f74:	e59f0f9c 	ldr	r0, [pc, #3996]	; fffd2f18 <GFX_ConfigureDisplayTo1920x1200+0x100c>
fffd1f78:	e5852000 	str	r2, [r5]
fffd1f7c:	ebfff8d4 	bl	fffd02d4 <AHB2PCI_Config_Write>
	MGABASE1 = AHB2PCI_Config_Read(GFX_IDSEL + GFX_BAR1, sizeof(DWORD));
fffd1f80:	e3a01004 	mov	r1, #4
fffd1f84:	e59f0f8c 	ldr	r0, [pc, #3980]	; fffd2f18 <GFX_ConfigureDisplayTo1920x1200+0x100c>
fffd1f88:	ebfff892 	bl	fffd01d8 <AHB2PCI_Config_Read>
	if (MGABASE1 == 0)
fffd1f8c:	e3500000 	cmp	r0, #0
	MGABASE1 = AHB2PCI_Config_Read(GFX_IDSEL + GFX_BAR1, sizeof(DWORD));
fffd1f90:	e1a01000 	mov	r1, r0
fffd1f94:	e5850000 	str	r0, [r5]
	if (MGABASE1 == 0)
fffd1f98:	1a000511 	bne	fffd33e4 <GFX_ConfigureDisplayTo1920x1200+0x14d8>
	{
		LogError("TEST_ConfigureDisplay failed : MGABASE1 is invalid = %08Xh\n", MGABASE1);
fffd1f9c:	e59f0f78 	ldr	r0, [pc, #3960]	; fffd2f1c <GFX_ConfigureDisplayTo1920x1200+0x1010>
fffd1fa0:	e08f0000 	add	r0, pc, r0
fffd1fa4:	eb000aef 	bl	fffd4b68 <LogError>
	}
	else
	{
		LogPass("TEST_ConfigureDisplay : MGABASE1 = %08Xh\n", MGABASE1);
	}
	AHB2PCI_Config_Write(GFX_IDSEL + GFX_BAR2, sizeof(DWORD), 0xf0000000, 0);
fffd1fa8:	e3a03000 	mov	r3, #0
fffd1fac:	e3a0220f 	mov	r2, #-268435456	; 0xf0000000
fffd1fb0:	e3a01004 	mov	r1, #4
fffd1fb4:	e59f0f64 	ldr	r0, [pc, #3940]	; fffd2f20 <GFX_ConfigureDisplayTo1920x1200+0x1014>
fffd1fb8:	ebfff8c5 	bl	fffd02d4 <AHB2PCI_Config_Write>

	LogMessage("MGABASE1 = %08Xh, MGABASE2 = %08Xh\n",
fffd1fbc:	e3a01004 	mov	r1, #4
fffd1fc0:	e59f0f50 	ldr	r0, [pc, #3920]	; fffd2f18 <GFX_ConfigureDisplayTo1920x1200+0x100c>
fffd1fc4:	ebfff883 	bl	fffd01d8 <AHB2PCI_Config_Read>
fffd1fc8:	e3a01004 	mov	r1, #4
fffd1fcc:	e1a05000 	mov	r5, r0
fffd1fd0:	e59f0f48 	ldr	r0, [pc, #3912]	; fffd2f20 <GFX_ConfigureDisplayTo1920x1200+0x1014>
fffd1fd4:	ebfff87f 	bl	fffd01d8 <AHB2PCI_Config_Read>
fffd1fd8:	e1a02000 	mov	r2, r0
fffd1fdc:	e59f0f40 	ldr	r0, [pc, #3904]	; fffd2f24 <GFX_ConfigureDisplayTo1920x1200+0x1018>
fffd1fe0:	e1a01005 	mov	r1, r5
fffd1fe4:	e08f0000 	add	r0, pc, r0
fffd1fe8:	eb000ab2 	bl	fffd4ab8 <LogMessage>
		AHB2PCI_Config_Read(GFX_IDSEL + GFX_BAR1, sizeof(DWORD)),
		AHB2PCI_Config_Read(GFX_IDSEL + GFX_BAR2, sizeof(DWORD)));

	// Enable Bus Master and Memory Space
	data = AHB2PCI_Config_Read(GFX_IDSEL + GFX_COMMAND_REG, sizeof(DWORD));
fffd1fec:	e3a01004 	mov	r1, #4
fffd1ff0:	e59f0f30 	ldr	r0, [pc, #3888]	; fffd2f28 <GFX_ConfigureDisplayTo1920x1200+0x101c>
fffd1ff4:	ebfff877 	bl	fffd01d8 <AHB2PCI_Config_Read>
	AHB2PCI_Config_Write(GFX_IDSEL + GFX_COMMAND_REG, sizeof(DWORD), data | 0x06, 0);
fffd1ff8:	e3a03000 	mov	r3, #0
fffd1ffc:	e3802006 	orr	r2, r0, #6
fffd2000:	e3a01004 	mov	r1, #4
fffd2004:	e59f0f1c 	ldr	r0, [pc, #3868]	; fffd2f28 <GFX_ConfigureDisplayTo1920x1200+0x101c>
fffd2008:	ebfff8b1 	bl	fffd02d4 <AHB2PCI_Config_Write>

	BYTE GPLLINDIV,GPLLFBDIV,GPLLST;
	GPLLINDIV = 0x09; // GPLLINDIV (INDV + FBDV8)
	GPLLFBDIV = 0xDE; // GPLLFBDIV (FBDV) 
	GPLLST    = 0x0C; // GPLLST (OTDV1/OTDV2)
	if (!PLL_Configure  (GPLLINDIV, GPLLFBDIV, GPLLST)) {return (FALSE);}
fffd200c:	e3a0200c 	mov	r2, #12
fffd2010:	e3a010de 	mov	r1, #222	; 0xde
fffd2014:	e3a00009 	mov	r0, #9
fffd2018:	ebfff98d 	bl	fffd0654 <PLL_Configure>
fffd201c:	e3500000 	cmp	r0, #0
fffd2020:	0a0004ea 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>

	/*----------------------------------------------------------------------------------------------*/
	/* Sequencers Configuration																		*/
	/*----------------------------------------------------------------------------------------------*/

	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0100)) {return (FALSE);}	// Reset sequencer
fffd2024:	e59f5f00 	ldr	r5, [pc, #3840]	; fffd2f2c <GFX_ConfigureDisplayTo1920x1200+0x1020>
fffd2028:	e3017fc4 	movw	r7, #8132	; 0x1fc4
fffd202c:	e3a02c01 	mov	r2, #256	; 0x100
fffd2030:	e3a01002 	mov	r1, #2
fffd2034:	e08f5005 	add	r5, pc, r5
fffd2038:	e5950000 	ldr	r0, [r5]
fffd203c:	e0870000 	add	r0, r7, r0
fffd2040:	ebfff921 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2044:	e3500000 	cmp	r0, #0
fffd2048:	0a0004e0 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0101)) {return (FALSE);}	// 8-dot character clock
fffd204c:	e5950000 	ldr	r0, [r5]
fffd2050:	e3002101 	movw	r2, #257	; 0x101
fffd2054:	e3a01002 	mov	r1, #2
fffd2058:	e0870000 	add	r0, r7, r0
fffd205c:	ebfff91a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2060:	e3500000 	cmp	r0, #0
fffd2064:	0a0004d9 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0302)) {return (FALSE);}	// Map 3 write enable
fffd2068:	e5950000 	ldr	r0, [r5]
fffd206c:	e3002302 	movw	r2, #770	; 0x302
fffd2070:	e3a01002 	mov	r1, #2
fffd2074:	e0870000 	add	r0, r7, r0
fffd2078:	ebfff913 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd207c:	e3500000 	cmp	r0, #0
fffd2080:	0a0004d2 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0003)) {return (FALSE);}	// another mapping of VGA (??)
fffd2084:	e5950000 	ldr	r0, [r5]
fffd2088:	e3a02003 	mov	r2, #3
fffd208c:	e3a01002 	mov	r1, #2
fffd2090:	e0870000 	add	r0, r7, r0
fffd2094:	ebfff90c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2098:	e3500000 	cmp	r0, #0
fffd209c:	0a0004cb 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0204)) {return (FALSE);}	// 256K memory is installed
fffd20a0:	e5950000 	ldr	r0, [r5]
fffd20a4:	e3a02f81 	mov	r2, #516	; 0x204
fffd20a8:	e3a01002 	mov	r1, #2
fffd20ac:	e0870000 	add	r0, r7, r0
fffd20b0:	ebfff905 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd20b4:	e3500000 	cmp	r0, #0
fffd20b8:	0a0004c4 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
fffd20bc:	e5950000 	ldr	r0, [r5]
	if (colorDepth == COLOR_DEPTH_24BIT)
fffd20c0:	e3540003 	cmp	r4, #3
		if (!AHB2PCI_Memory_Write(MISC, sizeof(BYTE), 0x09))
			return (FALSE);		// Configure CRTC addresses, Select MGA pixel clock, VSYNC and HSYNC active LOW
	} 
	else
	{
		if (!AHB2PCI_Memory_Write(MISC, sizeof(BYTE), 0xC9))
fffd20c4:	13a020c9 	movne	r2, #201	; 0xc9
		if (!AHB2PCI_Memory_Write(MISC, sizeof(BYTE), 0x09))
fffd20c8:	03a02009 	moveq	r2, #9
fffd20cc:	e3a01001 	mov	r1, #1
fffd20d0:	e2800d7f 	add	r0, r0, #8128	; 0x1fc0
fffd20d4:	e2800002 	add	r0, r0, #2
fffd20d8:	ebfff8fb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd20dc:	e3500000 	cmp	r0, #0
fffd20e0:	0a0004ba 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
			return (FALSE);		// Configure CRTC addresses, Select MGA pixel clock, VSYNC and HSYNC active LOW
	}
	if (!AHB2PCI_Memory_Write(SEQ, sizeof(WORD), 0x0300)) {return (FALSE);}	// Reset sequencer
fffd20e4:	e59f5e44 	ldr	r5, [pc, #3652]	; fffd2f30 <GFX_ConfigureDisplayTo1920x1200+0x1024>
fffd20e8:	e3a02c03 	mov	r2, #768	; 0x300
fffd20ec:	e3a01002 	mov	r1, #2
fffd20f0:	e08f5005 	add	r5, pc, r5
fffd20f4:	e5950000 	ldr	r0, [r5]
fffd20f8:	e2800d7f 	add	r0, r0, #8128	; 0x1fc0
fffd20fc:	e2800004 	add	r0, r0, #4
fffd2100:	ebfff8f1 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2104:	e3500000 	cmp	r0, #0
fffd2108:	0a0004b0 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>

	LogMessage("> Sequencers Configuration done.\n");
fffd210c:	e59f0e20 	ldr	r0, [pc, #3616]	; fffd2f34 <GFX_ConfigureDisplayTo1920x1200+0x1028>
	/*----------------------------------------------------------------------------------------------*/
	/* Graphics Controller Configuration															*/
	/*----------------------------------------------------------------------------------------------*/

	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0000)) {return (FALSE);}	// Reset bytes in the VGA memory map
fffd2110:	e3017fce 	movw	r7, #8142	; 0x1fce
	LogMessage("> Sequencers Configuration done.\n");
fffd2114:	e08f0000 	add	r0, pc, r0
fffd2118:	eb000a66 	bl	fffd4ab8 <LogMessage>
	if (!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0000)) {return (FALSE);}	// Reset bytes in the VGA memory map
fffd211c:	e5950000 	ldr	r0, [r5]
fffd2120:	e3a02000 	mov	r2, #0
fffd2124:	e3a01002 	mov	r1, #2
fffd2128:	e0870000 	add	r0, r7, r0
fffd212c:	ebfff8e6 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2130:	e3500000 	cmp	r0, #0
fffd2134:	0a0004a5 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0001)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd2138:	e5950000 	ldr	r0, [r5]
fffd213c:	e3a02001 	mov	r2, #1
fffd2140:	e3a01002 	mov	r1, #2
fffd2144:	e0870000 	add	r0, r7, r0
fffd2148:	ebfff8df 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd214c:	e3500000 	cmp	r0, #0
fffd2150:	0a00049e 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0002)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd2154:	e5950000 	ldr	r0, [r5]
fffd2158:	e3a02002 	mov	r2, #2
fffd215c:	e1a01002 	mov	r1, r2
fffd2160:	e0870000 	add	r0, r7, r0
fffd2164:	ebfff8d8 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2168:	e3500000 	cmp	r0, #0
fffd216c:	0a000497 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0003)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd2170:	e5950000 	ldr	r0, [r5]
fffd2174:	e3a02003 	mov	r2, #3
fffd2178:	e3a01002 	mov	r1, #2
fffd217c:	e0870000 	add	r0, r7, r0
fffd2180:	ebfff8d1 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2184:	e3500000 	cmp	r0, #0
fffd2188:	0a000490 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0004)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd218c:	e5950000 	ldr	r0, [r5]
fffd2190:	e3a02004 	mov	r2, #4
fffd2194:	e3a01002 	mov	r1, #2
fffd2198:	e0870000 	add	r0, r7, r0
fffd219c:	ebfff8ca 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd21a0:	e3500000 	cmp	r0, #0
fffd21a4:	0a000489 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x1005)) {return (FALSE);}	// Selects Odd/Even addressing mode
fffd21a8:	e5950000 	ldr	r0, [r5]
fffd21ac:	e3012005 	movw	r2, #4101	; 0x1005
fffd21b0:	e3a01002 	mov	r1, #2
fffd21b4:	e0870000 	add	r0, r7, r0
fffd21b8:	ebfff8c3 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd21bc:	e3500000 	cmp	r0, #0
fffd21c0:	0a000482 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0E06)) {return (FALSE);}	// VGA mode select, Memory map is '0b11'
fffd21c4:	e5950000 	ldr	r0, [r5]
fffd21c8:	e3002e06 	movw	r2, #3590	; 0xe06
fffd21cc:	e3a01002 	mov	r1, #2
fffd21d0:	e0870000 	add	r0, r7, r0
fffd21d4:	ebfff8bc 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd21d8:	e3500000 	cmp	r0, #0
fffd21dc:	0a00047b 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0x0007)) {return (FALSE);}	// ?? (probably VGA - keep reset value)
fffd21e0:	e5950000 	ldr	r0, [r5]
fffd21e4:	e3a02007 	mov	r2, #7
fffd21e8:	e3a01002 	mov	r1, #2
fffd21ec:	e0870000 	add	r0, r7, r0
fffd21f0:	ebfff8b5 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd21f4:	e3500000 	cmp	r0, #0
fffd21f8:	0a000474 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(GCTL, sizeof(WORD), 0xFF08)) {return (FALSE);}	// Write mask to 0xFF
fffd21fc:	e5950000 	ldr	r0, [r5]
fffd2200:	e30f2f08 	movw	r2, #65288	; 0xff08
fffd2204:	e3a01002 	mov	r1, #2
fffd2208:	e0870000 	add	r0, r7, r0
fffd220c:	ebfff8ae 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2210:	e3500000 	cmp	r0, #0
fffd2214:	0a00046d 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>

	LogMessage("> Graphics Controller Configuration done.\n");
fffd2218:	e59f0d18 	ldr	r0, [pc, #3352]	; fffd2f38 <GFX_ConfigureDisplayTo1920x1200+0x102c>

	/*----------------------------------------------------------------------------------------------*/
	/* CRTC Controller Configuration																*/
	/*----------------------------------------------------------------------------------------------*/

	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xFF00)) {return (FALSE);} // HTOTAL[7:0] = 0xA3 (HTOTAL[8] appears in CRTCEXT1[0])
fffd221c:	e3015fd4 	movw	r5, #8148	; 0x1fd4
fffd2220:	e59f7d14 	ldr	r7, [pc, #3348]	; fffd2f3c <GFX_ConfigureDisplayTo1920x1200+0x1030>
	LogMessage("> Graphics Controller Configuration done.\n");
fffd2224:	e08f0000 	add	r0, pc, r0
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xFF00)) {return (FALSE);} // HTOTAL[7:0] = 0xA3 (HTOTAL[8] appears in CRTCEXT1[0])
fffd2228:	e08f7007 	add	r7, pc, r7
	LogMessage("> Graphics Controller Configuration done.\n");
fffd222c:	eb000a21 	bl	fffd4ab8 <LogMessage>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xFF00)) {return (FALSE);} // HTOTAL[7:0] = 0xA3 (HTOTAL[8] appears in CRTCEXT1[0])
fffd2230:	e5970000 	ldr	r0, [r7]
fffd2234:	e3a02cff 	mov	r2, #65280	; 0xff00
fffd2238:	e3a01002 	mov	r1, #2
fffd223c:	e0850000 	add	r0, r5, r0
fffd2240:	ebfff8a1 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2244:	e3500000 	cmp	r0, #0
fffd2248:	0a000460 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xEF01)) {return (FALSE);} // HDISP_END
fffd224c:	e5970000 	ldr	r0, [r7]
fffd2250:	e30e2f01 	movw	r2, #61185	; 0xef01
fffd2254:	e3a01002 	mov	r1, #2
fffd2258:	e0850000 	add	r0, r5, r0
fffd225c:	ebfff89a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2260:	e3500000 	cmp	r0, #0
fffd2264:	0a000459 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xEF02)) {return (FALSE);} // HBLANK_START HBLKSTR[8] appears in CRTCEXT1[1]
fffd2268:	e5970000 	ldr	r0, [r7]
fffd226c:	e30e2f02 	movw	r2, #61186	; 0xef02
fffd2270:	e3a01002 	mov	r1, #2
fffd2274:	e0850000 	add	r0, r5, r0
fffd2278:	ebfff893 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd227c:	e3500000 	cmp	r0, #0
fffd2280:	0a000452 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x8303)) {return (FALSE);} // HBLANK_END
fffd2284:	e5970000 	ldr	r0, [r7]
fffd2288:	e3082303 	movw	r2, #33539	; 0x8303
fffd228c:	e3a01002 	mov	r1, #2
fffd2290:	e0850000 	add	r0, r5, r0
fffd2294:	ebfff88c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2298:	e3500000 	cmp	r0, #0
fffd229c:	0a00044b 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xF504)) {return (FALSE);} // HRETRACE_START 
fffd22a0:	e5970000 	ldr	r0, [r7]
fffd22a4:	e30f2504 	movw	r2, #62724	; 0xf504
fffd22a8:	e3a01002 	mov	r1, #2
fffd22ac:	e0850000 	add	r0, r5, r0
fffd22b0:	ebfff885 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd22b4:	e3500000 	cmp	r0, #0
fffd22b8:	0a000444 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x1905)) {return (FALSE);} // HRETRACE_END
fffd22bc:	e5970000 	ldr	r0, [r7]
fffd22c0:	e3012905 	movw	r2, #6405	; 0x1905
fffd22c4:	e3a01002 	mov	r1, #2
fffd22c8:	e0850000 	add	r0, r5, r0
fffd22cc:	ebfff87e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd22d0:	e3500000 	cmp	r0, #0
fffd22d4:	0a00043d 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xD106)) {return (FALSE);} // VTOTAL		// was 24
fffd22d8:	e5970000 	ldr	r0, [r7]
fffd22dc:	e30d2106 	movw	r2, #53510	; 0xd106
fffd22e0:	e3a01002 	mov	r1, #2
fffd22e4:	e0850000 	add	r0, r5, r0
fffd22e8:	ebfff877 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd22ec:	e3500000 	cmp	r0, #0
fffd22f0:	0a000436 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x1007)) {return (FALSE);} // OVERFLOW (overflow of other fields)
fffd22f4:	e5970000 	ldr	r0, [r7]
fffd22f8:	e3012007 	movw	r2, #4103	; 0x1007
fffd22fc:	e3a01002 	mov	r1, #2
fffd2300:	e0850000 	add	r0, r5, r0
fffd2304:	ebfff870 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2308:	e3500000 	cmp	r0, #0
fffd230c:	0a00042f 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x0008)) {return (FALSE);} // PRE_ROW_SCAN
fffd2310:	e5970000 	ldr	r0, [r7]
fffd2314:	e3a02008 	mov	r2, #8
fffd2318:	e3a01002 	mov	r1, #2
fffd231c:	e0850000 	add	r0, r5, r0
fffd2320:	ebfff869 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2324:	e3500000 	cmp	r0, #0
fffd2328:	0a000428 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x4009)) {return (FALSE);} // MAX_SCAN_LINE
fffd232c:	e5970000 	ldr	r0, [r7]
fffd2330:	e3042009 	movw	r2, #16393	; 0x4009
fffd2334:	e3a01002 	mov	r1, #2
fffd2338:	e0850000 	add	r0, r5, r0
fffd233c:	ebfff862 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2340:	e3500000 	cmp	r0, #0
fffd2344:	0a000421 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x200A)) {return (FALSE);} // CUR_START
fffd2348:	e59f7bf0 	ldr	r7, [pc, #3056]	; fffd2f40 <GFX_ConfigureDisplayTo1920x1200+0x1034>
fffd234c:	e302200a 	movw	r2, #8202	; 0x200a
fffd2350:	e3a01002 	mov	r1, #2
fffd2354:	e08f7007 	add	r7, pc, r7
fffd2358:	e5970000 	ldr	r0, [r7]
fffd235c:	e0850000 	add	r0, r5, r0
fffd2360:	ebfff859 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2364:	e3500000 	cmp	r0, #0
fffd2368:	0a000418 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x000B)) {return (FALSE);} // CUR_END
fffd236c:	e5970000 	ldr	r0, [r7]
fffd2370:	e3a0200b 	mov	r2, #11
fffd2374:	e3a01002 	mov	r1, #2
fffd2378:	e0850000 	add	r0, r5, r0
fffd237c:	ebfff852 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2380:	e3500000 	cmp	r0, #0
fffd2384:	0a000411 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>

	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x000C)) {return (FALSE);} // ST_ADDR_HI
fffd2388:	e5970000 	ldr	r0, [r7]
fffd238c:	e3a0200c 	mov	r2, #12
fffd2390:	e3a01002 	mov	r1, #2
fffd2394:	e0850000 	add	r0, r5, r0
fffd2398:	ebfff84b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd239c:	e3500000 	cmp	r0, #0
fffd23a0:	0a00040a 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x800D)) {return (FALSE);} // ST_ADDR_LOW - check where should FB_BA be
fffd23a4:	e5970000 	ldr	r0, [r7]
fffd23a8:	e308200d 	movw	r2, #32781	; 0x800d
fffd23ac:	e3a01002 	mov	r1, #2
fffd23b0:	e0850000 	add	r0, r5, r0
fffd23b4:	ebfff844 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd23b8:	e3500000 	cmp	r0, #0
fffd23bc:	0a000403 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xFF00)) {return (FALSE);} // HTOTAL again?
fffd23c0:	e5970000 	ldr	r0, [r7]
fffd23c4:	e3a02cff 	mov	r2, #65280	; 0xff00
fffd23c8:	e3a01002 	mov	r1, #2
fffd23cc:	e0850000 	add	r0, r5, r0
fffd23d0:	ebfff83d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd23d4:	e3500000 	cmp	r0, #0
fffd23d8:	0a0003fc 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>

	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x000E)) {return (FALSE);} // CUR_POS_HI
fffd23dc:	e5970000 	ldr	r0, [r7]
fffd23e0:	e3a0200e 	mov	r2, #14
fffd23e4:	e3a01002 	mov	r1, #2
fffd23e8:	e0850000 	add	r0, r5, r0
fffd23ec:	ebfff836 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd23f0:	e3500000 	cmp	r0, #0
fffd23f4:	0a0003f5 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x000F)) {return (FALSE);} // CUR_POS_LOW
fffd23f8:	e5970000 	ldr	r0, [r7]
fffd23fc:	e3a0200f 	mov	r2, #15
fffd2400:	e3a01002 	mov	r1, #2
fffd2404:	e0850000 	add	r0, r5, r0
fffd2408:	ebfff82f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd240c:	e3500000 	cmp	r0, #0
fffd2410:	0a0003ee 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xB210)) {return (FALSE);} // VRETRACE_START
fffd2414:	e5970000 	ldr	r0, [r7]
fffd2418:	e30b2210 	movw	r2, #45584	; 0xb210
fffd241c:	e3a01002 	mov	r1, #2
fffd2420:	e0850000 	add	r0, r5, r0
fffd2424:	ebfff828 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2428:	e3500000 	cmp	r0, #0
fffd242c:	0a0003e7 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x2811)) {return (FALSE);} // VRETRACE_END
fffd2430:	e5970000 	ldr	r0, [r7]
fffd2434:	e3022811 	movw	r2, #10257	; 0x2811
fffd2438:	e3a01002 	mov	r1, #2
fffd243c:	e0850000 	add	r0, r5, r0
fffd2440:	ebfff821 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2444:	e3500000 	cmp	r0, #0
fffd2448:	0a0003e0 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xAF12)) {return (FALSE);} // VDISP_END
fffd244c:	e5970000 	ldr	r0, [r7]
fffd2450:	e30a2f12 	movw	r2, #44818	; 0xaf12
fffd2454:	e3a01002 	mov	r1, #2
fffd2458:	e0850000 	add	r0, r5, r0
fffd245c:	ebfff81a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2460:	e3500000 	cmp	r0, #0
fffd2464:	0a0003d9 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
fffd2468:	e59f3ad4 	ldr	r3, [pc, #2772]	; fffd2f44 <GFX_ConfigureDisplayTo1920x1200+0x1038>
	if ((colorDepth == COLOR_DEPTH_32BIT)|| (colorDepth == COLOR_DEPTH_24BIT)) {
fffd246c:	e2447003 	sub	r7, r4, #3
fffd2470:	e6ef7077 	uxtb	r7, r7
fffd2474:	e79f0003 	ldr	r0, [pc, r3]
fffd2478:	e3570001 	cmp	r7, #1
fffd247c:	e2800d7f 	add	r0, r0, #8128	; 0x1fc0
fffd2480:	e2800014 	add	r0, r0, #20
fffd2484:	8a0003da 	bhi	fffd33f4 <GFX_ConfigureDisplayTo1920x1200+0x14e8>
		if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x0013))
fffd2488:	e3a02013 	mov	r2, #19
fffd248c:	e3a01002 	mov	r1, #2
fffd2490:	ebfff80d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2494:	e3500000 	cmp	r0, #0
fffd2498:	0a0003cc 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
			if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xF013))
				return (FALSE); // OFFSET - note FB should be also moved
			FB_BA += 0x100*4;
		}
	}
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x0014)) {return (FALSE);} // UND_LOC
fffd249c:	e59f5aa4 	ldr	r5, [pc, #2724]	; fffd2f48 <GFX_ConfigureDisplayTo1920x1200+0x103c>
fffd24a0:	e3018fd4 	movw	r8, #8148	; 0x1fd4
fffd24a4:	e3a02014 	mov	r2, #20
fffd24a8:	e3a01002 	mov	r1, #2
fffd24ac:	e08f5005 	add	r5, pc, r5
fffd24b0:	e5950000 	ldr	r0, [r5]
fffd24b4:	e0880000 	add	r0, r8, r0
fffd24b8:	ebfff803 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd24bc:	e3500000 	cmp	r0, #0
fffd24c0:	0a0003c2 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xAF15)) {return (FALSE);} // VBLANK_START
fffd24c4:	e5950000 	ldr	r0, [r5]
fffd24c8:	e30a2f15 	movw	r2, #44821	; 0xaf15
fffd24cc:	e3a01002 	mov	r1, #2
fffd24d0:	e0880000 	add	r0, r8, r0
fffd24d4:	ebfff7fc 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd24d8:	e3500000 	cmp	r0, #0
fffd24dc:	0a0003bb 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xD216)) {return (FALSE);} // VBLANK_END
fffd24e0:	e5950000 	ldr	r0, [r5]
fffd24e4:	e30d2216 	movw	r2, #53782	; 0xd216
fffd24e8:	e3a01002 	mov	r1, #2
fffd24ec:	e0880000 	add	r0, r8, r0
fffd24f0:	ebfff7f5 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd24f4:	e3500000 	cmp	r0, #0
fffd24f8:	0a0003b4 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xC317)) {return (FALSE);} // MODE_CTRL
fffd24fc:	e5950000 	ldr	r0, [r5]
fffd2500:	e30c2317 	movw	r2, #49943	; 0xc317
fffd2504:	e3a01002 	mov	r1, #2
fffd2508:	e0880000 	add	r0, r8, r0
fffd250c:	ebfff7ee 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2510:	e3500000 	cmp	r0, #0
fffd2514:	0a0003ad 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xFF18)) {return (FALSE);} // LINE_COMP
fffd2518:	e5950000 	ldr	r0, [r5]
fffd251c:	e30f2f18 	movw	r2, #65304	; 0xff18
fffd2520:	e3a01002 	mov	r1, #2
fffd2524:	e0880000 	add	r0, r8, r0
fffd2528:	ebfff7e7 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd252c:	e3500000 	cmp	r0, #0
fffd2530:	0a0003a6 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x0022)) {return (FALSE);} // CPU_LATCH_RD
fffd2534:	e5950000 	ldr	r0, [r5]
fffd2538:	e3a02022 	mov	r2, #34	; 0x22
fffd253c:	e3a01002 	mov	r1, #2
fffd2540:	e0880000 	add	r0, r8, r0
fffd2544:	ebfff7e0 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2548:	e3500000 	cmp	r0, #0
fffd254c:	0a00039f 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x8024)) {return (FALSE);} // DATA_SEL
fffd2550:	e5950000 	ldr	r0, [r5]
fffd2554:	e3082024 	movw	r2, #32804	; 0x8024
fffd2558:	e3a01002 	mov	r1, #2
fffd255c:	e0880000 	add	r0, r8, r0
fffd2560:	ebfff7d9 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2564:	e3500000 	cmp	r0, #0
fffd2568:	0a000398 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0x3426)) {return (FALSE);} // ATTRIB_ADDR 
fffd256c:	e5950000 	ldr	r0, [r5]
fffd2570:	e3032426 	movw	r2, #13350	; 0x3426
fffd2574:	e3a01002 	mov	r1, #2
fffd2578:	e0880000 	add	r0, r8, r0
fffd257c:	ebfff7d2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2580:	e3500000 	cmp	r0, #0
fffd2584:	0a000391 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>


	LogMessage("> CRTC Configuration done.\n");
fffd2588:	e59f09bc 	ldr	r0, [pc, #2492]	; fffd2f4c <GFX_ConfigureDisplayTo1920x1200+0x1040>
fffd258c:	e08f0000 	add	r0, pc, r0
fffd2590:	eb000948 	bl	fffd4ab8 <LogMessage>

	/*----------------------------------------------------------------------------------------------*/
	/* CRTC Controller Extension Configuration														*/
	/*----------------------------------------------------------------------------------------------*/

	if (colorDepth == COLOR_DEPTH_32BIT) {
fffd2594:	e3540004 	cmp	r4, #4
		if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x1000))
fffd2598:	e5953000 	ldr	r3, [r5]
fffd259c:	e3010fde 	movw	r0, #8158	; 0x1fde
	if (colorDepth == COLOR_DEPTH_32BIT) {
fffd25a0:	1a0003a0 	bne	fffd3428 <GFX_ConfigureDisplayTo1920x1200+0x151c>
		if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x1000))
fffd25a4:	e3a02a01 	mov	r2, #4096	; 0x1000
fffd25a8:	e3a01002 	mov	r1, #2
fffd25ac:	e0800003 	add	r0, r0, r3
fffd25b0:	ebfff7c5 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd25b4:	e3500000 	cmp	r0, #0
fffd25b8:	0a000384 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
			if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0000))
				return (FALSE); // ADDR_GEN
		}
	}

	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0801)) {return (FALSE);} // H_COUNT
fffd25bc:	e59f898c 	ldr	r8, [pc, #2444]	; fffd2f50 <GFX_ConfigureDisplayTo1920x1200+0x1044>
fffd25c0:	e3015fde 	movw	r5, #8158	; 0x1fde
fffd25c4:	e3002801 	movw	r2, #2049	; 0x801
fffd25c8:	e3a01002 	mov	r1, #2
fffd25cc:	e08f8008 	add	r8, pc, r8
fffd25d0:	e5980000 	ldr	r0, [r8]
fffd25d4:	e0850000 	add	r0, r5, r0
fffd25d8:	ebfff7bb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd25dc:	e3500000 	cmp	r0, #0
fffd25e0:	0a00037a 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0xAD02)) {return (FALSE);} // V_COUNT 
fffd25e4:	e5980000 	ldr	r0, [r8]
fffd25e8:	e30a2d02 	movw	r2, #44290	; 0xad02
fffd25ec:	e3a01002 	mov	r1, #2
fffd25f0:	e0850000 	add	r0, r5, r0
fffd25f4:	ebfff7b4 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd25f8:	e3500000 	cmp	r0, #0
fffd25fc:	0a000373 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
fffd2600:	e5980000 	ldr	r0, [r8]

	if (colorDepth == COLOR_DEPTH_32BIT) {
fffd2604:	e3540004 	cmp	r4, #4
fffd2608:	e0850000 	add	r0, r5, r0
fffd260c:	1a00038c 	bne	fffd3444 <GFX_ConfigureDisplayTo1920x1200+0x1538>
		if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x8303))
fffd2610:	e3082303 	movw	r2, #33539	; 0x8303
fffd2614:	e3a01002 	mov	r1, #2
fffd2618:	ebfff7ab 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd261c:	e3500000 	cmp	r0, #0
fffd2620:	0a00036a 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	} else if (colorDepth == COLOR_DEPTH_24BIT) {
		if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x8203))
			return (FALSE); // MISC
	}

	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0004)) {return (FALSE);} // MEM_PAGE
fffd2624:	e59f5928 	ldr	r5, [pc, #2344]	; fffd2f54 <GFX_ConfigureDisplayTo1920x1200+0x1048>
fffd2628:	e3018fde 	movw	r8, #8158	; 0x1fde
fffd262c:	e3a02004 	mov	r2, #4
fffd2630:	e3a01002 	mov	r1, #2
fffd2634:	e08f5005 	add	r5, pc, r5
fffd2638:	e5950000 	ldr	r0, [r5]
fffd263c:	e0880000 	add	r0, r8, r0
fffd2640:	ebfff7a1 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2644:	e3500000 	cmp	r0, #0
fffd2648:	0a000360 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0005)) {return (FALSE);} // HVIDMID
fffd264c:	e5950000 	ldr	r0, [r5]
fffd2650:	e3a02005 	mov	r2, #5
fffd2654:	e3a01002 	mov	r1, #2
fffd2658:	e0880000 	add	r0, r8, r0
fffd265c:	ebfff79a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2660:	e3500000 	cmp	r0, #0
fffd2664:	0a000359 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x2006)) {return (FALSE);} // P_REQ_CTL
fffd2668:	e5950000 	ldr	r0, [r5]
fffd266c:	e3022006 	movw	r2, #8198	; 0x2006
fffd2670:	e3a01002 	mov	r1, #2
fffd2674:	e0880000 	add	r0, r8, r0
fffd2678:	ebfff793 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd267c:	e3500000 	cmp	r0, #0
fffd2680:	0a000352 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0007)) {return (FALSE);} // REQ_CTL
fffd2684:	e5950000 	ldr	r0, [r5]
fffd2688:	e3a02007 	mov	r2, #7
fffd268c:	e3a01002 	mov	r1, #2
fffd2690:	e0880000 	add	r0, r8, r0
fffd2694:	ebfff78c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2698:	e3500000 	cmp	r0, #0
fffd269c:	0a00034b 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>

	// Poleg - New registers
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x1030)) {return (FALSE);} //MGABURSTSIZE
fffd26a0:	e5950000 	ldr	r0, [r5]
fffd26a4:	e3012030 	movw	r2, #4144	; 0x1030
fffd26a8:	e3a01002 	mov	r1, #2
fffd26ac:	e0880000 	add	r0, r8, r0
fffd26b0:	ebfff785 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd26b4:	e3500000 	cmp	r0, #0
fffd26b8:	0a000344 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0534)) {return (FALSE);} //MGAREQCTL
fffd26bc:	e5950000 	ldr	r0, [r5]
fffd26c0:	e3002534 	movw	r2, #1332	; 0x534
fffd26c4:	e3a01002 	mov	r1, #2
fffd26c8:	e0880000 	add	r0, r8, r0
fffd26cc:	ebfff77e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd26d0:	e3500000 	cmp	r0, #0
fffd26d4:	0a00033d 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	LogMessage("> CRTC Extension configuration done.\n");
fffd26d8:	e59f0878 	ldr	r0, [pc, #2168]	; fffd2f58 <GFX_ConfigureDisplayTo1920x1200+0x104c>
fffd26dc:	e08f0000 	add	r0, pc, r0
fffd26e0:	eb0008f4 	bl	fffd4ab8 <LogMessage>

	/*----------------------------------------------------------------------------------------------*/
	/* DAC Eclipse Configuration																	*/
	/*----------------------------------------------------------------------------------------------*/

	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x04)) {return (FALSE);} // XCURADDL
fffd26e4:	e5950000 	ldr	r0, [r5]
fffd26e8:	e3a02004 	mov	r2, #4
fffd26ec:	e3a01001 	mov	r1, #1
fffd26f0:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd26f4:	ebfff774 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd26f8:	e3500000 	cmp	r0, #0
fffd26fc:	0a000333 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x4F)) {return (FALSE);} 
fffd2700:	e5950000 	ldr	r0, [r5]
fffd2704:	e3038c0a 	movw	r8, #15370	; 0x3c0a
fffd2708:	e3a0204f 	mov	r2, #79	; 0x4f
fffd270c:	e3a01001 	mov	r1, #1
fffd2710:	e0880000 	add	r0, r8, r0
fffd2714:	ebfff76c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2718:	e3500000 	cmp	r0, #0
fffd271c:	0a00032b 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x05)) {return (FALSE);} // XCURADDH
fffd2720:	e5950000 	ldr	r0, [r5]
fffd2724:	e3a02005 	mov	r2, #5
fffd2728:	e3a01001 	mov	r1, #1
fffd272c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2730:	ebfff765 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2734:	e3500000 	cmp	r0, #0
fffd2738:	0a000324 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x3A)) {return (FALSE);}
fffd273c:	e5950000 	ldr	r0, [r5]
fffd2740:	e3a0203a 	mov	r2, #58	; 0x3a
fffd2744:	e3a01001 	mov	r1, #1
fffd2748:	e0880000 	add	r0, r8, r0
fffd274c:	ebfff75e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2750:	e3500000 	cmp	r0, #0
fffd2754:	0a00031d 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x06)) {return (FALSE);} // XCURCTRL
fffd2758:	e59f57fc 	ldr	r5, [pc, #2044]	; fffd2f5c <GFX_ConfigureDisplayTo1920x1200+0x1050>
fffd275c:	e3a02006 	mov	r2, #6
fffd2760:	e3a01001 	mov	r1, #1
fffd2764:	e08f5005 	add	r5, pc, r5
fffd2768:	e5950000 	ldr	r0, [r5]
fffd276c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2770:	ebfff755 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2774:	e3500000 	cmp	r0, #0
fffd2778:	0a000314 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd277c:	e5950000 	ldr	r0, [r5]
fffd2780:	e3a02000 	mov	r2, #0
fffd2784:	e3a01001 	mov	r1, #1
fffd2788:	e0880000 	add	r0, r8, r0
fffd278c:	ebfff74e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2790:	e3500000 	cmp	r0, #0
fffd2794:	0a00030d 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x08)) {return (FALSE);} // XCURCOL0RED
fffd2798:	e5950000 	ldr	r0, [r5]
fffd279c:	e3a02008 	mov	r2, #8
fffd27a0:	e3a01001 	mov	r1, #1
fffd27a4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd27a8:	ebfff747 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd27ac:	e3500000 	cmp	r0, #0
fffd27b0:	0a000306 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x82)) {return (FALSE);}
fffd27b4:	e5950000 	ldr	r0, [r5]
fffd27b8:	e3a02082 	mov	r2, #130	; 0x82
fffd27bc:	e3a01001 	mov	r1, #1
fffd27c0:	e0880000 	add	r0, r8, r0
fffd27c4:	ebfff740 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd27c8:	e3500000 	cmp	r0, #0
fffd27cc:	0a0002ff 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x09)) {return (FALSE);} // XCURCOL0GREEN
fffd27d0:	e5950000 	ldr	r0, [r5]
fffd27d4:	e3a02009 	mov	r2, #9
fffd27d8:	e3a01001 	mov	r1, #1
fffd27dc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd27e0:	ebfff739 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd27e4:	e3500000 	cmp	r0, #0
fffd27e8:	0a0002f8 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xFB)) {return (FALSE);}
fffd27ec:	e5950000 	ldr	r0, [r5]
fffd27f0:	e3a020fb 	mov	r2, #251	; 0xfb
fffd27f4:	e3a01001 	mov	r1, #1
fffd27f8:	e0880000 	add	r0, r8, r0
fffd27fc:	ebfff732 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2800:	e3500000 	cmp	r0, #0
fffd2804:	0a0002f1 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x0A)) {return (FALSE);} // XCURCOL0BLUE
fffd2808:	e5950000 	ldr	r0, [r5]
fffd280c:	e3a0200a 	mov	r2, #10
fffd2810:	e3a01001 	mov	r1, #1
fffd2814:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2818:	ebfff72b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd281c:	e3500000 	cmp	r0, #0
fffd2820:	0a0002ea 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x44)) {return (FALSE);}
fffd2824:	e5950000 	ldr	r0, [r5]
fffd2828:	e3a02044 	mov	r2, #68	; 0x44
fffd282c:	e3a01001 	mov	r1, #1
fffd2830:	e0880000 	add	r0, r8, r0
fffd2834:	ebfff724 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2838:	e3500000 	cmp	r0, #0
fffd283c:	0a0002e3 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x0C)) {return (FALSE);} // XCURCOL1RED
fffd2840:	e5950000 	ldr	r0, [r5]
fffd2844:	e3a0200c 	mov	r2, #12
fffd2848:	e3a01001 	mov	r1, #1
fffd284c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2850:	ebfff71d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2854:	e3500000 	cmp	r0, #0
fffd2858:	0a0002dc 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x2C)) {return (FALSE);}
fffd285c:	e5950000 	ldr	r0, [r5]
fffd2860:	e3a0202c 	mov	r2, #44	; 0x2c
fffd2864:	e3a01001 	mov	r1, #1
fffd2868:	e0880000 	add	r0, r8, r0
fffd286c:	ebfff716 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2870:	e3500000 	cmp	r0, #0
fffd2874:	0a0002d5 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x0D)) {return (FALSE);} // XCURCOL1GREE
fffd2878:	e59f56e0 	ldr	r5, [pc, #1760]	; fffd2f60 <GFX_ConfigureDisplayTo1920x1200+0x1054>
fffd287c:	e3a0200d 	mov	r2, #13
fffd2880:	e3a01001 	mov	r1, #1
fffd2884:	e08f5005 	add	r5, pc, r5
fffd2888:	e5950000 	ldr	r0, [r5]
fffd288c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2890:	ebfff70d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2894:	e3500000 	cmp	r0, #0
fffd2898:	0a0002cc 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x75)) {return (FALSE);}
fffd289c:	e5950000 	ldr	r0, [r5]
fffd28a0:	e3a02075 	mov	r2, #117	; 0x75
fffd28a4:	e3a01001 	mov	r1, #1
fffd28a8:	e0880000 	add	r0, r8, r0
fffd28ac:	ebfff706 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd28b0:	e3500000 	cmp	r0, #0
fffd28b4:	0a0002c5 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x0E)) {return (FALSE);} // XCURCOL1BLUE
fffd28b8:	e5950000 	ldr	r0, [r5]
fffd28bc:	e3a0200e 	mov	r2, #14
fffd28c0:	e3a01001 	mov	r1, #1
fffd28c4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd28c8:	ebfff6ff 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd28cc:	e3500000 	cmp	r0, #0
fffd28d0:	0a0002be 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x8B)) {return (FALSE);}
fffd28d4:	e5950000 	ldr	r0, [r5]
fffd28d8:	e3a0208b 	mov	r2, #139	; 0x8b
fffd28dc:	e3a01001 	mov	r1, #1
fffd28e0:	e0880000 	add	r0, r8, r0
fffd28e4:	ebfff6f8 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd28e8:	e3500000 	cmp	r0, #0
fffd28ec:	0a0002b7 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x10)) {return (FALSE);} // XCURCOL2RED
fffd28f0:	e5950000 	ldr	r0, [r5]
fffd28f4:	e3a02010 	mov	r2, #16
fffd28f8:	e3a01001 	mov	r1, #1
fffd28fc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2900:	ebfff6f1 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2904:	e3500000 	cmp	r0, #0
fffd2908:	0a0002b0 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x14)) {return (FALSE);}
fffd290c:	e5950000 	ldr	r0, [r5]
fffd2910:	e3a02014 	mov	r2, #20
fffd2914:	e3a01001 	mov	r1, #1
fffd2918:	e0880000 	add	r0, r8, r0
fffd291c:	ebfff6ea 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2920:	e3500000 	cmp	r0, #0
fffd2924:	0a0002a9 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x11)) {return (FALSE);} // XCURCOL2GREEN
fffd2928:	e5950000 	ldr	r0, [r5]
fffd292c:	e3a02011 	mov	r2, #17
fffd2930:	e3a01001 	mov	r1, #1
fffd2934:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2938:	ebfff6e3 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd293c:	e3500000 	cmp	r0, #0
fffd2940:	0a0002a2 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x2E)) {return (FALSE);}
fffd2944:	e5950000 	ldr	r0, [r5]
fffd2948:	e3a0202e 	mov	r2, #46	; 0x2e
fffd294c:	e3a01001 	mov	r1, #1
fffd2950:	e0880000 	add	r0, r8, r0
fffd2954:	ebfff6dc 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2958:	e3500000 	cmp	r0, #0
fffd295c:	0a00029b 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x12)) {return (FALSE);} // XCURCOL2BLUE
fffd2960:	e5950000 	ldr	r0, [r5]
fffd2964:	e3a02012 	mov	r2, #18
fffd2968:	e3a01001 	mov	r1, #1
fffd296c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2970:	ebfff6d5 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2974:	e3500000 	cmp	r0, #0
fffd2978:	0a000294 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x4A)) {return (FALSE);}
fffd297c:	e5950000 	ldr	r0, [r5]
fffd2980:	e3a0204a 	mov	r2, #74	; 0x4a
fffd2984:	e3a01001 	mov	r1, #1
fffd2988:	e0880000 	add	r0, r8, r0
fffd298c:	ebfff6ce 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2990:	e3500000 	cmp	r0, #0
fffd2994:	0a00028d 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x19)) {return (FALSE);}		// XMULCTRL
fffd2998:	e59f55c4 	ldr	r5, [pc, #1476]	; fffd2f64 <GFX_ConfigureDisplayTo1920x1200+0x1058>
fffd299c:	e3a02019 	mov	r2, #25
fffd29a0:	e3a01001 	mov	r1, #1
fffd29a4:	e08f5005 	add	r5, pc, r5
fffd29a8:	e5950000 	ldr	r0, [r5]
fffd29ac:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd29b0:	ebfff6c5 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd29b4:	e3500000 	cmp	r0, #0
fffd29b8:	0a000284 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if (colorDepth == COLOR_DEPTH_32BIT) {
fffd29bc:	e3540004 	cmp	r4, #4
fffd29c0:	e5950000 	ldr	r0, [r5]
fffd29c4:	1a0002a5 	bne	fffd3460 <GFX_ConfigureDisplayTo1920x1200+0x1554>
		if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x07))
fffd29c8:	e3a02007 	mov	r2, #7
fffd29cc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd29d0:	e3a01001 	mov	r1, #1
fffd29d4:	e280000a 	add	r0, r0, #10
fffd29d8:	ebfff6bb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd29dc:	e3500000 	cmp	r0, #0
fffd29e0:	0a00027a 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
			return (FALSE);
	} else if (colorDepth == COLOR_DEPTH_24BIT) {
		if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x03))
			return (FALSE);
	}
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1A)) {return (FALSE);}		// XPIXCLKCTRL (should be 9?)
fffd29e4:	e59f557c 	ldr	r5, [pc, #1404]	; fffd2f68 <GFX_ConfigureDisplayTo1920x1200+0x105c>
fffd29e8:	e3a0201a 	mov	r2, #26
fffd29ec:	e3a01001 	mov	r1, #1
fffd29f0:	e08f5005 	add	r5, pc, r5
fffd29f4:	e5950000 	ldr	r0, [r5]
fffd29f8:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd29fc:	ebfff6b2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2a00:	e3500000 	cmp	r0, #0
fffd2a04:	0a000271 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x09)) {return (FALSE);}
fffd2a08:	e5950000 	ldr	r0, [r5]
fffd2a0c:	e3038c0a 	movw	r8, #15370	; 0x3c0a
fffd2a10:	e3a02009 	mov	r2, #9
fffd2a14:	e3a01001 	mov	r1, #1
fffd2a18:	e0880000 	add	r0, r8, r0
fffd2a1c:	ebfff6aa 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2a20:	e3500000 	cmp	r0, #0
fffd2a24:	0a000269 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1D)) {return (FALSE);}		// XGENCTRL
fffd2a28:	e5950000 	ldr	r0, [r5]
fffd2a2c:	e3a0201d 	mov	r2, #29
fffd2a30:	e3a01001 	mov	r1, #1
fffd2a34:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2a38:	ebfff6a3 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2a3c:	e3500000 	cmp	r0, #0
fffd2a40:	0a000262 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x20)) {return (FALSE);}
fffd2a44:	e5950000 	ldr	r0, [r5]
fffd2a48:	e3a02020 	mov	r2, #32
fffd2a4c:	e3a01001 	mov	r1, #1
fffd2a50:	e0880000 	add	r0, r8, r0
fffd2a54:	ebfff69c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2a58:	e3500000 	cmp	r0, #0
fffd2a5c:	0a00025b 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x1E)) {return (FALSE);}		// XMISCCTRL
fffd2a60:	e5950000 	ldr	r0, [r5]
fffd2a64:	e3a0201e 	mov	r2, #30
fffd2a68:	e3a01001 	mov	r1, #1
fffd2a6c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2a70:	ebfff695 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2a74:	e3500000 	cmp	r0, #0
fffd2a78:	0a000254 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x1F)) {return (FALSE);}
fffd2a7c:	e5950000 	ldr	r0, [r5]
fffd2a80:	e3a0201f 	mov	r2, #31
fffd2a84:	e3a01001 	mov	r1, #1
fffd2a88:	e0880000 	add	r0, r8, r0
fffd2a8c:	ebfff68e 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2a90:	e3500000 	cmp	r0, #0
fffd2a94:	0a00024d 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2A)) {return (FALSE);}		// XGENIOCTRL
fffd2a98:	e5950000 	ldr	r0, [r5]
fffd2a9c:	e3a0202a 	mov	r2, #42	; 0x2a
fffd2aa0:	e3a01001 	mov	r1, #1
fffd2aa4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2aa8:	ebfff687 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2aac:	e3500000 	cmp	r0, #0
fffd2ab0:	0a000246 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x01)) {return (FALSE);}
fffd2ab4:	e5950000 	ldr	r0, [r5]
fffd2ab8:	e3a02001 	mov	r2, #1
fffd2abc:	e1a01002 	mov	r1, r2
fffd2ac0:	e0880000 	add	r0, r8, r0
fffd2ac4:	ebfff680 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2ac8:	e3500000 	cmp	r0, #0
fffd2acc:	0a00023f 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2B)) {return (FALSE);}		// XGENIODATA		
fffd2ad0:	e5950000 	ldr	r0, [r5]
fffd2ad4:	e3a0202b 	mov	r2, #43	; 0x2b
fffd2ad8:	e3a01001 	mov	r1, #1
fffd2adc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2ae0:	ebfff679 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2ae4:	e3500000 	cmp	r0, #0
fffd2ae8:	0a000238 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x02)) {return (FALSE);}
fffd2aec:	e5950000 	ldr	r0, [r5]
fffd2af0:	e3a02002 	mov	r2, #2
fffd2af4:	e3a01001 	mov	r1, #1
fffd2af8:	e0880000 	add	r0, r8, r0
fffd2afc:	ebfff672 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2b00:	e3500000 	cmp	r0, #0
fffd2b04:	0a000231 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2C)) {return (FALSE);}		// ?? rsvd.
fffd2b08:	e59f545c 	ldr	r5, [pc, #1116]	; fffd2f6c <GFX_ConfigureDisplayTo1920x1200+0x1060>
fffd2b0c:	e3a0202c 	mov	r2, #44	; 0x2c
fffd2b10:	e3a01001 	mov	r1, #1
fffd2b14:	e08f5005 	add	r5, pc, r5
fffd2b18:	e5950000 	ldr	r0, [r5]
fffd2b1c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2b20:	ebfff669 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2b24:	e3500000 	cmp	r0, #0
fffd2b28:	0a000228 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x14)) {return (FALSE);}
fffd2b2c:	e5950000 	ldr	r0, [r5]
fffd2b30:	e3a02014 	mov	r2, #20
fffd2b34:	e3a01001 	mov	r1, #1
fffd2b38:	e0880000 	add	r0, r8, r0
fffd2b3c:	ebfff662 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2b40:	e3500000 	cmp	r0, #0
fffd2b44:	0a000221 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2D)) {return (FALSE);}		// ?? rsvd.
fffd2b48:	e5950000 	ldr	r0, [r5]
fffd2b4c:	e3a0202d 	mov	r2, #45	; 0x2d
fffd2b50:	e3a01001 	mov	r1, #1
fffd2b54:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2b58:	ebfff65b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2b5c:	e3500000 	cmp	r0, #0
fffd2b60:	0a00021a 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x71)) {return (FALSE);}
fffd2b64:	e5950000 	ldr	r0, [r5]
fffd2b68:	e3a02071 	mov	r2, #113	; 0x71
fffd2b6c:	e3a01001 	mov	r1, #1
fffd2b70:	e0880000 	add	r0, r8, r0
fffd2b74:	ebfff654 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2b78:	e3500000 	cmp	r0, #0
fffd2b7c:	0a000213 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2E)) {return (FALSE);}		// ?? rsvd.
fffd2b80:	e5950000 	ldr	r0, [r5]
fffd2b84:	e3a0202e 	mov	r2, #46	; 0x2e
fffd2b88:	e3a01001 	mov	r1, #1
fffd2b8c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2b90:	ebfff64d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2b94:	e3500000 	cmp	r0, #0
fffd2b98:	0a00020c 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x01)) {return (FALSE);}
fffd2b9c:	e5950000 	ldr	r0, [r5]
fffd2ba0:	e3a02001 	mov	r2, #1
fffd2ba4:	e1a01002 	mov	r1, r2
fffd2ba8:	e0880000 	add	r0, r8, r0
fffd2bac:	ebfff646 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2bb0:	e3500000 	cmp	r0, #0
fffd2bb4:	0a000205 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x2F)) {return (FALSE);}		// ?? rsvd.
fffd2bb8:	e5950000 	ldr	r0, [r5]
fffd2bbc:	e3a0202f 	mov	r2, #47	; 0x2f
fffd2bc0:	e3a01001 	mov	r1, #1
fffd2bc4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2bc8:	ebfff63f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2bcc:	e3500000 	cmp	r0, #0
fffd2bd0:	0a0001fe 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x40)) {return (FALSE);}
fffd2bd4:	e5950000 	ldr	r0, [r5]
fffd2bd8:	e3a02040 	mov	r2, #64	; 0x40
fffd2bdc:	e3a01001 	mov	r1, #1
fffd2be0:	e0880000 	add	r0, r8, r0
fffd2be4:	ebfff638 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2be8:	e3500000 	cmp	r0, #0
fffd2bec:	0a0001f7 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x38)) {return (FALSE);}		// XZOOMCTRL
fffd2bf0:	e5950000 	ldr	r0, [r5]
fffd2bf4:	e3a02038 	mov	r2, #56	; 0x38
fffd2bf8:	e3a01001 	mov	r1, #1
fffd2bfc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2c00:	ebfff631 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2c04:	e3500000 	cmp	r0, #0
fffd2c08:	0a0001f0 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd2c0c:	e5950000 	ldr	r0, [r5]
fffd2c10:	e3a02000 	mov	r2, #0
fffd2c14:	e3a01001 	mov	r1, #1
fffd2c18:	e0880000 	add	r0, r8, r0
fffd2c1c:	ebfff62a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2c20:	e3500000 	cmp	r0, #0
fffd2c24:	0a0001e9 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x3A)) {return (FALSE);}		// XSENSETEST (RO)
fffd2c28:	e59f5340 	ldr	r5, [pc, #832]	; fffd2f70 <GFX_ConfigureDisplayTo1920x1200+0x1064>
fffd2c2c:	e3a0203a 	mov	r2, #58	; 0x3a
fffd2c30:	e3a01001 	mov	r1, #1
fffd2c34:	e08f5005 	add	r5, pc, r5
fffd2c38:	e5950000 	ldr	r0, [r5]
fffd2c3c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2c40:	ebfff621 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2c44:	e3500000 	cmp	r0, #0
fffd2c48:	0a0001e0 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd2c4c:	e5950000 	ldr	r0, [r5]
fffd2c50:	e3a02000 	mov	r2, #0
fffd2c54:	e3a01001 	mov	r1, #1
fffd2c58:	e0880000 	add	r0, r8, r0
fffd2c5c:	ebfff61a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2c60:	e3500000 	cmp	r0, #0
fffd2c64:	0a0001d9 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x3C)) {return (FALSE);}		// XCRCREML
fffd2c68:	e5950000 	ldr	r0, [r5]
fffd2c6c:	e3a0203c 	mov	r2, #60	; 0x3c
fffd2c70:	e3a01001 	mov	r1, #1
fffd2c74:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2c78:	ebfff613 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2c7c:	e3500000 	cmp	r0, #0
fffd2c80:	0a0001d2 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd2c84:	e5950000 	ldr	r0, [r5]
fffd2c88:	e3a02000 	mov	r2, #0
fffd2c8c:	e3a01001 	mov	r1, #1
fffd2c90:	e0880000 	add	r0, r8, r0
fffd2c94:	ebfff60c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2c98:	e3500000 	cmp	r0, #0
fffd2c9c:	0a0001cb 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x3D)) {return (FALSE);}		// XCRCREMH (RO)
fffd2ca0:	e5950000 	ldr	r0, [r5]
fffd2ca4:	e3a0203d 	mov	r2, #61	; 0x3d
fffd2ca8:	e3a01001 	mov	r1, #1
fffd2cac:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2cb0:	ebfff605 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2cb4:	e3500000 	cmp	r0, #0
fffd2cb8:	0a0001c4 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xB5)) {return (FALSE);}
fffd2cbc:	e5950000 	ldr	r0, [r5]
fffd2cc0:	e3a020b5 	mov	r2, #181	; 0xb5
fffd2cc4:	e3a01001 	mov	r1, #1
fffd2cc8:	e0880000 	add	r0, r8, r0
fffd2ccc:	ebfff5fe 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2cd0:	e3500000 	cmp	r0, #0
fffd2cd4:	0a0001bd 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x3E)) {return (FALSE);}		// XCRCBITSEL
fffd2cd8:	e5950000 	ldr	r0, [r5]
fffd2cdc:	e3a0203e 	mov	r2, #62	; 0x3e
fffd2ce0:	e3a01001 	mov	r1, #1
fffd2ce4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2ce8:	ebfff5f7 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2cec:	e3500000 	cmp	r0, #0
fffd2cf0:	0a0001b6 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x0B)) {return (FALSE);}		
fffd2cf4:	e5950000 	ldr	r0, [r5]
fffd2cf8:	e3a0200b 	mov	r2, #11
fffd2cfc:	e3a01001 	mov	r1, #1
fffd2d00:	e0880000 	add	r0, r8, r0
fffd2d04:	ebfff5f0 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2d08:	e3500000 	cmp	r0, #0
fffd2d0c:	0a0001af 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x40)) {return (FALSE);}		// ?? rsvd. 
fffd2d10:	e5950000 	ldr	r0, [r5]
fffd2d14:	e3a02040 	mov	r2, #64	; 0x40
fffd2d18:	e3a01001 	mov	r1, #1
fffd2d1c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2d20:	ebfff5e9 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2d24:	e3500000 	cmp	r0, #0
fffd2d28:	0a0001a8 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xFD)) {return (FALSE);}
fffd2d2c:	e5950000 	ldr	r0, [r5]
fffd2d30:	e3a020fd 	mov	r2, #253	; 0xfd
fffd2d34:	e3a01001 	mov	r1, #1
fffd2d38:	e0880000 	add	r0, r8, r0
fffd2d3c:	ebfff5e2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2d40:	e3500000 	cmp	r0, #0
fffd2d44:	0a0001a1 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x41)) {return (FALSE);}		// ?? rsvd.
fffd2d48:	e59f5224 	ldr	r5, [pc, #548]	; fffd2f74 <GFX_ConfigureDisplayTo1920x1200+0x1068>
fffd2d4c:	e3a02041 	mov	r2, #65	; 0x41
fffd2d50:	e3a01001 	mov	r1, #1
fffd2d54:	e08f5005 	add	r5, pc, r5
fffd2d58:	e5950000 	ldr	r0, [r5]
fffd2d5c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2d60:	ebfff5d9 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2d64:	e3500000 	cmp	r0, #0
fffd2d68:	0a000198 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd2d6c:	e5950000 	ldr	r0, [r5]
fffd2d70:	e3a02000 	mov	r2, #0
fffd2d74:	e3a01001 	mov	r1, #1
fffd2d78:	e0880000 	add	r0, r8, r0
fffd2d7c:	ebfff5d2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2d80:	e3500000 	cmp	r0, #0
fffd2d84:	0a000191 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x42)) {return (FALSE);}		// ?? rsvd.
fffd2d88:	e5950000 	ldr	r0, [r5]
fffd2d8c:	e3a02042 	mov	r2, #66	; 0x42
fffd2d90:	e3a01001 	mov	r1, #1
fffd2d94:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2d98:	ebfff5cb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2d9c:	e3500000 	cmp	r0, #0
fffd2da0:	0a00018a 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xB6)) {return (FALSE);}
fffd2da4:	e5950000 	ldr	r0, [r5]
fffd2da8:	e3a020b6 	mov	r2, #182	; 0xb6
fffd2dac:	e3a01001 	mov	r1, #1
fffd2db0:	e0880000 	add	r0, r8, r0
fffd2db4:	ebfff5c4 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2db8:	e3500000 	cmp	r0, #0
fffd2dbc:	0a000183 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x43)) {return (FALSE);}		// ?? rsvd.
fffd2dc0:	e5950000 	ldr	r0, [r5]
fffd2dc4:	e3a02043 	mov	r2, #67	; 0x43
fffd2dc8:	e3a01001 	mov	r1, #1
fffd2dcc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2dd0:	ebfff5bd 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2dd4:	e3500000 	cmp	r0, #0
fffd2dd8:	0a00017c 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd2ddc:	e5950000 	ldr	r0, [r5]
fffd2de0:	e3a02000 	mov	r2, #0
fffd2de4:	e3a01001 	mov	r1, #1
fffd2de8:	e0880000 	add	r0, r8, r0
fffd2dec:	ebfff5b6 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2df0:	e3500000 	cmp	r0, #0
fffd2df4:	0a000175 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x44)) {return (FALSE);}		// ?? rsvd.
fffd2df8:	e5950000 	ldr	r0, [r5]
fffd2dfc:	e3a02044 	mov	r2, #68	; 0x44
fffd2e00:	e3a01001 	mov	r1, #1
fffd2e04:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2e08:	ebfff5af 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2e0c:	e3500000 	cmp	r0, #0
fffd2e10:	0a00016e 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x11)) {return (FALSE);}
fffd2e14:	e5950000 	ldr	r0, [r5]
fffd2e18:	e3a02011 	mov	r2, #17
fffd2e1c:	e3a01001 	mov	r1, #1
fffd2e20:	e0880000 	add	r0, r8, r0
fffd2e24:	ebfff5a8 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2e28:	e3500000 	cmp	r0, #0
fffd2e2c:	0a000167 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x45)) {return (FALSE);}		// ?? rsvd.
fffd2e30:	e5950000 	ldr	r0, [r5]
fffd2e34:	e3a02045 	mov	r2, #69	; 0x45
fffd2e38:	e3a01001 	mov	r1, #1
fffd2e3c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2e40:	ebfff5a1 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2e44:	e3500000 	cmp	r0, #0
fffd2e48:	0a000160 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x10)) {return (FALSE);}
fffd2e4c:	e5950000 	ldr	r0, [r5]
fffd2e50:	e3a02010 	mov	r2, #16
fffd2e54:	e3a01001 	mov	r1, #1
fffd2e58:	e0880000 	add	r0, r8, r0
fffd2e5c:	ebfff59a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2e60:	e3500000 	cmp	r0, #0
fffd2e64:	0a000159 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x46)) {return (FALSE);}		// ?? rsvd.
fffd2e68:	e59f5108 	ldr	r5, [pc, #264]	; fffd2f78 <GFX_ConfigureDisplayTo1920x1200+0x106c>
fffd2e6c:	e3a02046 	mov	r2, #70	; 0x46
fffd2e70:	e3a01001 	mov	r1, #1
fffd2e74:	e08f5005 	add	r5, pc, r5
fffd2e78:	e5950000 	ldr	r0, [r5]
fffd2e7c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2e80:	ebfff591 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2e84:	e3500000 	cmp	r0, #0
fffd2e88:	0a000150 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x07)) {return (FALSE);}
fffd2e8c:	e5950000 	ldr	r0, [r5]
fffd2e90:	e3a02007 	mov	r2, #7
fffd2e94:	e3a01001 	mov	r1, #1
fffd2e98:	e0880000 	add	r0, r8, r0
fffd2e9c:	ebfff58a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2ea0:	e3500000 	cmp	r0, #0
fffd2ea4:	0a000149 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x48)) {return (FALSE);}		// ?? rsvd.
fffd2ea8:	e5950000 	ldr	r0, [r5]
fffd2eac:	e3a02048 	mov	r2, #72	; 0x48
fffd2eb0:	e3a01001 	mov	r1, #1
fffd2eb4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2eb8:	ebfff583 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2ebc:	e3500000 	cmp	r0, #0
fffd2ec0:	0a000142 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x0C)) {return (FALSE);}
fffd2ec4:	e5950000 	ldr	r0, [r5]
fffd2ec8:	e3a0200c 	mov	r2, #12
fffd2ecc:	e3a01001 	mov	r1, #1
fffd2ed0:	e0880000 	add	r0, r8, r0
fffd2ed4:	ebfff57c 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2ed8:	e3500000 	cmp	r0, #0
fffd2edc:	0a00013b 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x49)) {return (FALSE);}		// ?? rsvd.
fffd2ee0:	e5950000 	ldr	r0, [r5]
fffd2ee4:	e3a02049 	mov	r2, #73	; 0x49
fffd2ee8:	e3a01001 	mov	r1, #1
fffd2eec:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2ef0:	ebfff575 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2ef4:	e3500000 	cmp	r0, #0
fffd2ef8:	0a000134 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
fffd2efc:	ea000028 	b	fffd2fa4 <GFX_ConfigureDisplayTo1920x1200+0x1098>
fffd2f00:	00009bab 	.word	0x00009bab
fffd2f04:	00009dee 	.word	0x00009dee
fffd2f08:	0536102b 	.word	0x0536102b
fffd2f0c:	0000b2e8 	.word	0x0000b2e8
fffd2f10:	00009bc4 	.word	0x00009bc4
fffd2f14:	0000bcc8 	.word	0x0000bcc8
fffd2f18:	00010014 	.word	0x00010014
fffd2f1c:	00009bb0 	.word	0x00009bb0
fffd2f20:	00010010 	.word	0x00010010
fffd2f24:	00009bd2 	.word	0x00009bd2
fffd2f28:	00010004 	.word	0x00010004
fffd2f2c:	0000bbf8 	.word	0x0000bbf8
fffd2f30:	0000bb3c 	.word	0x0000bb3c
fffd2f34:	00009ac6 	.word	0x00009ac6
fffd2f38:	000099d8 	.word	0x000099d8
fffd2f3c:	0000ba04 	.word	0x0000ba04
fffd2f40:	0000b8d8 	.word	0x0000b8d8
fffd2f44:	0000b7b8 	.word	0x0000b7b8
fffd2f48:	0000b780 	.word	0x0000b780
fffd2f4c:	0000969b 	.word	0x0000969b
fffd2f50:	0000b660 	.word	0x0000b660
fffd2f54:	0000b5f8 	.word	0x0000b5f8
fffd2f58:	00009567 	.word	0x00009567
fffd2f5c:	0000b4c8 	.word	0x0000b4c8
fffd2f60:	0000b3a8 	.word	0x0000b3a8
fffd2f64:	0000b288 	.word	0x0000b288
fffd2f68:	0000b23c 	.word	0x0000b23c
fffd2f6c:	0000b118 	.word	0x0000b118
fffd2f70:	0000aff8 	.word	0x0000aff8
fffd2f74:	0000aed8 	.word	0x0000aed8
fffd2f78:	0000adb8 	.word	0x0000adb8
fffd2f7c:	0000abf0 	.word	0x0000abf0
fffd2f80:	0000aad0 	.word	0x0000aad0
fffd2f84:	0000a9b0 	.word	0x0000a9b0
fffd2f88:	000089b1 	.word	0x000089b1
fffd2f8c:	0000893c 	.word	0x0000893c
fffd2f90:	00008958 	.word	0x00008958
fffd2f94:	00008748 	.word	0x00008748
fffd2f98:	000087a4 	.word	0x000087a4
fffd2f9c:	00000034 	.word	0x00000034
fffd2fa0:	0000877e 	.word	0x0000877e
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x75)) {return (FALSE);}
fffd2fa4:	e5950000 	ldr	r0, [r5]
fffd2fa8:	e3a02075 	mov	r2, #117	; 0x75
fffd2fac:	e3a01001 	mov	r1, #1
fffd2fb0:	e0880000 	add	r0, r8, r0
fffd2fb4:	ebfff544 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2fb8:	e3500000 	cmp	r0, #0
fffd2fbc:	0a000103 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4A)) {return (FALSE);}		// ?? rsvd.
fffd2fc0:	e5950000 	ldr	r0, [r5]
fffd2fc4:	e3a0204a 	mov	r2, #74	; 0x4a
fffd2fc8:	e3a01001 	mov	r1, #1
fffd2fcc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd2fd0:	ebfff53d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2fd4:	e3500000 	cmp	r0, #0
fffd2fd8:	0a0000fc 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x07)) {return (FALSE);}
fffd2fdc:	e5950000 	ldr	r0, [r5]
fffd2fe0:	e3a02007 	mov	r2, #7
fffd2fe4:	e3a01001 	mov	r1, #1
fffd2fe8:	e0880000 	add	r0, r8, r0
fffd2fec:	ebfff536 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd2ff0:	e3500000 	cmp	r0, #0
fffd2ff4:	0a0000f5 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4C)) {return (FALSE);}		// ?? rsvd.
fffd2ff8:	e5950000 	ldr	r0, [r5]
fffd2ffc:	e3a0204c 	mov	r2, #76	; 0x4c
fffd3000:	e3a01001 	mov	r1, #1
fffd3004:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd3008:	ebfff52f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd300c:	e3500000 	cmp	r0, #0
fffd3010:	0a0000ee 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x13)) {return (FALSE);}
fffd3014:	e5950000 	ldr	r0, [r5]
fffd3018:	e3a02013 	mov	r2, #19
fffd301c:	e3a01001 	mov	r1, #1
fffd3020:	e0880000 	add	r0, r8, r0
fffd3024:	ebfff528 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3028:	e3500000 	cmp	r0, #0
fffd302c:	0a0000e7 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4D)) {return (FALSE);}		// ?? rsvd.
fffd3030:	e51f50bc 	ldr	r5, [pc, #-188]	; fffd2f7c <GFX_ConfigureDisplayTo1920x1200+0x1070>
fffd3034:	e3a0204d 	mov	r2, #77	; 0x4d
fffd3038:	e3a01001 	mov	r1, #1
fffd303c:	e08f5005 	add	r5, pc, r5
fffd3040:	e5950000 	ldr	r0, [r5]
fffd3044:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd3048:	ebfff51f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd304c:	e3500000 	cmp	r0, #0
fffd3050:	0a0000de 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x5D)) {return (FALSE);}		
fffd3054:	e5950000 	ldr	r0, [r5]
fffd3058:	e3a0205d 	mov	r2, #93	; 0x5d
fffd305c:	e3a01001 	mov	r1, #1
fffd3060:	e0880000 	add	r0, r8, r0
fffd3064:	ebfff518 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3068:	e3500000 	cmp	r0, #0
fffd306c:	0a0000d7 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4E)) {return (FALSE);}		// ?? rsvd.
fffd3070:	e5950000 	ldr	r0, [r5]
fffd3074:	e3a0204e 	mov	r2, #78	; 0x4e
fffd3078:	e3a01001 	mov	r1, #1
fffd307c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd3080:	ebfff511 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3084:	e3500000 	cmp	r0, #0
fffd3088:	0a0000d0 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x05)) {return (FALSE);}
fffd308c:	e5950000 	ldr	r0, [r5]
fffd3090:	e3a02005 	mov	r2, #5
fffd3094:	e3a01001 	mov	r1, #1
fffd3098:	e0880000 	add	r0, r8, r0
fffd309c:	ebfff50a 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd30a0:	e3500000 	cmp	r0, #0
fffd30a4:	0a0000c9 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x4F)) {return (FALSE);}		// XPIXPLLSTAT
fffd30a8:	e5950000 	ldr	r0, [r5]
fffd30ac:	e3a0204f 	mov	r2, #79	; 0x4f
fffd30b0:	e3a01001 	mov	r1, #1
fffd30b4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd30b8:	ebfff503 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd30bc:	e3500000 	cmp	r0, #0
fffd30c0:	0a0000c2 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x00)) {return (FALSE);}
fffd30c4:	e5950000 	ldr	r0, [r5]
fffd30c8:	e3a02000 	mov	r2, #0
fffd30cc:	e3a01001 	mov	r1, #1
fffd30d0:	e0880000 	add	r0, r8, r0
fffd30d4:	ebfff4fc 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd30d8:	e3500000 	cmp	r0, #0
fffd30dc:	0a0000bb 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x51)) {return (FALSE);}		// ?? rsvd.
fffd30e0:	e5950000 	ldr	r0, [r5]
fffd30e4:	e3a02051 	mov	r2, #81	; 0x51
fffd30e8:	e3a01001 	mov	r1, #1
fffd30ec:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd30f0:	ebfff4f5 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd30f4:	e3500000 	cmp	r0, #0
fffd30f8:	0a0000b4 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x01)) {return (FALSE);}
fffd30fc:	e5950000 	ldr	r0, [r5]
fffd3100:	e3a02001 	mov	r2, #1
fffd3104:	e1a01002 	mov	r1, r2
fffd3108:	e0880000 	add	r0, r8, r0
fffd310c:	ebfff4ee 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3110:	e3500000 	cmp	r0, #0
fffd3114:	0a0000ad 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x18)) {return (FALSE);}	// XVREFCTRL
fffd3118:	e5950000 	ldr	r0, [r5]
fffd311c:	e3a02018 	mov	r2, #24
fffd3120:	e3a01001 	mov	r1, #1
fffd3124:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd3128:	ebfff4e7 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd312c:	e3500000 	cmp	r0, #0
fffd3130:	0a0000a6 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x04)) {return (FALSE);}
fffd3134:	e5950000 	ldr	r0, [r5]
fffd3138:	e3a02004 	mov	r2, #4
fffd313c:	e3a01001 	mov	r1, #1
fffd3140:	e0880000 	add	r0, r8, r0
fffd3144:	ebfff4e0 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3148:	e3500000 	cmp	r0, #0
fffd314c:	0a00009f 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x52)) {return (FALSE);}	
fffd3150:	e51f51d8 	ldr	r5, [pc, #-472]	; fffd2f80 <GFX_ConfigureDisplayTo1920x1200+0x1074>
fffd3154:	e3a02052 	mov	r2, #82	; 0x52
fffd3158:	e3a01001 	mov	r1, #1
fffd315c:	e08f5005 	add	r5, pc, r5
fffd3160:	e5950000 	ldr	r0, [r5]
fffd3164:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd3168:	ebfff4d7 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd316c:	e3500000 	cmp	r0, #0
fffd3170:	0a000096 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x61)) {return (FALSE);}
fffd3174:	e5950000 	ldr	r0, [r5]
fffd3178:	e3a02061 	mov	r2, #97	; 0x61
fffd317c:	e3a01001 	mov	r1, #1
fffd3180:	e0880000 	add	r0, r8, r0
fffd3184:	ebfff4d0 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3188:	e3500000 	cmp	r0, #0
fffd318c:	0a00008f 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x53)) {return (FALSE);}
fffd3190:	e5950000 	ldr	r0, [r5]
fffd3194:	e3a02053 	mov	r2, #83	; 0x53
fffd3198:	e3a01001 	mov	r1, #1
fffd319c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd31a0:	ebfff4c9 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd31a4:	e3500000 	cmp	r0, #0
fffd31a8:	0a000088 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x7D)) {return (FALSE);}
fffd31ac:	e5950000 	ldr	r0, [r5]
fffd31b0:	e3a0207d 	mov	r2, #125	; 0x7d
fffd31b4:	e3a01001 	mov	r1, #1
fffd31b8:	e0880000 	add	r0, r8, r0
fffd31bc:	ebfff4c2 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd31c0:	e3500000 	cmp	r0, #0
fffd31c4:	0a000081 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x54)) {return (FALSE);}
fffd31c8:	e5950000 	ldr	r0, [r5]
fffd31cc:	e3a02054 	mov	r2, #84	; 0x54
fffd31d0:	e3a01001 	mov	r1, #1
fffd31d4:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd31d8:	ebfff4bb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd31dc:	e3500000 	cmp	r0, #0
fffd31e0:	0a00007a 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xD1)) {return (FALSE);}
fffd31e4:	e5950000 	ldr	r0, [r5]
fffd31e8:	e3a020d1 	mov	r2, #209	; 0xd1
fffd31ec:	e3a01001 	mov	r1, #1
fffd31f0:	e0880000 	add	r0, r8, r0
fffd31f4:	ebfff4b4 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd31f8:	e3500000 	cmp	r0, #0
fffd31fc:	0a000073 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x55)) {return (FALSE);}
fffd3200:	e5950000 	ldr	r0, [r5]
fffd3204:	e3a02055 	mov	r2, #85	; 0x55
fffd3208:	e3a01001 	mov	r1, #1
fffd320c:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd3210:	ebfff4ad 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3214:	e3500000 	cmp	r0, #0
fffd3218:	0a00006c 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0xFE)) {return (FALSE);}
fffd321c:	e5950000 	ldr	r0, [r5]
fffd3220:	e3a020fe 	mov	r2, #254	; 0xfe
fffd3224:	e3a01001 	mov	r1, #1
fffd3228:	e0880000 	add	r0, r8, r0
fffd322c:	ebfff4a6 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3230:	e3500000 	cmp	r0, #0
fffd3234:	0a000065 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x56)) {return (FALSE);}
fffd3238:	e5950000 	ldr	r0, [r5]
fffd323c:	e3a02056 	mov	r2, #86	; 0x56
fffd3240:	e3a01001 	mov	r1, #1
fffd3244:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd3248:	ebfff49f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd324c:	e3500000 	cmp	r0, #0
fffd3250:	0a00005e 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x7D)) {return (FALSE);}
fffd3254:	e5950000 	ldr	r0, [r5]
fffd3258:	e3a0207d 	mov	r2, #125	; 0x7d
fffd325c:	e3a01001 	mov	r1, #1
fffd3260:	e0880000 	add	r0, r8, r0
fffd3264:	ebfff498 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3268:	e3500000 	cmp	r0, #0
fffd326c:	0a000057 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(PALWTADD,	sizeof(BYTE), 0x57)) {return (FALSE);}
fffd3270:	e51f52f4 	ldr	r5, [pc, #-756]	; fffd2f84 <GFX_ConfigureDisplayTo1920x1200+0x1078>
fffd3274:	e3a02057 	mov	r2, #87	; 0x57
fffd3278:	e3a01001 	mov	r1, #1
fffd327c:	e08f5005 	add	r5, pc, r5
fffd3280:	e5950000 	ldr	r0, [r5]
fffd3284:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd3288:	ebfff48f 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd328c:	e3500000 	cmp	r0, #0
fffd3290:	0a00004e 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
	if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x3A)) {return (FALSE);}
fffd3294:	e5950000 	ldr	r0, [r5]
fffd3298:	e3a0203a 	mov	r2, #58	; 0x3a
fffd329c:	e3a01001 	mov	r1, #1
fffd32a0:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd32a4:	e280000a 	add	r0, r0, #10
fffd32a8:	ebfff487 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd32ac:	e3500000 	cmp	r0, #0
fffd32b0:	0a000046 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>

	LogMessage("> DAC Eclipse Configuration done.\n");
fffd32b4:	e51f0334 	ldr	r0, [pc, #-820]	; fffd2f88 <GFX_ConfigureDisplayTo1920x1200+0x107c>
fffd32b8:	e08f0000 	add	r0, pc, r0
fffd32bc:	eb0005fd 	bl	fffd4ab8 <LogMessage>

	/*----------------------------------------------------------------------------------------------*/
	/* palette Configuration																		*/
	/*----------------------------------------------------------------------------------------------*/

	if(!AHB2PCI_Memory_Write(PALWTADD, sizeof(BYTE), 0)) {return (FALSE);}
fffd32c0:	e5950000 	ldr	r0, [r5]
fffd32c4:	e3a02000 	mov	r2, #0
fffd32c8:	e3a01001 	mov	r1, #1
fffd32cc:	e2800b0f 	add	r0, r0, #15360	; 0x3c00
fffd32d0:	ebfff47d 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd32d4:	e3500000 	cmp	r0, #0
fffd32d8:	0a00003c 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>

	if ((colorDepth == COLOR_DEPTH_32BIT) || (colorDepth == COLOR_DEPTH_24BIT))
fffd32dc:	e3570001 	cmp	r7, #1
fffd32e0:	8a000065 	bhi	fffd347c <GFX_ConfigureDisplayTo1920x1200+0x1570>
	{
		// palette for 8:8:8 color format
		for (i = 0; i <= 255; i++)
fffd32e4:	e3a07000 	mov	r7, #0
		{
			if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i)) {return (FALSE);}
fffd32e8:	e3038c01 	movw	r8, #15361	; 0x3c01
fffd32ec:	e5950000 	ldr	r0, [r5]
fffd32f0:	e1a02007 	mov	r2, r7
fffd32f4:	e3a01001 	mov	r1, #1
fffd32f8:	e0880000 	add	r0, r8, r0
fffd32fc:	ebfff472 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3300:	e3500000 	cmp	r0, #0
fffd3304:	0a000031 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
			if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i)) {return (FALSE);}
fffd3308:	e5950000 	ldr	r0, [r5]
fffd330c:	e1a02007 	mov	r2, r7
fffd3310:	e3a01001 	mov	r1, #1
fffd3314:	e0880000 	add	r0, r8, r0
fffd3318:	ebfff46b 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd331c:	e3500000 	cmp	r0, #0
fffd3320:	0a00002a 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
			if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i)) {return (FALSE);}
fffd3324:	e5950000 	ldr	r0, [r5]
fffd3328:	e1a02007 	mov	r2, r7
fffd332c:	e3a01001 	mov	r1, #1
fffd3330:	e0880000 	add	r0, r8, r0
fffd3334:	ebfff464 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3338:	e3500000 	cmp	r0, #0
fffd333c:	0a000023 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
		for (i = 0; i <= 255; i++)
fffd3340:	e2877001 	add	r7, r7, #1
fffd3344:	e3570c01 	cmp	r7, #256	; 0x100
fffd3348:	1affffe7 	bne	fffd32ec <GFX_ConfigureDisplayTo1920x1200+0x13e0>
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 4)) {return (FALSE);}
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 8)) {return (FALSE);}
			}
		}

		LogMessage("> Palette Configuration done.\n");
fffd334c:	e51f03c8 	ldr	r0, [pc, #-968]	; fffd2f8c <GFX_ConfigureDisplayTo1920x1200+0x1080>
fffd3350:	e08f0000 	add	r0, pc, r0
fffd3354:	eb0005d7 	bl	fffd4ab8 <LogMessage>
		/*----------------------------------------------------------------------------------------------*/

		// fill frame buffer with random lines
		DWORD lineNum = 0;
		const DWORD numOfBars=16;
		DWORD Address = FB_BA;
fffd3358:	e51f33c4 	ldr	r3, [pc, #-964]	; fffd2f9c <GFX_ConfigureDisplayTo1920x1200+0x1090>
		DWORD Index;
		DWORD Color;

		if (colorDepth == COLOR_DEPTH_32BIT)
fffd335c:	e3540004 	cmp	r4, #4
		DWORD Address = FB_BA;
fffd3360:	e7963003 	ldr	r3, [r6, r3]
fffd3364:	e5935000 	ldr	r5, [r3]
		if (colorDepth == COLOR_DEPTH_32BIT)
fffd3368:	1a000061 	bne	fffd34f4 <GFX_ConfigureDisplayTo1920x1200+0x15e8>
fffd336c:	e2854723 	add	r4, r5, #9175040	; 0x8c0000
fffd3370:	e2844a0a 	add	r4, r4, #40960	; 0xa000
			for (lineNum = 0; lineNum < numOfBars; ++lineNum)
			{
				Color = (DWORD)rand() ^ ((DWORD)rand()<<16); 
fffd3374:	eb0007d1 	bl	fffd52c0 <rand>
fffd3378:	e1a06000 	mov	r6, r0
fffd337c:	eb0007cf 	bl	fffd52c0 <rand>
fffd3380:	e2853923 	add	r3, r5, #573440	; 0x8c000
fffd3384:	e0260800 	eor	r0, r6, r0, lsl #16
fffd3388:	e2833c0a 	add	r3, r3, #2560	; 0xa00
				for (Index =0; Index<((1920*1200)/numOfBars); Index++, Address=Address+4)
					WRITE_REG (HW_DWORD(Address), Color);
fffd338c:	e4850004 	str	r0, [r5], #4
				for (Index =0; Index<((1920*1200)/numOfBars); Index++, Address=Address+4)
fffd3390:	e1530005 	cmp	r3, r5
fffd3394:	1afffffc 	bne	fffd338c <GFX_ConfigureDisplayTo1920x1200+0x1480>
			for (lineNum = 0; lineNum < numOfBars; ++lineNum)
fffd3398:	e1540005 	cmp	r4, r5
fffd339c:	1afffff4 	bne	fffd3374 <GFX_ConfigureDisplayTo1920x1200+0x1468>
				for (Index =0; Index<((1920*1200)/numOfBars); Index++, Address=Address+4)
					WRITE_REG (HW_DWORD(Address), Color);
			}
		}

		LogMessage("> Filling Frame Buffer done.\n");
fffd33a0:	e51f0418 	ldr	r0, [pc, #-1048]	; fffd2f90 <GFX_ConfigureDisplayTo1920x1200+0x1084>
fffd33a4:	e08f0000 	add	r0, pc, r0
fffd33a8:	eb0005c2 	bl	fffd4ab8 <LogMessage>
		return (TRUE);
fffd33ac:	e3a00001 	mov	r0, #1
}; 
fffd33b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
		LogMessage("Waiting until PCI is out of reset; Press any key to abort .... \n");
fffd33b4:	e1a00008 	mov	r0, r8
fffd33b8:	eb0005be 	bl	fffd4ab8 <LogMessage>
		if (cnt == 10) 
fffd33bc:	e2555001 	subs	r5, r5, #1
fffd33c0:	1a000004 	bne	fffd33d8 <GFX_ConfigureDisplayTo1920x1200+0x14cc>
			LogWarning ("Test Aborted .\n");
fffd33c4:	e51f0438 	ldr	r0, [pc, #-1080]	; fffd2f94 <GFX_ConfigureDisplayTo1920x1200+0x1088>
fffd33c8:	e08f0000 	add	r0, pc, r0
fffd33cc:	eb0005f5 	bl	fffd4ba8 <LogWarning>
	if (!PLL_Configure  (GPLLINDIV, GPLLFBDIV, GPLLST)) {return (FALSE);}
fffd33d0:	e3a00000 	mov	r0, #0
fffd33d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
		Sleep (1000);
fffd33d8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
fffd33dc:	eb0006fe 	bl	fffd4fdc <Sleep>
fffd33e0:	eafffad5 	b	fffd1f3c <GFX_ConfigureDisplayTo1920x1200+0x30>
		LogPass("TEST_ConfigureDisplay : MGABASE1 = %08Xh\n", MGABASE1);
fffd33e4:	e51f0454 	ldr	r0, [pc, #-1108]	; fffd2f98 <GFX_ConfigureDisplayTo1920x1200+0x108c>
fffd33e8:	e08f0000 	add	r0, pc, r0
fffd33ec:	eb00060d 	bl	fffd4c28 <LogPass>
fffd33f0:	eafffaec 	b	fffd1fa8 <GFX_ConfigureDisplayTo1920x1200+0x9c>
		if (colorDepth == COLOR_DEPTH_16BIT) 
fffd33f4:	e3540002 	cmp	r4, #2
fffd33f8:	1afffc27 	bne	fffd249c <GFX_ConfigureDisplayTo1920x1200+0x590>
			if(!AHB2PCI_Memory_Write(CRTC, sizeof(WORD), 0xF013))
fffd33fc:	e30f2013 	movw	r2, #61459	; 0xf013
fffd3400:	e1a01004 	mov	r1, r4
fffd3404:	ebfff430 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd3408:	e3500000 	cmp	r0, #0
fffd340c:	0affffef 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
			FB_BA += 0x100*4;
fffd3410:	e51f347c 	ldr	r3, [pc, #-1148]	; fffd2f9c <GFX_ConfigureDisplayTo1920x1200+0x1090>
fffd3414:	e7962003 	ldr	r2, [r6, r3]
fffd3418:	e5923000 	ldr	r3, [r2]
fffd341c:	e2833b01 	add	r3, r3, #1024	; 0x400
fffd3420:	e5823000 	str	r3, [r2]
fffd3424:	eafffc1c 	b	fffd249c <GFX_ConfigureDisplayTo1920x1200+0x590>
fffd3428:	e0800003 	add	r0, r0, r3
		if ((colorDepth == COLOR_DEPTH_16BIT) || (colorDepth == COLOR_DEPTH_24BIT)) {
fffd342c:	e2443002 	sub	r3, r4, #2
fffd3430:	e3530001 	cmp	r3, #1
			if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x0000))
fffd3434:	93a02000 	movls	r2, #0
fffd3438:	93a01002 	movls	r1, #2
		if ((colorDepth == COLOR_DEPTH_16BIT) || (colorDepth == COLOR_DEPTH_24BIT)) {
fffd343c:	8afffc5e 	bhi	fffd25bc <GFX_ConfigureDisplayTo1920x1200+0x6b0>
fffd3440:	eafffc5a 	b	fffd25b0 <GFX_ConfigureDisplayTo1920x1200+0x6a4>
	} else if (colorDepth == COLOR_DEPTH_16BIT) {
fffd3444:	e3540002 	cmp	r4, #2
		if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x8103))
fffd3448:	03082103 	movweq	r2, #33027	; 0x8103
	} else if (colorDepth == COLOR_DEPTH_16BIT) {
fffd344c:	0afffc70 	beq	fffd2614 <GFX_ConfigureDisplayTo1920x1200+0x708>
	} else if (colorDepth == COLOR_DEPTH_24BIT) {
fffd3450:	e3540003 	cmp	r4, #3
		if(!AHB2PCI_Memory_Write(CRTCEXT, sizeof(WORD), 0x8203))
fffd3454:	03082203 	movweq	r2, #33283	; 0x8203
	} else if (colorDepth == COLOR_DEPTH_24BIT) {
fffd3458:	1afffc71 	bne	fffd2624 <GFX_ConfigureDisplayTo1920x1200+0x718>
fffd345c:	eafffc6c 	b	fffd2614 <GFX_ConfigureDisplayTo1920x1200+0x708>
	} else if (colorDepth == COLOR_DEPTH_16BIT) {
fffd3460:	e3540002 	cmp	r4, #2
fffd3464:	1a000001 	bne	fffd3470 <GFX_ConfigureDisplayTo1920x1200+0x1564>
		if(!AHB2PCI_Memory_Write(X_DATAREG, sizeof(BYTE), 0x03))
fffd3468:	e1a02004 	mov	r2, r4
fffd346c:	eafffd56 	b	fffd29cc <GFX_ConfigureDisplayTo1920x1200+0xac0>
	} else if (colorDepth == COLOR_DEPTH_24BIT) {
fffd3470:	e3540003 	cmp	r4, #3
fffd3474:	1afffd5a 	bne	fffd29e4 <GFX_ConfigureDisplayTo1920x1200+0xad8>
fffd3478:	eafffffa 	b	fffd3468 <GFX_ConfigureDisplayTo1920x1200+0x155c>
		if (colorDepth == COLOR_DEPTH_16BIT)
fffd347c:	e3540002 	cmp	r4, #2
fffd3480:	1affffb1 	bne	fffd334c <GFX_ConfigureDisplayTo1920x1200+0x1440>
fffd3484:	e3a07000 	mov	r7, #0
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 8)) {return (FALSE);}
fffd3488:	e3038c01 	movw	r8, #15361	; 0x3c01
fffd348c:	e5950000 	ldr	r0, [r5]
fffd3490:	e1a09087 	lsl	r9, r7, #1
fffd3494:	e3a01001 	mov	r1, #1
fffd3498:	e1a02009 	mov	r2, r9
fffd349c:	e0880000 	add	r0, r8, r0
fffd34a0:	ebfff409 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd34a4:	e3500000 	cmp	r0, #0
fffd34a8:	0affffc8 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 4)) {return (FALSE);}
fffd34ac:	e5950000 	ldr	r0, [r5]
fffd34b0:	e1a02007 	mov	r2, r7
fffd34b4:	e3a01001 	mov	r1, #1
fffd34b8:	e0880000 	add	r0, r8, r0
fffd34bc:	ebfff402 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd34c0:	e3500000 	cmp	r0, #0
fffd34c4:	0affffc1 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
				if(!AHB2PCI_Memory_Write(PALDATA, sizeof(BYTE), i * 8)) {return (FALSE);}
fffd34c8:	e5950000 	ldr	r0, [r5]
fffd34cc:	e1a02009 	mov	r2, r9
fffd34d0:	e3a01001 	mov	r1, #1
fffd34d4:	e0880000 	add	r0, r8, r0
fffd34d8:	ebfff3fb 	bl	fffd04cc <AHB2PCI_Memory_Write>
fffd34dc:	e3500000 	cmp	r0, #0
fffd34e0:	0affffba 	beq	fffd33d0 <GFX_ConfigureDisplayTo1920x1200+0x14c4>
fffd34e4:	e2877004 	add	r7, r7, #4
			for (i = 0; i <= 63; i++)
fffd34e8:	e3570c01 	cmp	r7, #256	; 0x100
fffd34ec:	1affffe6 	bne	fffd348c <GFX_ConfigureDisplayTo1920x1200+0x1580>
fffd34f0:	eaffff95 	b	fffd334c <GFX_ConfigureDisplayTo1920x1200+0x1440>
		else if (colorDepth == COLOR_DEPTH_16BIT)
fffd34f4:	e3540002 	cmp	r4, #2
fffd34f8:	1a00000d 	bne	fffd3534 <GFX_ConfigureDisplayTo1920x1200+0x1628>
fffd34fc:	e2854846 	add	r4, r5, #4587520	; 0x460000
fffd3500:	e2844a05 	add	r4, r4, #20480	; 0x5000
				Color = (DWORD)rand() ^ ((DWORD)rand()<<16);  
fffd3504:	eb00076d 	bl	fffd52c0 <rand>
fffd3508:	e1a06000 	mov	r6, r0
					WRITE_REG (HW_WORD(Address), (WORD)Color);
fffd350c:	e6ff6076 	uxth	r6, r6
				Color = (DWORD)rand() ^ ((DWORD)rand()<<16);  
fffd3510:	eb00076a 	bl	fffd52c0 <rand>
fffd3514:	e2853a46 	add	r3, r5, #286720	; 0x46000
fffd3518:	e2833c05 	add	r3, r3, #1280	; 0x500
					WRITE_REG (HW_WORD(Address), (WORD)Color);
fffd351c:	e0c560b2 	strh	r6, [r5], #2
				for (Index =0; Index<((1920*1200)/numOfBars); Index++, Address=Address+2)
fffd3520:	e1530005 	cmp	r3, r5
fffd3524:	1afffffc 	bne	fffd351c <GFX_ConfigureDisplayTo1920x1200+0x1610>
			for (lineNum = 0; lineNum < numOfBars; ++lineNum)
fffd3528:	e1540005 	cmp	r4, r5
fffd352c:	1afffff4 	bne	fffd3504 <GFX_ConfigureDisplayTo1920x1200+0x15f8>
fffd3530:	eaffff9a 	b	fffd33a0 <GFX_ConfigureDisplayTo1920x1200+0x1494>
		else if (colorDepth == COLOR_DEPTH_24BIT)
fffd3534:	e3540003 	cmp	r4, #3
fffd3538:	1affff98 	bne	fffd33a0 <GFX_ConfigureDisplayTo1920x1200+0x1494>
			LogWarning ("\n Using 32 bit frame buffer method for 24bit mode ! \n");
fffd353c:	e51f05a4 	ldr	r0, [pc, #-1444]	; fffd2fa0 <GFX_ConfigureDisplayTo1920x1200+0x1094>
fffd3540:	e2854723 	add	r4, r5, #9175040	; 0x8c0000
fffd3544:	e2844a0a 	add	r4, r4, #40960	; 0xa000
fffd3548:	e08f0000 	add	r0, pc, r0
fffd354c:	eb000595 	bl	fffd4ba8 <LogWarning>
				Color = (DWORD)rand() ^ ((DWORD)rand()<<16); 
fffd3550:	eb00075a 	bl	fffd52c0 <rand>
fffd3554:	e1a06000 	mov	r6, r0
fffd3558:	eb000758 	bl	fffd52c0 <rand>
fffd355c:	e2853923 	add	r3, r5, #573440	; 0x8c000
fffd3560:	e0260800 	eor	r0, r6, r0, lsl #16
fffd3564:	e2833c0a 	add	r3, r3, #2560	; 0xa00
					WRITE_REG (HW_DWORD(Address), Color);
fffd3568:	e4850004 	str	r0, [r5], #4
				for (Index =0; Index<((1920*1200)/numOfBars); Index++, Address=Address+4)
fffd356c:	e1530005 	cmp	r3, r5
fffd3570:	1afffffc 	bne	fffd3568 <GFX_ConfigureDisplayTo1920x1200+0x165c>
			for (lineNum = 0; lineNum < numOfBars; ++lineNum)
fffd3574:	e1540005 	cmp	r4, r5
fffd3578:	1afffff4 	bne	fffd3550 <GFX_ConfigureDisplayTo1920x1200+0x1644>
fffd357c:	eaffff87 	b	fffd33a0 <GFX_ConfigureDisplayTo1920x1200+0x1494>

fffd3580 <GFX_ClearMemorySpace>:

//----------------------------------------------------------------------------------------
void GFX_ClearMemorySpace(BYTE presetValue)
{
fffd3580:	e92d4070 	push	{r4, r5, r6, lr}
fffd3584:	e1a05000 	mov	r5, r0
fffd3588:	e59f4020 	ldr	r4, [pc, #32]	; fffd35b0 <GFX_ClearMemorySpace+0x30>
	FB_Initialize();
fffd358c:	ebfff405 	bl	fffd05a8 <FB_Initialize>
	memset((void *)FB_BA, presetValue, (16 * 1024 * 1024));
fffd3590:	e59f301c 	ldr	r3, [pc, #28]	; fffd35b4 <GFX_ClearMemorySpace+0x34>
{
fffd3594:	e08f4004 	add	r4, pc, r4
	memset((void *)FB_BA, presetValue, (16 * 1024 * 1024));
fffd3598:	e1a01005 	mov	r1, r5
fffd359c:	e3a02401 	mov	r2, #16777216	; 0x1000000
fffd35a0:	e7943003 	ldr	r3, [r4, r3]
}
fffd35a4:	e8bd4070 	pop	{r4, r5, r6, lr}
	memset((void *)FB_BA, presetValue, (16 * 1024 * 1024));
fffd35a8:	e5930000 	ldr	r0, [r3]
fffd35ac:	ea00200b 	b	fffdb5e0 <__memset_from_arm>
fffd35b0:	00009c88 	.word	0x00009c88
fffd35b4:	00000034 	.word	0x00000034

fffd35b8 <FiqRoutine>:
extern INT_ROUTINE pIrqRoutine;
extern INT_ROUTINE pFiqRoutine;


void FiqRoutine (UINT32 Address)
{
fffd35b8:	e92d4010 	push	{r4, lr}
fffd35bc:	e1a04000 	mov	r4, r0
	LOG_ERROR (("'FIQ' event has been triggered at address 0x%08lX. \n",Address));
fffd35c0:	e59f3038 	ldr	r3, [pc, #56]	; fffd3600 <FiqRoutine+0x48>
fffd35c4:	e3a02020 	mov	r2, #32
fffd35c8:	e59f1034 	ldr	r1, [pc, #52]	; fffd3604 <FiqRoutine+0x4c>
fffd35cc:	e59f0034 	ldr	r0, [pc, #52]	; fffd3608 <FiqRoutine+0x50>
fffd35d0:	e08f3003 	add	r3, pc, r3
fffd35d4:	e08f1001 	add	r1, pc, r1
fffd35d8:	e08f0000 	add	r0, pc, r0
fffd35dc:	eb000561 	bl	fffd4b68 <LogError>
fffd35e0:	e59f0024 	ldr	r0, [pc, #36]	; fffd360c <FiqRoutine+0x54>
fffd35e4:	e1a01004 	mov	r1, r4
fffd35e8:	e08f0000 	add	r0, pc, r0
fffd35ec:	eb00055d 	bl	fffd4b68 <LogError>
fffd35f0:	e59f0018 	ldr	r0, [pc, #24]	; fffd3610 <FiqRoutine+0x58>
	//exit (-1);
}
fffd35f4:	e8bd4010 	pop	{r4, lr}
	LOG_ERROR (("'FIQ' event has been triggered at address 0x%08lX. \n",Address));
fffd35f8:	e08f0000 	add	r0, pc, r0
fffd35fc:	ea00052d 	b	fffd4ab8 <LogMessage>
fffd3600:	00008774 	.word	0x00008774
fffd3604:	00008d29 	.word	0x00008d29
fffd3608:	00008d2c 	.word	0x00008d2c
fffd360c:	00008d42 	.word	0x00008d42
fffd3610:	00008f30 	.word	0x00008f30

fffd3614 <DataAbortRoutine>:
//-------------------------------------------------------------
void DataAbortRoutine (UINT32 Address)
{
	LOG_ERROR (("'Data Abort' event has been triggered at address 0x%08lx. \n",Address));
fffd3614:	e59f3044 	ldr	r3, [pc, #68]	; fffd3660 <DataAbortRoutine+0x4c>
fffd3618:	e3a02026 	mov	r2, #38	; 0x26
{
fffd361c:	e92d4010 	push	{r4, lr}
fffd3620:	e1a04000 	mov	r4, r0
	LOG_ERROR (("'Data Abort' event has been triggered at address 0x%08lx. \n",Address));
fffd3624:	e59f1038 	ldr	r1, [pc, #56]	; fffd3664 <DataAbortRoutine+0x50>
fffd3628:	e08f3003 	add	r3, pc, r3
fffd362c:	e59f0034 	ldr	r0, [pc, #52]	; fffd3668 <DataAbortRoutine+0x54>
fffd3630:	e283300b 	add	r3, r3, #11
fffd3634:	e08f1001 	add	r1, pc, r1
fffd3638:	e08f0000 	add	r0, pc, r0
fffd363c:	eb000549 	bl	fffd4b68 <LogError>
fffd3640:	e59f0024 	ldr	r0, [pc, #36]	; fffd366c <DataAbortRoutine+0x58>
fffd3644:	e1a01004 	mov	r1, r4
fffd3648:	e08f0000 	add	r0, pc, r0
fffd364c:	eb000545 	bl	fffd4b68 <LogError>
fffd3650:	e59f0018 	ldr	r0, [pc, #24]	; fffd3670 <DataAbortRoutine+0x5c>
	//exit (-1);
}
fffd3654:	e8bd4010 	pop	{r4, lr}
	LOG_ERROR (("'Data Abort' event has been triggered at address 0x%08lx. \n",Address));
fffd3658:	e08f0000 	add	r0, pc, r0
fffd365c:	ea000515 	b	fffd4ab8 <LogMessage>
fffd3660:	0000871c 	.word	0x0000871c
fffd3664:	00008cc9 	.word	0x00008cc9
fffd3668:	00008ccc 	.word	0x00008ccc
fffd366c:	00008d17 	.word	0x00008d17
fffd3670:	00008ed0 	.word	0x00008ed0

fffd3674 <UndefinedInstructionRoutine>:
//-------------------------------------------------------------
void UndefinedInstructionRoutine (UINT32 Address)
{
	LOG_ERROR (("'Undefined Instruction' event has been triggered at address 0x%08lx in ARM state or 0x%08lx in Thumb state. \n",Address-4,Address-2));
fffd3674:	e59f3048 	ldr	r3, [pc, #72]	; fffd36c4 <UndefinedInstructionRoutine+0x50>
fffd3678:	e3a0202c 	mov	r2, #44	; 0x2c
{
fffd367c:	e92d4010 	push	{r4, lr}
fffd3680:	e1a04000 	mov	r4, r0
	LOG_ERROR (("'Undefined Instruction' event has been triggered at address 0x%08lx in ARM state or 0x%08lx in Thumb state. \n",Address-4,Address-2));
fffd3684:	e59f103c 	ldr	r1, [pc, #60]	; fffd36c8 <UndefinedInstructionRoutine+0x54>
fffd3688:	e08f3003 	add	r3, pc, r3
fffd368c:	e59f0038 	ldr	r0, [pc, #56]	; fffd36cc <UndefinedInstructionRoutine+0x58>
fffd3690:	e283301c 	add	r3, r3, #28
fffd3694:	e08f1001 	add	r1, pc, r1
fffd3698:	e08f0000 	add	r0, pc, r0
fffd369c:	eb000531 	bl	fffd4b68 <LogError>
fffd36a0:	e59f0028 	ldr	r0, [pc, #40]	; fffd36d0 <UndefinedInstructionRoutine+0x5c>
fffd36a4:	e2442002 	sub	r2, r4, #2
fffd36a8:	e2441004 	sub	r1, r4, #4
fffd36ac:	e08f0000 	add	r0, pc, r0
fffd36b0:	eb00052c 	bl	fffd4b68 <LogError>
fffd36b4:	e59f0018 	ldr	r0, [pc, #24]	; fffd36d4 <UndefinedInstructionRoutine+0x60>
	//exit (-1);
}
fffd36b8:	e8bd4010 	pop	{r4, lr}
	LOG_ERROR (("'Undefined Instruction' event has been triggered at address 0x%08lx in ARM state or 0x%08lx in Thumb state. \n",Address-4,Address-2));
fffd36bc:	e08f0000 	add	r0, pc, r0
fffd36c0:	ea0004fc 	b	fffd4ab8 <LogMessage>
fffd36c4:	000086bc 	.word	0x000086bc
fffd36c8:	00008c69 	.word	0x00008c69
fffd36cc:	00008c6c 	.word	0x00008c6c
fffd36d0:	00008cef 	.word	0x00008cef
fffd36d4:	00008e6c 	.word	0x00008e6c

fffd36d8 <PrefetchAbortRoutine>:
//-------------------------------------------------------------
void PrefetchAbortRoutine (UINT32 Address)
{
	LOG_ERROR (("'Prefetch Abort' event has been triggered at address 0x%08lx. \n",Address));
fffd36d8:	e59f3044 	ldr	r3, [pc, #68]	; fffd3724 <PrefetchAbortRoutine+0x4c>
fffd36dc:	e3a02032 	mov	r2, #50	; 0x32
{
fffd36e0:	e92d4010 	push	{r4, lr}
fffd36e4:	e1a04000 	mov	r4, r0
	LOG_ERROR (("'Prefetch Abort' event has been triggered at address 0x%08lx. \n",Address));
fffd36e8:	e59f1038 	ldr	r1, [pc, #56]	; fffd3728 <PrefetchAbortRoutine+0x50>
fffd36ec:	e08f3003 	add	r3, pc, r3
fffd36f0:	e59f0034 	ldr	r0, [pc, #52]	; fffd372c <PrefetchAbortRoutine+0x54>
fffd36f4:	e2833038 	add	r3, r3, #56	; 0x38
fffd36f8:	e08f1001 	add	r1, pc, r1
fffd36fc:	e08f0000 	add	r0, pc, r0
fffd3700:	eb000518 	bl	fffd4b68 <LogError>
fffd3704:	e59f0024 	ldr	r0, [pc, #36]	; fffd3730 <PrefetchAbortRoutine+0x58>
fffd3708:	e1a01004 	mov	r1, r4
fffd370c:	e08f0000 	add	r0, pc, r0
fffd3710:	eb000514 	bl	fffd4b68 <LogError>
fffd3714:	e59f0018 	ldr	r0, [pc, #24]	; fffd3734 <PrefetchAbortRoutine+0x5c>
	//exit (-1);
}
fffd3718:	e8bd4010 	pop	{r4, lr}
	LOG_ERROR (("'Prefetch Abort' event has been triggered at address 0x%08lx. \n",Address));
fffd371c:	e08f0000 	add	r0, pc, r0
fffd3720:	ea0004e4 	b	fffd4ab8 <LogMessage>
fffd3724:	00008658 	.word	0x00008658
fffd3728:	00008c05 	.word	0x00008c05
fffd372c:	00008c08 	.word	0x00008c08
fffd3730:	00008cfd 	.word	0x00008cfd
fffd3734:	00008e0c 	.word	0x00008e0c

fffd3738 <SvcRoutine>:
//-------------------------------------------------------------
void SvcRoutine (UINT32 Address)
{
	LOG_ERROR (("'SVC' event has been triggered from address 0x%08lx. \n",Address));
fffd3738:	e59f3044 	ldr	r3, [pc, #68]	; fffd3784 <SvcRoutine+0x4c>
fffd373c:	e3a02038 	mov	r2, #56	; 0x38
{
fffd3740:	e92d4010 	push	{r4, lr}
fffd3744:	e1a04000 	mov	r4, r0
	LOG_ERROR (("'SVC' event has been triggered from address 0x%08lx. \n",Address));
fffd3748:	e59f1038 	ldr	r1, [pc, #56]	; fffd3788 <SvcRoutine+0x50>
fffd374c:	e08f3003 	add	r3, pc, r3
fffd3750:	e59f0034 	ldr	r0, [pc, #52]	; fffd378c <SvcRoutine+0x54>
fffd3754:	e283304d 	add	r3, r3, #77	; 0x4d
fffd3758:	e08f1001 	add	r1, pc, r1
fffd375c:	e08f0000 	add	r0, pc, r0
fffd3760:	eb000500 	bl	fffd4b68 <LogError>
fffd3764:	e59f0024 	ldr	r0, [pc, #36]	; fffd3790 <SvcRoutine+0x58>
fffd3768:	e1a01004 	mov	r1, r4
fffd376c:	e08f0000 	add	r0, pc, r0
fffd3770:	eb0004fc 	bl	fffd4b68 <LogError>
fffd3774:	e59f0018 	ldr	r0, [pc, #24]	; fffd3794 <SvcRoutine+0x5c>
	//exit (-1);
}
fffd3778:	e8bd4010 	pop	{r4, lr}
	LOG_ERROR (("'SVC' event has been triggered from address 0x%08lx. \n",Address));
fffd377c:	e08f0000 	add	r0, pc, r0
fffd3780:	ea0004cc 	b	fffd4ab8 <LogMessage>
fffd3784:	000085f8 	.word	0x000085f8
fffd3788:	00008ba5 	.word	0x00008ba5
fffd378c:	00008ba8 	.word	0x00008ba8
fffd3790:	00008cdd 	.word	0x00008cdd
fffd3794:	00008dac 	.word	0x00008dac

fffd3798 <Check_BMC_PLL>:

//--------------------------------------------------------------------
// 16/02/2015: Fixed PLL function; the function always returned "PLL in reset"
// 08/04/2015: Fixed PLL_FOUT calculation so it will not overflow DWORD.
UINT32 Check_BMC_PLL (DWORD PllCon, DWORD PllIndex)
{
fffd3798:	e92d4070 	push	{r4, r5, r6, lr}
	DWORD PLL_FBDV,PLL_OTDV1, PLL_OTDV2, PLL_INDV,PLL_FOUT;

	LogMessage ("  * PLLCON%u = 0x%08lX. ",PllIndex,PllCon);
fffd379c:	e1a02000 	mov	r2, r0
{
fffd37a0:	e1a04000 	mov	r4, r0
	LogMessage ("  * PLLCON%u = 0x%08lX. ",PllIndex,PllCon);
fffd37a4:	e59f00bc 	ldr	r0, [pc, #188]	; fffd3868 <Check_BMC_PLL+0xd0>
{
fffd37a8:	e1a06001 	mov	r6, r1
	LogMessage ("  * PLLCON%u = 0x%08lX. ",PllIndex,PllCon);
fffd37ac:	e08f0000 	add	r0, pc, r0
fffd37b0:	eb0004c0 	bl	fffd4ab8 <LogMessage>

	if ( ((PllCon>>12)&0x1) ==1 )
fffd37b4:	e3140a01 	tst	r4, #4096	; 0x1000
fffd37b8:	0a000005 	beq	fffd37d4 <Check_BMC_PLL+0x3c>
	{
		LogWarning (" (PLL is in Power-Down).\n");
fffd37bc:	e59f00a8 	ldr	r0, [pc, #168]	; fffd386c <Check_BMC_PLL+0xd4>
		return (0);
fffd37c0:	e3a05000 	mov	r5, #0
		LogWarning (" (PLL is in Power-Down).\n");
fffd37c4:	e08f0000 	add	r0, pc, r0
fffd37c8:	eb0004f6 	bl	fffd4ba8 <LogWarning>
		LogPass ("locked");

	LogMessage (")\n");

	return (PLL_FOUT); // clock in KHz
}
fffd37cc:	e1a00005 	mov	r0, r5
fffd37d0:	e8bd8070 	pop	{r4, r5, r6, pc}
	PLL_OTDV2 = (PllCon >> 13) & 0x7; //  (bits 13..15, 3bit)
fffd37d4:	e7e216d4 	ubfx	r1, r4, #13, #3
	PLL_OTDV1 = (PllCon >> 8) & 0x7; //  (bits 8..10, 3bit)
fffd37d8:	e7e23454 	ubfx	r3, r4, #8, #3
	PLL_FOUT = PLL_FOUT / ( (PLL_OTDV1) * (PLL_OTDV2) * (PLL_INDV) );
fffd37dc:	e0030391 	mul	r3, r1, r3
	PLL_INDV = (PllCon >> 0) & 0x3F; //  (bits 0..5, 6 bits)
fffd37e0:	e204103f 	and	r1, r4, #63	; 0x3f
	PLL_FBDV = (PllCon >> 16) & 0xFFF; //  (bits 16..27, 12bit)
fffd37e4:	e7eb0854 	ubfx	r0, r4, #16, #12
	PLL_FOUT = PLL_FOUT / ( (PLL_OTDV1) * (PLL_OTDV2) * (PLL_INDV) );
fffd37e8:	e0010391 	mul	r1, r1, r3
fffd37ec:	e30631a8 	movw	r3, #25000	; 0x61a8
fffd37f0:	e0000093 	mul	r0, r3, r0
fffd37f4:	fa000753 	blx	fffd5548 <__udivsi3>
	if ((PllIndex==1) && (READ_REG(PDID)!=Poleg_ID_Z1))
fffd37f8:	e3560001 	cmp	r6, #1
	PLL_FOUT = PLL_FOUT / ( (PLL_OTDV1) * (PLL_OTDV2) * (PLL_INDV) );
fffd37fc:	e1a05000 	mov	r5, r0
	if ((PllIndex==1) && (READ_REG(PDID)!=Poleg_ID_Z1))
fffd3800:	1a000004 	bne	fffd3818 <Check_BMC_PLL+0x80>
fffd3804:	e59f3064 	ldr	r3, [pc, #100]	; fffd3870 <Check_BMC_PLL+0xd8>
fffd3808:	e5932000 	ldr	r2, [r3]
fffd380c:	e59f3060 	ldr	r3, [pc, #96]	; fffd3874 <Check_BMC_PLL+0xdc>
fffd3810:	e1520003 	cmp	r2, r3
		PLL_FOUT = PLL_FOUT /2;
fffd3814:	11a050a0 	lsrne	r5, r0, #1
	LogMessage (" (%lu MHz; ",PLL_FOUT/1000/*000*/);
fffd3818:	e3a01ffa 	mov	r1, #1000	; 0x3e8
fffd381c:	e1a00005 	mov	r0, r5
fffd3820:	fa0007e6 	blx	fffd57c0 <__divsi3>
fffd3824:	e1a01000 	mov	r1, r0
fffd3828:	e59f0048 	ldr	r0, [pc, #72]	; fffd3878 <Check_BMC_PLL+0xe0>
fffd382c:	e08f0000 	add	r0, pc, r0
fffd3830:	eb0004a0 	bl	fffd4ab8 <LogMessage>
	if ( ((PllCon>>31)&0x1) == 0 )
fffd3834:	e3540000 	cmp	r4, #0
fffd3838:	ba000006 	blt	fffd3858 <Check_BMC_PLL+0xc0>
		LogWarning ("PLL is not locked");
fffd383c:	e59f0038 	ldr	r0, [pc, #56]	; fffd387c <Check_BMC_PLL+0xe4>
fffd3840:	e08f0000 	add	r0, pc, r0
fffd3844:	eb0004d7 	bl	fffd4ba8 <LogWarning>
	LogMessage (")\n");
fffd3848:	e59f0030 	ldr	r0, [pc, #48]	; fffd3880 <Check_BMC_PLL+0xe8>
fffd384c:	e08f0000 	add	r0, pc, r0
fffd3850:	eb000498 	bl	fffd4ab8 <LogMessage>
	return (PLL_FOUT); // clock in KHz
fffd3854:	eaffffdc 	b	fffd37cc <Check_BMC_PLL+0x34>
		LogPass ("locked");
fffd3858:	e59f0024 	ldr	r0, [pc, #36]	; fffd3884 <Check_BMC_PLL+0xec>
fffd385c:	e08f0000 	add	r0, pc, r0
fffd3860:	eb0004f0 	bl	fffd4c28 <LogPass>
fffd3864:	eafffff7 	b	fffd3848 <Check_BMC_PLL+0xb0>
fffd3868:	00008cd4 	.word	0x00008cd4
fffd386c:	00008cd5 	.word	0x00008cd5
fffd3870:	f0800000 	.word	0xf0800000
fffd3874:	00a92750 	.word	0x00a92750
fffd3878:	00008c87 	.word	0x00008c87
fffd387c:	00008c7f 	.word	0x00008c7f
fffd3880:	00007e5c 	.word	0x00007e5c
fffd3884:	00008c6e 	.word	0x00008c6e

fffd3888 <Check_PWRGD_PS>:


//------------------------------------------------------------------------------
int Check_PWRGD_PS (void)
{
	if (READ_BIT_REG(BPCFMSTAT,3)==0)
fffd3888:	e59f3034 	ldr	r3, [pc, #52]	; fffd38c4 <Check_PWRGD_PS+0x3c>
{
fffd388c:	e92d4010 	push	{r4, lr}
	if (READ_BIT_REG(BPCFMSTAT,3)==0)
fffd3890:	e5d3304c 	ldrb	r3, [r3, #76]	; 0x4c
fffd3894:	e3130008 	tst	r3, #8
fffd3898:	1a000004 	bne	fffd38b0 <Check_PWRGD_PS+0x28>
	{
		LogError (" PWRGD_PS signal is low. Set PWRGD_PS high and try again.");
fffd389c:	e59f0024 	ldr	r0, [pc, #36]	; fffd38c8 <Check_PWRGD_PS+0x40>
fffd38a0:	e08f0000 	add	r0, pc, r0
fffd38a4:	eb0004af 	bl	fffd4b68 <LogError>
		return (-1);
fffd38a8:	e3e00000 	mvn	r0, #0
fffd38ac:	e8bd8010 	pop	{r4, pc}
	}
	LogPass ("> PWRGD_PS signal is high.\n");
fffd38b0:	e59f0014 	ldr	r0, [pc, #20]	; fffd38cc <Check_PWRGD_PS+0x44>
fffd38b4:	e08f0000 	add	r0, pc, r0
fffd38b8:	eb0004da 	bl	fffd4c28 <LogPass>
	return (0);
fffd38bc:	e3a00000 	mov	r0, #0
}
fffd38c0:	e8bd8010 	pop	{r4, pc}
fffd38c4:	f0007000 	.word	0xf0007000
fffd38c8:	00008c31 	.word	0x00008c31
fffd38cc:	00008c57 	.word	0x00008c57

fffd38d0 <dumpGFX_InfoRegs>:



//-------------------------------------------------------------
void dumpGFX_InfoRegs (DWORD *hRes, DWORD *vRes, DWORD *colorDepth, DWORD *pll_freq)
{
fffd38d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd38d4:	e1a05000 	mov	r5, r0
	int i;
	const DWORD COLOR_DEPTH_MAPPING[8] = {8, 15, 16, 24, 0, 0, 0, 32};
fffd38d8:	e59f9190 	ldr	r9, [pc, #400]	; fffd3a70 <dumpGFX_InfoRegs+0x1a0>
{
fffd38dc:	e1a06001 	mov	r6, r1
fffd38e0:	e1a08002 	mov	r8, r2
fffd38e4:	e1a07003 	mov	r7, r3
fffd38e8:	e24dd024 	sub	sp, sp, #36	; 0x24

	*hRes = 0; *vRes = 0; *colorDepth = 0; *pll_freq = 0;
fffd38ec:	e3a04000 	mov	r4, #0
	const DWORD COLOR_DEPTH_MAPPING[8] = {8, 15, 16, 24, 0, 0, 0, 32};
fffd38f0:	e08f9009 	add	r9, pc, r9
fffd38f4:	e1a0c00d 	mov	r12, sp
fffd38f8:	e289e058 	add	lr, r9, #88	; 0x58
	*hRes = 0; *vRes = 0; *colorDepth = 0; *pll_freq = 0;
fffd38fc:	e5854000 	str	r4, [r5]
	const DWORD COLOR_DEPTH_MAPPING[8] = {8, 15, 16, 24, 0, 0, 0, 32};
fffd3900:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}

	LogMessage ("\n\n");
	LogHeader("Dump Graphics Core (GFX) Information Registers (Read-Only)");
	for (i = 0; i < (NUM_OF_GFXI_REGS); ++i)
	{
		LogMessage("> %s = 0x%02X\n", GFXI_Regs[i].Name, (HW_BYTE(GFXI_Regs[i].address)));
fffd3904:	e289b078 	add	r11, r9, #120	; 0x78
	*hRes = 0; *vRes = 0; *colorDepth = 0; *pll_freq = 0;
fffd3908:	e5864000 	str	r4, [r6]
		LogMessage("> %s = 0x%02X\n", GFXI_Regs[i].Name, (HW_BYTE(GFXI_Regs[i].address)));
fffd390c:	e59fa160 	ldr	r10, [pc, #352]	; fffd3a74 <dumpGFX_InfoRegs+0x1a4>
	const DWORD COLOR_DEPTH_MAPPING[8] = {8, 15, 16, 24, 0, 0, 0, 32};
fffd3910:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
	*hRes = 0; *vRes = 0; *colorDepth = 0; *pll_freq = 0;
fffd3914:	e5884000 	str	r4, [r8]
		LogMessage("> %s = 0x%02X\n", GFXI_Regs[i].Name, (HW_BYTE(GFXI_Regs[i].address)));
fffd3918:	e08fa00a 	add	r10, pc, r10
	const DWORD COLOR_DEPTH_MAPPING[8] = {8, 15, 16, 24, 0, 0, 0, 32};
fffd391c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
	*hRes = 0; *vRes = 0; *colorDepth = 0; *pll_freq = 0;
fffd3920:	e5874000 	str	r4, [r7]
	const DWORD COLOR_DEPTH_MAPPING[8] = {8, 15, 16, 24, 0, 0, 0, 32};
fffd3924:	e88c000f 	stm	r12, {r0, r1, r2, r3}
	LogMessage ("\n\n");
fffd3928:	e59f0148 	ldr	r0, [pc, #328]	; fffd3a78 <dumpGFX_InfoRegs+0x1a8>
fffd392c:	e08f0000 	add	r0, pc, r0
fffd3930:	eb000460 	bl	fffd4ab8 <LogMessage>
	LogHeader("Dump Graphics Core (GFX) Information Registers (Read-Only)");
fffd3934:	e59f0140 	ldr	r0, [pc, #320]	; fffd3a7c <dumpGFX_InfoRegs+0x1ac>
fffd3938:	e08f0000 	add	r0, pc, r0
fffd393c:	eb0004c9 	bl	fffd4c68 <LogHeader>
		LogMessage("> %s = 0x%02X\n", GFXI_Regs[i].Name, (HW_BYTE(GFXI_Regs[i].address)));
fffd3940:	e794300b 	ldr	r3, [r4, r11]
fffd3944:	e289107c 	add	r1, r9, #124	; 0x7c
fffd3948:	e0811004 	add	r1, r1, r4
fffd394c:	e1a0000a 	mov	r0, r10
fffd3950:	e2844024 	add	r4, r4, #36	; 0x24
fffd3954:	e5d32000 	ldrb	r2, [r3]
fffd3958:	eb000456 	bl	fffd4ab8 <LogMessage>
	for (i = 0; i < (NUM_OF_GFXI_REGS); ++i)
fffd395c:	e3003534 	movw	r3, #1332	; 0x534
fffd3960:	e1540003 	cmp	r4, r3
fffd3964:	1afffff5 	bne	fffd3940 <dumpGFX_InfoRegs+0x70>
	}

	LogMessage ("\n");
fffd3968:	e59f0110 	ldr	r0, [pc, #272]	; fffd3a80 <dumpGFX_InfoRegs+0x1b0>
	LogMessage("Parsing:\n");

	// calculate pixel clock PLL:
	DWORD FeedbackDivider = (WORD) (READ_BIT_REG(GPLLST,6) << 9) | (READ_BIT_REG(GPLLINDI,7) << 8) | (READ_REG(GPLLFBDI));
fffd396c:	e59f4110 	ldr	r4, [pc, #272]	; fffd3a84 <dumpGFX_InfoRegs+0x1b4>
	LogMessage ("\n");
fffd3970:	e08f0000 	add	r0, pc, r0
fffd3974:	eb00044f 	bl	fffd4ab8 <LogMessage>
	LogMessage("Parsing:\n");
fffd3978:	e59f0108 	ldr	r0, [pc, #264]	; fffd3a88 <dumpGFX_InfoRegs+0x1b8>
fffd397c:	e08f0000 	add	r0, pc, r0
fffd3980:	eb00044c 	bl	fffd4ab8 <LogMessage>
	DWORD FeedbackDivider = (WORD) (READ_BIT_REG(GPLLST,6) << 9) | (READ_BIT_REG(GPLLINDI,7) << 8) | (READ_REG(GPLLFBDI));
fffd3984:	e5d40048 	ldrb	r0, [r4, #72]	; 0x48
fffd3988:	e5d43040 	ldrb	r3, [r4, #64]	; 0x40
fffd398c:	e5d4c044 	ldrb	r12, [r4, #68]	; 0x44
	BYTE InputDivider =(BYTE) READ_REG(GPLLINDI) & FIELD_MASK(0, 5);
fffd3990:	e5d42040 	ldrb	r2, [r4, #64]	; 0x40
	DWORD FeedbackDivider = (WORD) (READ_BIT_REG(GPLLST,6) << 9) | (READ_BIT_REG(GPLLINDI,7) << 8) | (READ_REG(GPLLFBDI));
fffd3994:	e1a00180 	lsl	r0, r0, #3
fffd3998:	e1a033a3 	lsr	r3, r3, #7
fffd399c:	e2000c02 	and	r0, r0, #512	; 0x200
fffd39a0:	e18cc403 	orr	r12, r12, r3, lsl #8
	BYTE OutputDivider1 = GET_FIELD_REG(GPLLST, 0 , 2);
fffd39a4:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
	BYTE OutputDivider2 = GET_FIELD_REG(GPLLST, 3 , 5);
fffd39a8:	e5d41048 	ldrb	r1, [r4, #72]	; 0x48

	if (FeedbackDivider && InputDivider && OutputDivider1 && OutputDivider2)
fffd39ac:	e190000c 	orrs	r0, r0, r12
fffd39b0:	e202c03f 	and	r12, r2, #63	; 0x3f
fffd39b4:	13a0e001 	movne	lr, #1
fffd39b8:	03a0e000 	moveq	lr, #0
fffd39bc:	e212203f 	ands	r2, r2, #63	; 0x3f
	BYTE OutputDivider1 = GET_FIELD_REG(GPLLST, 0 , 2);
fffd39c0:	e6ef3073 	uxtb	r3, r3
	if (FeedbackDivider && InputDivider && OutputDivider1 && OutputDivider2)
fffd39c4:	11a0200e 	movne	r2, lr
	BYTE OutputDivider2 = GET_FIELD_REG(GPLLST, 3 , 5);
fffd39c8:	e6ef1071 	uxtb	r1, r1
	if (FeedbackDivider && InputDivider && OutputDivider1 && OutputDivider2)
fffd39cc:	e3520000 	cmp	r2, #0
fffd39d0:	0a00000d 	beq	fffd3a0c <dumpGFX_InfoRegs+0x13c>
	BYTE OutputDivider2 = GET_FIELD_REG(GPLLST, 3 , 5);
fffd39d4:	e7e221d1 	ubfx	r2, r1, #3, #3
	if (FeedbackDivider && InputDivider && OutputDivider1 && OutputDivider2)
fffd39d8:	e2031007 	and	r1, r3, #7
fffd39dc:	e292e000 	adds	lr, r2, #0
fffd39e0:	13a0e001 	movne	lr, #1
fffd39e4:	e2133007 	ands	r3, r3, #7
fffd39e8:	11a0300e 	movne	r3, lr
fffd39ec:	e3530000 	cmp	r3, #0
fffd39f0:	0a000005 	beq	fffd3a0c <dumpGFX_InfoRegs+0x13c>
	{
		*pll_freq = (25 * (FeedbackDivider)) / ((DWORD) InputDivider * (DWORD) OutputDivider1 * (DWORD) OutputDivider2) ;
fffd39f4:	e161018c 	smulbb	r1, r12, r1
fffd39f8:	e3a03019 	mov	r3, #25
fffd39fc:	e0000093 	mul	r0, r3, r0
fffd3a00:	e0010192 	mul	r1, r2, r1
fffd3a04:	fa0006cf 	blx	fffd5548 <__udivsi3>
fffd3a08:	e5870000 	str	r0, [r7]
	}

	LogMessage("> Calculated PLLG output: %u[MHz] (rounded)\n", *pll_freq);
fffd3a0c:	e59f0078 	ldr	r0, [pc, #120]	; fffd3a8c <dumpGFX_InfoRegs+0x1bc>
fffd3a10:	e5971000 	ldr	r1, [r7]
fffd3a14:	e08f0000 	add	r0, pc, r0
fffd3a18:	eb000426 	bl	fffd4ab8 <LogMessage>

	*hRes = (((DWORD) READ_REG(HVCNTH) << 8) | ((DWORD) READ_REG(HVCNTL))) + 1;
fffd3a1c:	e5d42014 	ldrb	r2, [r4, #20]
fffd3a20:	e5d43010 	ldrb	r3, [r4, #16]
	*vRes = (((DWORD) READ_REG(VVCNTH) << 8) | ((DWORD) READ_REG(VVCNTL)));
	*colorDepth = COLOR_DEPTH_MAPPING[READ_REG(COLDEP)];
	LogMessage("> Resolution: %ux%ux%ubpp\n", *hRes, *vRes, *colorDepth);
fffd3a24:	e59f0064 	ldr	r0, [pc, #100]	; fffd3a90 <dumpGFX_InfoRegs+0x1c0>
	*hRes = (((DWORD) READ_REG(HVCNTH) << 8) | ((DWORD) READ_REG(HVCNTL))) + 1;
fffd3a28:	e1833402 	orr	r3, r3, r2, lsl #8
	LogMessage("> Resolution: %ux%ux%ubpp\n", *hRes, *vRes, *colorDepth);
fffd3a2c:	e08f0000 	add	r0, pc, r0
	*hRes = (((DWORD) READ_REG(HVCNTH) << 8) | ((DWORD) READ_REG(HVCNTL))) + 1;
fffd3a30:	e2833001 	add	r3, r3, #1
fffd3a34:	e5853000 	str	r3, [r5]
	*vRes = (((DWORD) READ_REG(VVCNTH) << 8) | ((DWORD) READ_REG(VVCNTL)));
fffd3a38:	e5d42024 	ldrb	r2, [r4, #36]	; 0x24
fffd3a3c:	e5d43020 	ldrb	r3, [r4, #32]
fffd3a40:	e1833402 	orr	r3, r3, r2, lsl #8
	*colorDepth = COLOR_DEPTH_MAPPING[READ_REG(COLDEP)];
fffd3a44:	e28d2020 	add	r2, sp, #32
	*vRes = (((DWORD) READ_REG(VVCNTH) << 8) | ((DWORD) READ_REG(VVCNTL)));
fffd3a48:	e5863000 	str	r3, [r6]
	*colorDepth = COLOR_DEPTH_MAPPING[READ_REG(COLDEP)];
fffd3a4c:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
fffd3a50:	e0823103 	add	r3, r2, r3, lsl #2
fffd3a54:	e5133020 	ldr	r3, [r3, #-32]	; 0xffffffe0
fffd3a58:	e5883000 	str	r3, [r8]
	LogMessage("> Resolution: %ux%ux%ubpp\n", *hRes, *vRes, *colorDepth);
fffd3a5c:	e5962000 	ldr	r2, [r6]
fffd3a60:	e5951000 	ldr	r1, [r5]

	
}
fffd3a64:	e28dd024 	add	sp, sp, #36	; 0x24
fffd3a68:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	LogMessage("> Resolution: %ux%ux%ubpp\n", *hRes, *vRes, *colorDepth);
fffd3a6c:	ea000411 	b	fffd4ab8 <LogMessage>
fffd3a70:	00008454 	.word	0x00008454
fffd3a74:	00008c4d 	.word	0x00008c4d
fffd3a78:	00008bfb 	.word	0x00008bfb
fffd3a7c:	00008bf2 	.word	0x00008bf2
fffd3a80:	00008bb8 	.word	0x00008bb8
fffd3a84:	f000e000 	.word	0xf000e000
fffd3a88:	00008bf8 	.word	0x00008bf8
fffd3a8c:	00008b6a 	.word	0x00008b6a
fffd3a90:	00008b7f 	.word	0x00008b7f

fffd3a94 <main_menu>:
//-------------------------------------------------------------------------------------------------------

int main_menu (void)
{
fffd3a94:	e59f32f0 	ldr	r3, [pc, #752]	; fffd3d8c <main_menu+0x2f8>
	DWORD hRes, vRes, colorDepth, pll_freq;
	int err = 0;
	//---------------------------------------
	// init global
	GFX_IsPllDebug_g = FALSE;
fffd3a98:	e59f22f0 	ldr	r2, [pc, #752]	; fffd3d90 <main_menu+0x2fc>
{
fffd3a9c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
fffd3aa0:	e24dd014 	sub	sp, sp, #20
	//---------------------------------------

	LogMessage ("> INTCR = 0x%08lx \n", READ_REG(INTCR));
fffd3aa4:	e59f42e8 	ldr	r4, [pc, #744]	; fffd3d94 <main_menu+0x300>
{
fffd3aa8:	e08f3003 	add	r3, pc, r3
	LogMessage ("> INTCR = 0x%08lx \n", READ_REG(INTCR));
fffd3aac:	e59f02e4 	ldr	r0, [pc, #740]	; fffd3d98 <main_menu+0x304>
	GFX_IsPllDebug_g = FALSE;
fffd3ab0:	e7933002 	ldr	r3, [r3, r2]
fffd3ab4:	e3a02000 	mov	r2, #0
	LogMessage ("> INTCR = 0x%08lx \n", READ_REG(INTCR));
fffd3ab8:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
fffd3abc:	e08f0000 	add	r0, pc, r0

	SET_BIT_REG(INTCR2, 0);
	Sleep (1000);
	SET_BIT_REG(IPSRST2, 10);
fffd3ac0:	e59f52d4 	ldr	r5, [pc, #724]	; fffd3d9c <main_menu+0x308>
	GFX_IsPllDebug_g = FALSE;
fffd3ac4:	e5832000 	str	r2, [r3]
	LogMessage ("> INTCR = 0x%08lx \n", READ_REG(INTCR));
fffd3ac8:	eb0003fa 	bl	fffd4ab8 <LogMessage>
	SET_BIT_REG(INTCR2, 0);
fffd3acc:	e5943060 	ldr	r3, [r4, #96]	; 0x60
	Sleep (1000);
fffd3ad0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	SET_BIT_REG(INTCR2, 0);
fffd3ad4:	e3833001 	orr	r3, r3, #1
fffd3ad8:	e5843060 	str	r3, [r4, #96]	; 0x60
	Sleep (1000);
fffd3adc:	eb00053e 	bl	fffd4fdc <Sleep>
	SET_BIT_REG(IPSRST2, 10);
fffd3ae0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
	Sleep (1000);
fffd3ae4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	SET_BIT_REG(IPSRST2, 10);
fffd3ae8:	e3833b01 	orr	r3, r3, #1024	; 0x400
fffd3aec:	e5853024 	str	r3, [r5, #36]	; 0x24
	Sleep (1000);
fffd3af0:	eb000539 	bl	fffd4fdc <Sleep>


	LogMessage (" Release PCI reset (forced off for Hostless mode or when Host is powered-down).\n");
fffd3af4:	e59f02a4 	ldr	r0, [pc, #676]	; fffd3da0 <main_menu+0x30c>
fffd3af8:	e08f0000 	add	r0, pc, r0
fffd3afc:	eb0003ed 	bl	fffd4ab8 <LogMessage>
	if (!(Check_PWRGD_PS() != 0)) {
fffd3b00:	ebffff60 	bl	fffd3888 <Check_PWRGD_PS>
fffd3b04:	e3500000 	cmp	r0, #0
fffd3b08:	1a000005 	bne	fffd3b24 <main_menu+0x90>
		SET_BIT_REG(INTCR3, 30);
fffd3b0c:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
		LogMessage ("> Released internal nPCIRST. Reset is forced off. The input level of nPCIRST and the PCI Express reference clock doesn't affect the operation of PCI devices.\n");
fffd3b10:	e59f028c 	ldr	r0, [pc, #652]	; fffd3da4 <main_menu+0x310>
		SET_BIT_REG(INTCR3, 30);
fffd3b14:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
fffd3b18:	e584309c 	str	r3, [r4, #156]	; 0x9c
		LogMessage ("> Released internal nPCIRST. Reset is forced off. The input level of nPCIRST and the PCI Express reference clock doesn't affect the operation of PCI devices.\n");
fffd3b1c:	e08f0000 	add	r0, pc, r0
fffd3b20:	eb0003e4 	bl	fffd4ab8 <LogMessage>
	}

	Sleep (1000);
fffd3b24:	e3a00ffa 	mov	r0, #1000	; 0x3e8
fffd3b28:	eb00052b 	bl	fffd4fdc <Sleep>

	LogMessage ("Select DAC2. \n");
fffd3b2c:	e59f0274 	ldr	r0, [pc, #628]	; fffd3da8 <main_menu+0x314>
fffd3b30:	e08f0000 	add	r0, pc, r0
fffd3b34:	eb0003df 	bl	fffd4ab8 <LogMessage>
	if (READ_BIT_REG (MFSEL3,22)!=0)
fffd3b38:	e5943064 	ldr	r3, [r4, #100]	; 0x64
fffd3b3c:	e3130501 	tst	r3, #4194304	; 0x400000
fffd3b40:	0a000041 	beq	fffd3c4c <main_menu+0x1b8>
	{
		LogWarning("> Clear GPOCSEL bit. Select VSYNC2, HSYNC2, DDC2SCL, DDC2SDA. \n");
fffd3b44:	e59f0260 	ldr	r0, [pc, #608]	; fffd3dac <main_menu+0x318>
fffd3b48:	e08f0000 	add	r0, pc, r0
fffd3b4c:	eb000415 	bl	fffd4ba8 <LogWarning>
		CLEAR_BIT_REG (MFSEL3, 22);
fffd3b50:	e5943064 	ldr	r3, [r4, #100]	; 0x64
fffd3b54:	e3c33501 	bic	r3, r3, #4194304	; 0x400000
fffd3b58:	e5843064 	str	r3, [r4, #100]	; 0x64
	}
	else
		LogPass("> VSYNC2, HSYNC2, DDC2SCL, DDC2SDA are selected. \n");

	if (READ_FIELD_REG (INTCR,2,10)!=0x1)
fffd3b5c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
fffd3b60:	e7e13553 	ubfx	r3, r3, #10, #2
fffd3b64:	e3530001 	cmp	r3, #1
fffd3b68:	0a00003b 	beq	fffd3c5c <main_menu+0x1c8>
	{
		LogWarning("> Set DACOSOVR to 01b. DAC output is seclected by DACSEL bit. \n");
fffd3b6c:	e59f023c 	ldr	r0, [pc, #572]	; fffd3db0 <main_menu+0x31c>
fffd3b70:	e08f0000 	add	r0, pc, r0
fffd3b74:	eb00040b 	bl	fffd4ba8 <LogWarning>
		WRITE_FIELD_REG (INTCR,2,10,0x1);
fffd3b78:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
fffd3b7c:	e3c33b03 	bic	r3, r3, #3072	; 0xc00
fffd3b80:	e3833b01 	orr	r3, r3, #1024	; 0x400
fffd3b84:	e584303c 	str	r3, [r4, #60]	; 0x3c
	}
	else
		LogPass("> DAC output is seclected by DACSEL bit. \n");

	if (READ_BIT_REG (INTCR,14)!=1)
fffd3b88:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
fffd3b8c:	e3130901 	tst	r3, #16384	; 0x4000
fffd3b90:	1a000035 	bne	fffd3c6c <main_menu+0x1d8>
	{
		LogWarning("> Set DACSEL bit. Select DAC2 output. \n");
fffd3b94:	e59f0218 	ldr	r0, [pc, #536]	; fffd3db4 <main_menu+0x320>
fffd3b98:	e08f0000 	add	r0, pc, r0
fffd3b9c:	eb000401 	bl	fffd4ba8 <LogWarning>
		SET_BIT_REG (INTCR, 14);
fffd3ba0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
fffd3ba4:	e3833901 	orr	r3, r3, #16384	; 0x4000
fffd3ba8:	e584303c 	str	r3, [r4, #60]	; 0x3c
	}
	else
		LogPass("> DAC2 output is selected. \n");

	LogMessage ("> INTCR = 0x%08lx \n", READ_REG(INTCR));
fffd3bac:	e59f0204 	ldr	r0, [pc, #516]	; fffd3db8 <main_menu+0x324>
fffd3bb0:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
fffd3bb4:	e08f0000 	add	r0, pc, r0
fffd3bb8:	eb0003be 	bl	fffd4ab8 <LogMessage>

	Sleep (1000);
fffd3bbc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
fffd3bc0:	eb000505 	bl	fffd4fdc <Sleep>

	LogMessage ("Init GFX (using AHB2PCI bridge) to 1920x1200@16bit \n");
fffd3bc4:	e59f01f0 	ldr	r0, [pc, #496]	; fffd3dbc <main_menu+0x328>
fffd3bc8:	e08f0000 	add	r0, pc, r0
fffd3bcc:	eb0003b9 	bl	fffd4ab8 <LogMessage>
	if (!GFX_ConfigureDisplayTo1920x1200(COLOR_DEPTH_16BIT)) {
fffd3bd0:	e3a00002 	mov	r0, #2
fffd3bd4:	ebfff8cc 	bl	fffd1f0c <GFX_ConfigureDisplayTo1920x1200>
fffd3bd8:	e3500000 	cmp	r0, #0
fffd3bdc:	1a000026 	bne	fffd3c7c <main_menu+0x1e8>
		LogError ("Failed to Init GFX to 1920x1200@16bit \n");
fffd3be0:	e59f01d8 	ldr	r0, [pc, #472]	; fffd3dc0 <main_menu+0x32c>
fffd3be4:	e08f0000 	add	r0, pc, r0
	}
	
	dumpGFX_InfoRegs(&hRes, &vRes, &colorDepth, &pll_freq);
	if ((hRes!=1920) || (vRes!=1200) || (colorDepth!=16) || (pll_freq!=154 )) {
		LogError ("Failed to configure GFX. Check register info.\n");
		err = 2;
fffd3be8:	e3a06002 	mov	r6, #2
		LogError ("Failed to configure GFX. Check register info.\n");
fffd3bec:	eb0003dd 	bl	fffd4b68 <LogError>
	}

	Sleep (1000 * 1000);

exit:
	LogMessage ("Set GFX memory to 0 \n");
fffd3bf0:	e59f01cc 	ldr	r0, [pc, #460]	; fffd3dc4 <main_menu+0x330>
fffd3bf4:	e08f0000 	add	r0, pc, r0
fffd3bf8:	eb0003ae 	bl	fffd4ab8 <LogMessage>
	GFX_ClearMemorySpace(0);
fffd3bfc:	e3a00000 	mov	r0, #0
fffd3c00:	ebfffe5e 	bl	fffd3580 <GFX_ClearMemorySpace>

	CLEAR_BIT_REG(IPSRST2, 10);
fffd3c04:	e5953024 	ldr	r3, [r5, #36]	; 0x24
	Sleep (1000);
fffd3c08:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	CLEAR_BIT_REG(IPSRST2, 10);
fffd3c0c:	e3c33b01 	bic	r3, r3, #1024	; 0x400
fffd3c10:	e5853024 	str	r3, [r5, #36]	; 0x24
	Sleep (1000);
fffd3c14:	eb0004f0 	bl	fffd4fdc <Sleep>
	CLEAR_BIT_REG(INTCR2, 0);
fffd3c18:	e5943060 	ldr	r3, [r4, #96]	; 0x60
	Sleep (1000);
fffd3c1c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	CLEAR_BIT_REG(INTCR2, 0);
fffd3c20:	e3c33001 	bic	r3, r3, #1
fffd3c24:	e5843060 	str	r3, [r4, #96]	; 0x60
	Sleep (1000);
fffd3c28:	eb0004eb 	bl	fffd4fdc <Sleep>
	CLEAR_BIT_REG(INTCR3, 30);
fffd3c2c:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
	Sleep (1000);
fffd3c30:	e3a00ffa 	mov	r0, #1000	; 0x3e8
	CLEAR_BIT_REG(INTCR3, 30);
fffd3c34:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
fffd3c38:	e584309c 	str	r3, [r4, #156]	; 0x9c
	Sleep (1000);
fffd3c3c:	eb0004e6 	bl	fffd4fdc <Sleep>
	return err;
}
fffd3c40:	e1a00006 	mov	r0, r6
fffd3c44:	e28dd014 	add	sp, sp, #20
fffd3c48:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		LogPass("> VSYNC2, HSYNC2, DDC2SCL, DDC2SDA are selected. \n");
fffd3c4c:	e59f0174 	ldr	r0, [pc, #372]	; fffd3dc8 <main_menu+0x334>
fffd3c50:	e08f0000 	add	r0, pc, r0
fffd3c54:	eb0003f3 	bl	fffd4c28 <LogPass>
fffd3c58:	eaffffbf 	b	fffd3b5c <main_menu+0xc8>
		LogPass("> DAC output is seclected by DACSEL bit. \n");
fffd3c5c:	e59f0168 	ldr	r0, [pc, #360]	; fffd3dcc <main_menu+0x338>
fffd3c60:	e08f0000 	add	r0, pc, r0
fffd3c64:	eb0003ef 	bl	fffd4c28 <LogPass>
fffd3c68:	eaffffc6 	b	fffd3b88 <main_menu+0xf4>
		LogPass("> DAC2 output is selected. \n");
fffd3c6c:	e59f015c 	ldr	r0, [pc, #348]	; fffd3dd0 <main_menu+0x33c>
fffd3c70:	e08f0000 	add	r0, pc, r0
fffd3c74:	eb0003eb 	bl	fffd4c28 <LogPass>
fffd3c78:	eaffffcb 	b	fffd3bac <main_menu+0x118>
	dumpGFX_InfoRegs(&hRes, &vRes, &colorDepth, &pll_freq);
fffd3c7c:	e28d900c 	add	r9, sp, #12
fffd3c80:	e28d8008 	add	r8, sp, #8
fffd3c84:	e28d7004 	add	r7, sp, #4
fffd3c88:	e1a0600d 	mov	r6, sp
fffd3c8c:	e1a03009 	mov	r3, r9
fffd3c90:	e1a02008 	mov	r2, r8
fffd3c94:	e1a01007 	mov	r1, r7
fffd3c98:	e1a00006 	mov	r0, r6
fffd3c9c:	ebffff0b 	bl	fffd38d0 <dumpGFX_InfoRegs>
	if ((hRes!=1920) || (vRes!=1200) || (colorDepth!=16) || (pll_freq!=154 )) {
fffd3ca0:	e59d3000 	ldr	r3, [sp]
fffd3ca4:	e3530d1e 	cmp	r3, #1920	; 0x780
fffd3ca8:	1a000008 	bne	fffd3cd0 <main_menu+0x23c>
fffd3cac:	e59d3004 	ldr	r3, [sp, #4]
fffd3cb0:	e3530e4b 	cmp	r3, #1200	; 0x4b0
fffd3cb4:	1a000005 	bne	fffd3cd0 <main_menu+0x23c>
fffd3cb8:	e59d3008 	ldr	r3, [sp, #8]
fffd3cbc:	e3530010 	cmp	r3, #16
fffd3cc0:	1a000002 	bne	fffd3cd0 <main_menu+0x23c>
fffd3cc4:	e59d300c 	ldr	r3, [sp, #12]
fffd3cc8:	e353009a 	cmp	r3, #154	; 0x9a
fffd3ccc:	0a000002 	beq	fffd3cdc <main_menu+0x248>
		LogError ("Failed to configure GFX. Check register info.\n");
fffd3cd0:	e59f00fc 	ldr	r0, [pc, #252]	; fffd3dd4 <main_menu+0x340>
fffd3cd4:	e08f0000 	add	r0, pc, r0
fffd3cd8:	eaffffc2 	b	fffd3be8 <main_menu+0x154>
		LogPass ("GFX configuration succeed.\n");
fffd3cdc:	e59f00f4 	ldr	r0, [pc, #244]	; fffd3dd8 <main_menu+0x344>
fffd3ce0:	e08f0000 	add	r0, pc, r0
fffd3ce4:	eb0003cf 	bl	fffd4c28 <LogPass>
	Sleep (1000 * 1000);
fffd3ce8:	e59f00ec 	ldr	r0, [pc, #236]	; fffd3ddc <main_menu+0x348>
fffd3cec:	eb0004ba 	bl	fffd4fdc <Sleep>
	LogMessage ("Init GFX (using AHB2PCI bridge) to 1024x768@16bit \n");
fffd3cf0:	e59f00e8 	ldr	r0, [pc, #232]	; fffd3de0 <main_menu+0x34c>
fffd3cf4:	e08f0000 	add	r0, pc, r0
fffd3cf8:	eb00036e 	bl	fffd4ab8 <LogMessage>
	if (!GFX_ConfigureDisplayTo1024x768(COLOR_DEPTH_16BIT)){
fffd3cfc:	e3a00002 	mov	r0, #2
fffd3d00:	ebfff2ee 	bl	fffd08c0 <GFX_ConfigureDisplayTo1024x768>
fffd3d04:	e3500000 	cmp	r0, #0
fffd3d08:	1a000004 	bne	fffd3d20 <main_menu+0x28c>
		LogError ("Failed to Init GFX to 1024x768@16bit\n");
fffd3d0c:	e59f00d0 	ldr	r0, [pc, #208]	; fffd3de4 <main_menu+0x350>
fffd3d10:	e08f0000 	add	r0, pc, r0
		LogError ("Failed to configure GFX. Check register info.\n");
fffd3d14:	eb000393 	bl	fffd4b68 <LogError>
		err = 1;
fffd3d18:	e3a06001 	mov	r6, #1
		goto exit;
fffd3d1c:	eaffffb3 	b	fffd3bf0 <main_menu+0x15c>
	dumpGFX_InfoRegs(&hRes, &vRes, &colorDepth, &pll_freq);
fffd3d20:	e1a03009 	mov	r3, r9
fffd3d24:	e1a02008 	mov	r2, r8
fffd3d28:	e1a01007 	mov	r1, r7
fffd3d2c:	e1a00006 	mov	r0, r6
fffd3d30:	ebfffee6 	bl	fffd38d0 <dumpGFX_InfoRegs>
	if ((hRes!=1024) || (vRes!=768) || (colorDepth!=16) || (pll_freq!=65)) {
fffd3d34:	e59d3000 	ldr	r3, [sp]
fffd3d38:	e3530b01 	cmp	r3, #1024	; 0x400
fffd3d3c:	1a000008 	bne	fffd3d64 <main_menu+0x2d0>
fffd3d40:	e59d3004 	ldr	r3, [sp, #4]
fffd3d44:	e3530c03 	cmp	r3, #768	; 0x300
fffd3d48:	1a000005 	bne	fffd3d64 <main_menu+0x2d0>
fffd3d4c:	e59d3008 	ldr	r3, [sp, #8]
fffd3d50:	e3530010 	cmp	r3, #16
fffd3d54:	1a000002 	bne	fffd3d64 <main_menu+0x2d0>
fffd3d58:	e59d300c 	ldr	r3, [sp, #12]
fffd3d5c:	e3530041 	cmp	r3, #65	; 0x41
fffd3d60:	0a000002 	beq	fffd3d70 <main_menu+0x2dc>
		LogError ("Failed to configure GFX. Check register info.\n");
fffd3d64:	e59f007c 	ldr	r0, [pc, #124]	; fffd3de8 <main_menu+0x354>
fffd3d68:	e08f0000 	add	r0, pc, r0
fffd3d6c:	eaffffe8 	b	fffd3d14 <main_menu+0x280>
		LogPass ("GFX configuration succeed.\n");
fffd3d70:	e59f0074 	ldr	r0, [pc, #116]	; fffd3dec <main_menu+0x358>
	int err = 0;
fffd3d74:	e3a06000 	mov	r6, #0
		LogPass ("GFX configuration succeed.\n");
fffd3d78:	e08f0000 	add	r0, pc, r0
fffd3d7c:	eb0003a9 	bl	fffd4c28 <LogPass>
	Sleep (1000 * 1000);
fffd3d80:	e59f0054 	ldr	r0, [pc, #84]	; fffd3ddc <main_menu+0x348>
fffd3d84:	eb000494 	bl	fffd4fdc <Sleep>
fffd3d88:	eaffff98 	b	fffd3bf0 <main_menu+0x15c>
fffd3d8c:	00009774 	.word	0x00009774
fffd3d90:	00000030 	.word	0x00000030
fffd3d94:	f0800000 	.word	0xf0800000
fffd3d98:	00008b0a 	.word	0x00008b0a
fffd3d9c:	f0801000 	.word	0xf0801000
fffd3da0:	00008ae2 	.word	0x00008ae2
fffd3da4:	00008b0f 	.word	0x00008b0f
fffd3da8:	00008b9a 	.word	0x00008b9a
fffd3dac:	00008b91 	.word	0x00008b91
fffd3db0:	00008bdc 	.word	0x00008bdc
fffd3db4:	00008c1f 	.word	0x00008c1f
fffd3db8:	00008a12 	.word	0x00008a12
fffd3dbc:	00008c34 	.word	0x00008c34
fffd3dc0:	00008c4d 	.word	0x00008c4d
fffd3dc4:	00008d0a 	.word	0x00008d0a
fffd3dc8:	00008ac9 	.word	0x00008ac9
fffd3dcc:	00008b2c 	.word	0x00008b2c
fffd3dd0:	00008b6f 	.word	0x00008b6f
fffd3dd4:	00008b85 	.word	0x00008b85
fffd3dd8:	00008ba8 	.word	0x00008ba8
fffd3ddc:	000f4240 	.word	0x000f4240
fffd3de0:	00008bb0 	.word	0x00008bb0
fffd3de4:	00008bc8 	.word	0x00008bc8
fffd3de8:	00008af1 	.word	0x00008af1
fffd3dec:	00008b10 	.word	0x00008b10

fffd3df0 <main>:
{
fffd3df0:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
fffd3df4:	e59f437c 	ldr	r4, [pc, #892]	; fffd4178 <main+0x388>
	Uart_AutoDetect ();
fffd3df8:	eb00027a 	bl	fffd47e8 <Uart_AutoDetect>
	pDataAbortRoutine = (INT_ROUTINE) DataAbortRoutine;
fffd3dfc:	e59f3378 	ldr	r3, [pc, #888]	; fffd417c <main+0x38c>
{
fffd3e00:	e08f4004 	add	r4, pc, r4
	pDataAbortRoutine = (INT_ROUTINE) DataAbortRoutine;
fffd3e04:	e59f2374 	ldr	r2, [pc, #884]	; fffd4180 <main+0x390>
	LogMessage ("\n\n");
fffd3e08:	e59f0374 	ldr	r0, [pc, #884]	; fffd4184 <main+0x394>
	pDataAbortRoutine = (INT_ROUTINE) DataAbortRoutine;
fffd3e0c:	e7943003 	ldr	r3, [r4, r3]
fffd3e10:	e08f2002 	add	r2, pc, r2
	LogMessage ("\n\n");
fffd3e14:	e08f0000 	add	r0, pc, r0
	pDataAbortRoutine = (INT_ROUTINE) DataAbortRoutine;
fffd3e18:	e5832000 	str	r2, [r3]
	pUndefinedInstructionRoutine = (INT_ROUTINE) UndefinedInstructionRoutine;
fffd3e1c:	e59f3364 	ldr	r3, [pc, #868]	; fffd4188 <main+0x398>
fffd3e20:	e59f2364 	ldr	r2, [pc, #868]	; fffd418c <main+0x39c>
fffd3e24:	e7943003 	ldr	r3, [r4, r3]
fffd3e28:	e08f2002 	add	r2, pc, r2
fffd3e2c:	e5832000 	str	r2, [r3]
	pPrefetchAbortRoutine = (INT_ROUTINE) PrefetchAbortRoutine;
fffd3e30:	e59f3358 	ldr	r3, [pc, #856]	; fffd4190 <main+0x3a0>
fffd3e34:	e59f2358 	ldr	r2, [pc, #856]	; fffd4194 <main+0x3a4>
fffd3e38:	e7943003 	ldr	r3, [r4, r3]
fffd3e3c:	e08f2002 	add	r2, pc, r2
fffd3e40:	e5832000 	str	r2, [r3]
	pSvcRoutine =  (INT_ROUTINE) SvcRoutine;
fffd3e44:	e59f334c 	ldr	r3, [pc, #844]	; fffd4198 <main+0x3a8>
fffd3e48:	e59f234c 	ldr	r2, [pc, #844]	; fffd419c <main+0x3ac>
fffd3e4c:	e7943003 	ldr	r3, [r4, r3]
fffd3e50:	e08f2002 	add	r2, pc, r2
fffd3e54:	e5832000 	str	r2, [r3]
	pFiqRoutine =  (INT_ROUTINE) FiqRoutine;
fffd3e58:	e59f3340 	ldr	r3, [pc, #832]	; fffd41a0 <main+0x3b0>
fffd3e5c:	e59f2340 	ldr	r2, [pc, #832]	; fffd41a4 <main+0x3b4>
fffd3e60:	e7943003 	ldr	r3, [r4, r3]
fffd3e64:	e08f2002 	add	r2, pc, r2
fffd3e68:	e5832000 	str	r2, [r3]
	LogMessage ("\n\n");
fffd3e6c:	eb000311 	bl	fffd4ab8 <LogMessage>
	LogHeader (" Build Date: %s,%s with GCC %u.%u.%u ",__DATE__,__TIME__,__GNUC__,__GNUC_MINOR__,__GNUC_PATCHLEVEL__);
fffd3e70:	e3a00003 	mov	r0, #3
fffd3e74:	e3a01001 	mov	r1, #1
fffd3e78:	e1cd00f0 	strd	r0, [sp]
fffd3e7c:	e3a03007 	mov	r3, #7
fffd3e80:	e59f2320 	ldr	r2, [pc, #800]	; fffd41a8 <main+0x3b8>
fffd3e84:	e59f1320 	ldr	r1, [pc, #800]	; fffd41ac <main+0x3bc>
fffd3e88:	e59f0320 	ldr	r0, [pc, #800]	; fffd41b0 <main+0x3c0>
fffd3e8c:	e08f2002 	add	r2, pc, r2
fffd3e90:	e08f1001 	add	r1, pc, r1
fffd3e94:	e08f0000 	add	r0, pc, r0
fffd3e98:	eb000372 	bl	fffd4c68 <LogHeader>
	CP15_WRITE (0,0,c7,c5,0); // ICIALLU: Invalidate all instruction caches to PoU. Also flushes branch target cache.
fffd3e9c:	e3a03000 	mov	r3, #0
fffd3ea0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CP15_WRITE (0,0,c7,c5,6); // BPIALL: Invalidate entire branch predictor array.
fffd3ea4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
	else if ((UINT32)&_startup==0xFFFD0000)
fffd3ea8:	e59f3304 	ldr	r3, [pc, #772]	; fffd41b4 <main+0x3c4>
	CP15_READ (SCTLR_reg, 0, c1, c0, 0);
fffd3eac:	ee115f10 	mrc	15, 0, r5, cr1, cr0, {0}
fffd3eb0:	e59f6300 	ldr	r6, [pc, #768]	; fffd41b8 <main+0x3c8>
	else if ((UINT32)&_startup==0xFFFD0000)
fffd3eb4:	e7943003 	ldr	r3, [r4, r3]
fffd3eb8:	e3730803 	cmn	r3, #196608	; 0x30000
fffd3ebc:	1a00001d 	bne	fffd3f38 <main+0x148>
		if (((SCTLR_reg>>13)&0x1) == 0) 	
fffd3ec0:	e3150a02 	tst	r5, #8192	; 0x2000
fffd3ec4:	1a00000d 	bne	fffd3f00 <main+0x110>
			LogWarning ("> Override vector table.\n");
fffd3ec8:	e59f02ec 	ldr	r0, [pc, #748]	; fffd41bc <main+0x3cc>
			SCTLR_reg |= ((UINT32)1<<13); // set vector table into address 0xFFFF_0000
fffd3ecc:	e3855a02 	orr	r5, r5, #8192	; 0x2000
			LogWarning ("> Override vector table.\n");
fffd3ed0:	e08f0000 	add	r0, pc, r0
fffd3ed4:	eb000333 	bl	fffd4ba8 <LogWarning>
			LogWarning ("  >> Mapped first 256 bytes of address 0xFFFF_0000 to address 0xFFFD_0000. \n");
fffd3ed8:	e59f02e0 	ldr	r0, [pc, #736]	; fffd41c0 <main+0x3d0>
fffd3edc:	e08f0000 	add	r0, pc, r0
fffd3ee0:	eb000330 	bl	fffd4ba8 <LogWarning>
			SET_BIT_REG (FLOCKR1,18); // RAM2 first 256 bytes are mapped to address range FFFF_0000h to FFFF_00FFh.
fffd3ee4:	e5963074 	ldr	r3, [r6, #116]	; 0x74
			LogWarning ("  >> Set CPU vector table to address 0xFFFF_0000. \n");
fffd3ee8:	e59f02d4 	ldr	r0, [pc, #724]	; fffd41c4 <main+0x3d4>
			SET_BIT_REG (FLOCKR1,18); // RAM2 first 256 bytes are mapped to address range FFFF_0000h to FFFF_00FFh.
fffd3eec:	e3833701 	orr	r3, r3, #262144	; 0x40000
fffd3ef0:	e5863074 	str	r3, [r6, #116]	; 0x74
			LogWarning ("  >> Set CPU vector table to address 0xFFFF_0000. \n");
fffd3ef4:	e08f0000 	add	r0, pc, r0
fffd3ef8:	eb00032a 	bl	fffd4ba8 <LogWarning>
			CP15_WRITE (SCTLR_reg, 0, c1, c0, 0);
fffd3efc:	ee015f10 	mcr	15, 0, r5, cr1, cr0, {0}
	LogHeader (" Display Some Chip Info ");
fffd3f00:	e59f02c0 	ldr	r0, [pc, #704]	; fffd41c8 <main+0x3d8>
fffd3f04:	e08f0000 	add	r0, pc, r0
fffd3f08:	eb000356 	bl	fffd4c68 <LogHeader>
	UINT32 PDID_reg = READ_REG(PDID);
fffd3f0c:	e5961000 	ldr	r1, [r6]
	switch (PDID_reg) 
fffd3f10:	e59f32b4 	ldr	r3, [pc, #692]	; fffd41cc <main+0x3dc>
fffd3f14:	e1510003 	cmp	r1, r3
fffd3f18:	0a00000a 	beq	fffd3f48 <main+0x158>
fffd3f1c:	e2833301 	add	r3, r3, #67108864	; 0x4000000
fffd3f20:	e1510003 	cmp	r1, r3
fffd3f24:	0a000054 	beq	fffd407c <main+0x28c>
			LogWarning ("Unknown NPCM750x BMC chip version. Found PDID=0x%08lX\n",PDID_reg); // 23/12/2015: change "Invalid" to "Unknown" with only Warning message
fffd3f28:	e59f02a0 	ldr	r0, [pc, #672]	; fffd41d0 <main+0x3e0>
fffd3f2c:	e08f0000 	add	r0, pc, r0
fffd3f30:	eb00031c 	bl	fffd4ba8 <LogWarning>
fffd3f34:	ea000006 	b	fffd3f54 <main+0x164>
		LogWarning (" Code was not compiled to address 0x00000000 or 0xFFFD0000; interrupts will not work unless code vector table are copied ! \n");
fffd3f38:	e59f0294 	ldr	r0, [pc, #660]	; fffd41d4 <main+0x3e4>
fffd3f3c:	e08f0000 	add	r0, pc, r0
fffd3f40:	eb000318 	bl	fffd4ba8 <LogWarning>
fffd3f44:	eaffffed 	b	fffd3f00 <main+0x110>
		case Poleg_ID_Z1:	LogWarning ("> Found NPCM750x BMC chip version Z1.\n");	break;
fffd3f48:	e59f0288 	ldr	r0, [pc, #648]	; fffd41d8 <main+0x3e8>
fffd3f4c:	e08f0000 	add	r0, pc, r0
fffd3f50:	eb000314 	bl	fffd4ba8 <LogWarning>
	LogMessage ("> PLLs and Clocks: \n");
fffd3f54:	e59f0280 	ldr	r0, [pc, #640]	; fffd41dc <main+0x3ec>
	PLL0_Freq_In_KHz = Check_BMC_PLL (READ_REG (PLLCON0),0);
fffd3f58:	e59f5280 	ldr	r5, [pc, #640]	; fffd41e0 <main+0x3f0>
	LogMessage ("> PLLs and Clocks: \n");
fffd3f5c:	e08f0000 	add	r0, pc, r0
fffd3f60:	eb0002d4 	bl	fffd4ab8 <LogMessage>
	PLL0_Freq_In_KHz = Check_BMC_PLL (READ_REG (PLLCON0),0);
fffd3f64:	e3a01000 	mov	r1, #0
fffd3f68:	e595000c 	ldr	r0, [r5, #12]
fffd3f6c:	ebfffe09 	bl	fffd3798 <Check_BMC_PLL>
fffd3f70:	e59f326c 	ldr	r3, [pc, #620]	; fffd41e4 <main+0x3f4>
	PLL1_Freq_In_KHz = Check_BMC_PLL (READ_REG (PLLCON1),1);
fffd3f74:	e3a01001 	mov	r1, #1
	PLL0_Freq_In_KHz = Check_BMC_PLL (READ_REG (PLLCON0),0);
fffd3f78:	e7943003 	ldr	r3, [r4, r3]
fffd3f7c:	e5830000 	str	r0, [r3]
	PLL1_Freq_In_KHz = Check_BMC_PLL (READ_REG (PLLCON1),1);
fffd3f80:	e5950010 	ldr	r0, [r5, #16]
fffd3f84:	ebfffe03 	bl	fffd3798 <Check_BMC_PLL>
fffd3f88:	e59f3258 	ldr	r3, [pc, #600]	; fffd41e8 <main+0x3f8>
	PLL2_Freq_In_KHz = Check_BMC_PLL (READ_REG (PLLCON2),2);
fffd3f8c:	e3a01002 	mov	r1, #2
	PLL1_Freq_In_KHz = Check_BMC_PLL (READ_REG (PLLCON1),1);
fffd3f90:	e7943003 	ldr	r3, [r4, r3]
fffd3f94:	e5830000 	str	r0, [r3]
	PLL2_Freq_In_KHz = Check_BMC_PLL (READ_REG (PLLCON2),2);
fffd3f98:	e5950054 	ldr	r0, [r5, #84]	; 0x54
fffd3f9c:	ebfffdfd 	bl	fffd3798 <Check_BMC_PLL>
fffd3fa0:	e59f3244 	ldr	r3, [pc, #580]	; fffd41ec <main+0x3fc>
fffd3fa4:	e7943003 	ldr	r3, [r4, r3]
fffd3fa8:	e5830000 	str	r0, [r3]
	LogMessage ("  * CLKSEL = 0x%08lX \n", ClkSel);
fffd3fac:	e59f023c 	ldr	r0, [pc, #572]	; fffd41f0 <main+0x400>
	ClkSel = READ_REG (CLKSEL);
fffd3fb0:	e5954004 	ldr	r4, [r5, #4]
	LogMessage ("  * CLKSEL = 0x%08lX \n", ClkSel);
fffd3fb4:	e08f0000 	add	r0, pc, r0
fffd3fb8:	e1a01004 	mov	r1, r4
fffd3fbc:	eb0002bd 	bl	fffd4ab8 <LogMessage>
	LogMessage ("    - CPU Clock Source (CPUCKSEL) => ");
fffd3fc0:	e59f022c 	ldr	r0, [pc, #556]	; fffd41f4 <main+0x404>
fffd3fc4:	e08f0000 	add	r0, pc, r0
fffd3fc8:	eb0002ba 	bl	fffd4ab8 <LogMessage>
	switch ((ClkSel>>0)&0x03)
fffd3fcc:	e2043003 	and	r3, r4, #3
fffd3fd0:	e3530002 	cmp	r3, #2
fffd3fd4:	0a00002f 	beq	fffd4098 <main+0x2a8>
fffd3fd8:	e3530003 	cmp	r3, #3
fffd3fdc:	0a000031 	beq	fffd40a8 <main+0x2b8>
fffd3fe0:	e3530001 	cmp	r3, #1
fffd3fe4:	0a000028 	beq	fffd408c <main+0x29c>
		LogPass ("PLL 0. \n");
fffd3fe8:	e59f0208 	ldr	r0, [pc, #520]	; fffd41f8 <main+0x408>
fffd3fec:	e08f0000 	add	r0, pc, r0
		LogPass ("PLL 1. \n");
fffd3ff0:	eb00030c 	bl	fffd4c28 <LogPass>
	LogMessage ("    - Memory Controller Clock Source (MCCKSEL) => ");
fffd3ff4:	e59f0200 	ldr	r0, [pc, #512]	; fffd41fc <main+0x40c>
	switch ((ClkSel>>12)&0x03)
fffd3ff8:	e7e14654 	ubfx	r4, r4, #12, #2
	LogMessage ("    - Memory Controller Clock Source (MCCKSEL) => ");
fffd3ffc:	e08f0000 	add	r0, pc, r0
fffd4000:	eb0002ac 	bl	fffd4ab8 <LogMessage>
	switch ((ClkSel>>12)&0x03)
fffd4004:	e3540002 	cmp	r4, #2
fffd4008:	0a000029 	beq	fffd40b4 <main+0x2c4>
fffd400c:	e3540003 	cmp	r4, #3
fffd4010:	0a00002b 	beq	fffd40c4 <main+0x2d4>
fffd4014:	e3540000 	cmp	r4, #0
fffd4018:	1a00002c 	bne	fffd40d0 <main+0x2e0>
		LogPass ("PLL 1. \n");
fffd401c:	e59f01dc 	ldr	r0, [pc, #476]	; fffd4200 <main+0x410>
fffd4020:	e08f0000 	add	r0, pc, r0
fffd4024:	eb0002ff 	bl	fffd4c28 <LogPass>
	ClkDiv1 = READ_REG (CLKDIV1);
fffd4028:	e5954008 	ldr	r4, [r5, #8]
	LogMessage ("  * CLKDIV1 = 0x%08lX \n",ClkDiv1);
fffd402c:	e59f01d0 	ldr	r0, [pc, #464]	; fffd4204 <main+0x414>
fffd4030:	e1a01004 	mov	r1, r4
fffd4034:	e08f0000 	add	r0, pc, r0
fffd4038:	eb00029e 	bl	fffd4ab8 <LogMessage>
	if ((ClkDiv1&0x1)==0)
fffd403c:	e3140001 	tst	r4, #1
fffd4040:	1a000034 	bne	fffd4118 <main+0x328>
		LogWarning ("    > CLK2(AXI16) = CPU clock. \n");
fffd4044:	e59f01bc 	ldr	r0, [pc, #444]	; fffd4208 <main+0x418>
fffd4048:	e08f0000 	add	r0, pc, r0
fffd404c:	eb0002d5 	bl	fffd4ba8 <LogWarning>
	switch ((ClkDiv1>>26)&0x03)
fffd4050:	e7e14d54 	ubfx	r4, r4, #26, #2
fffd4054:	e3540002 	cmp	r4, #2
fffd4058:	0a000040 	beq	fffd4160 <main+0x370>
fffd405c:	e3540003 	cmp	r4, #3
fffd4060:	0a000041 	beq	fffd416c <main+0x37c>
fffd4064:	e3540001 	cmp	r4, #1
fffd4068:	0a00002e 	beq	fffd4128 <main+0x338>
		LogWarning ("    > CLK4 = CLK2 \n");
fffd406c:	e59f0198 	ldr	r0, [pc, #408]	; fffd420c <main+0x41c>
fffd4070:	e08f0000 	add	r0, pc, r0
		LogWarning ("    > CLK4 = CLK2/4 \n");
fffd4074:	eb0002cb 	bl	fffd4ba8 <LogWarning>
fffd4078:	ea00002d 	b	fffd4134 <main+0x344>
		case Poleg_ID_Z2:	LogPass ("> Found NPCM750x BMC chip version A1.\n");	break;
fffd407c:	e59f018c 	ldr	r0, [pc, #396]	; fffd4210 <main+0x420>
fffd4080:	e08f0000 	add	r0, pc, r0
fffd4084:	eb0002e7 	bl	fffd4c28 <LogPass>
fffd4088:	eaffffb1 	b	fffd3f54 <main+0x164>
		LogPass ("PLL 1. \n");
fffd408c:	e59f0180 	ldr	r0, [pc, #384]	; fffd4214 <main+0x424>
fffd4090:	e08f0000 	add	r0, pc, r0
fffd4094:	eaffffd5 	b	fffd3ff0 <main+0x200>
		LogWarning ("CLKREF clock (debug). \n");
fffd4098:	e59f0178 	ldr	r0, [pc, #376]	; fffd4218 <main+0x428>
fffd409c:	e08f0000 	add	r0, pc, r0
		LogWarning ("Bypass clock from pin SYSBPCK (debug). \n");
fffd40a0:	eb0002c0 	bl	fffd4ba8 <LogWarning>
fffd40a4:	eaffffd2 	b	fffd3ff4 <main+0x204>
fffd40a8:	e59f016c 	ldr	r0, [pc, #364]	; fffd421c <main+0x42c>
fffd40ac:	e08f0000 	add	r0, pc, r0
fffd40b0:	eafffffa 	b	fffd40a0 <main+0x2b0>
		LogWarning ("CLKREF Clock (debug). \n");
fffd40b4:	e59f0164 	ldr	r0, [pc, #356]	; fffd4220 <main+0x430>
fffd40b8:	e08f0000 	add	r0, pc, r0
		LogWarning ("MCBPCK Clock (debug). \n");
fffd40bc:	eb0002b9 	bl	fffd4ba8 <LogWarning>
fffd40c0:	eaffffd8 	b	fffd4028 <main+0x238>
fffd40c4:	e59f0158 	ldr	r0, [pc, #344]	; fffd4224 <main+0x434>
fffd40c8:	e08f0000 	add	r0, pc, r0
fffd40cc:	eafffffa 	b	fffd40bc <main+0x2cc>
		LOG_ERROR  (("Invalid source."));
fffd40d0:	e59f3150 	ldr	r3, [pc, #336]	; fffd4228 <main+0x438>
fffd40d4:	e3a02f4d 	mov	r2, #308	; 0x134
fffd40d8:	e59f114c 	ldr	r1, [pc, #332]	; fffd422c <main+0x43c>
fffd40dc:	e59f014c 	ldr	r0, [pc, #332]	; fffd4230 <main+0x440>
fffd40e0:	e08f3003 	add	r3, pc, r3
fffd40e4:	e2833e5a 	add	r3, r3, #1440	; 0x5a0
fffd40e8:	e08f1001 	add	r1, pc, r1
fffd40ec:	e283300c 	add	r3, r3, #12
fffd40f0:	e08f0000 	add	r0, pc, r0
fffd40f4:	eb00029b 	bl	fffd4b68 <LogError>
fffd40f8:	e59f0134 	ldr	r0, [pc, #308]	; fffd4234 <main+0x444>
fffd40fc:	e08f0000 	add	r0, pc, r0
fffd4100:	eb000298 	bl	fffd4b68 <LogError>
fffd4104:	e59f012c 	ldr	r0, [pc, #300]	; fffd4238 <main+0x448>
fffd4108:	e08f0000 	add	r0, pc, r0
fffd410c:	eb000269 	bl	fffd4ab8 <LogMessage>
		exit (-1);
fffd4110:	e3e00000 	mvn	r0, #0
fffd4114:	eb00018f 	bl	fffd4758 <exit>
		LogPass ("    > CLK2(AXI16) = CPU clock /2.  \n");
fffd4118:	e59f011c 	ldr	r0, [pc, #284]	; fffd423c <main+0x44c>
fffd411c:	e08f0000 	add	r0, pc, r0
fffd4120:	eb0002c0 	bl	fffd4c28 <LogPass>
fffd4124:	eaffffc9 	b	fffd4050 <main+0x260>
		LogPass ("    > CLK4 = CLK2/2 \n");
fffd4128:	e59f0110 	ldr	r0, [pc, #272]	; fffd4240 <main+0x450>
fffd412c:	e08f0000 	add	r0, pc, r0
fffd4130:	eb0002bc 	bl	fffd4c28 <LogPass>
	LogMessage ("  * CLKDIV2 = 0x%08lX \n",ClkDiv2);
fffd4134:	e59f0108 	ldr	r0, [pc, #264]	; fffd4244 <main+0x454>
	ClkDiv2 = READ_REG (CLKDIV2);
fffd4138:	e595102c 	ldr	r1, [r5, #44]	; 0x2c
	LogMessage ("  * CLKDIV2 = 0x%08lX \n",ClkDiv2);
fffd413c:	e08f0000 	add	r0, pc, r0
fffd4140:	eb00025c 	bl	fffd4ab8 <LogMessage>
	LogMessage ("  * CLKDIV3 = 0x%08lX \n",ClkDiv3);
fffd4144:	e59f00fc 	ldr	r0, [pc, #252]	; fffd4248 <main+0x458>
	ClkDiv3 = READ_REG (CLKDIV3);
fffd4148:	e5951058 	ldr	r1, [r5, #88]	; 0x58
	LogMessage ("  * CLKDIV3 = 0x%08lX \n",ClkDiv3);
fffd414c:	e08f0000 	add	r0, pc, r0
fffd4150:	eb000258 	bl	fffd4ab8 <LogMessage>
} // *End of main*
fffd4154:	e28dd008 	add	sp, sp, #8
fffd4158:	e8bd4070 	pop	{r4, r5, r6, lr}
	return main_menu ();
fffd415c:	eafffe4c 	b	fffd3a94 <main_menu>
		LogWarning ("    > CLK4 = CLK2/3 \n");
fffd4160:	e59f00e4 	ldr	r0, [pc, #228]	; fffd424c <main+0x45c>
fffd4164:	e08f0000 	add	r0, pc, r0
fffd4168:	eaffffc1 	b	fffd4074 <main+0x284>
		LogWarning ("    > CLK4 = CLK2/4 \n");
fffd416c:	e59f00dc 	ldr	r0, [pc, #220]	; fffd4250 <main+0x460>
fffd4170:	e08f0000 	add	r0, pc, r0
fffd4174:	eaffffbe 	b	fffd4074 <main+0x284>
fffd4178:	0000941c 	.word	0x0000941c
fffd417c:	00000024 	.word	0x00000024
fffd4180:	fffff7fc 	.word	0xfffff7fc
fffd4184:	00008713 	.word	0x00008713
fffd4188:	00000008 	.word	0x00000008
fffd418c:	fffff844 	.word	0xfffff844
fffd4190:	00000020 	.word	0x00000020
fffd4194:	fffff894 	.word	0xfffff894
fffd4198:	0000002c 	.word	0x0000002c
fffd419c:	fffff8e0 	.word	0xfffff8e0
fffd41a0:	0000000c 	.word	0x0000000c
fffd41a4:	fffff74c 	.word	0xfffff74c
fffd41a8:	00008a88 	.word	0x00008a88
fffd41ac:	00008a8d 	.word	0x00008a8d
fffd41b0:	00008a95 	.word	0x00008a95
fffd41b4:	00000010 	.word	0x00000010
fffd41b8:	f0800000 	.word	0xf0800000
fffd41bc:	00008a7f 	.word	0x00008a7f
fffd41c0:	00008a8d 	.word	0x00008a8d
fffd41c4:	00008ac2 	.word	0x00008ac2
fffd41c8:	00008b63 	.word	0x00008b63
fffd41cc:	00a92750 	.word	0x00a92750
fffd41d0:	00008ba2 	.word	0x00008ba2
fffd41d4:	00008aae 	.word	0x00008aae
fffd41d8:	00008b34 	.word	0x00008b34
fffd41dc:	00008ba9 	.word	0x00008ba9
fffd41e0:	f0801000 	.word	0xf0801000
fffd41e4:	0000001c 	.word	0x0000001c
fffd41e8:	00000018 	.word	0x00000018
fffd41ec:	00000028 	.word	0x00000028
fffd41f0:	00008b66 	.word	0x00008b66
fffd41f4:	00008b6d 	.word	0x00008b6d
fffd41f8:	00008b6b 	.word	0x00008b6b
fffd41fc:	00008bae 	.word	0x00008bae
fffd4200:	00008b40 	.word	0x00008b40
fffd4204:	00008be9 	.word	0x00008be9
fffd4208:	00008bed 	.word	0x00008bed
fffd420c:	00008c0b 	.word	0x00008c0b
fffd4210:	00008a27 	.word	0x00008a27
fffd4214:	00008ad0 	.word	0x00008ad0
fffd4218:	00008acd 	.word	0x00008acd
fffd421c:	00008ad5 	.word	0x00008ad5
fffd4220:	00008b25 	.word	0x00008b25
fffd4224:	00008b2d 	.word	0x00008b2d
fffd4228:	00007c64 	.word	0x00007c64
fffd422c:	00008215 	.word	0x00008215
fffd4230:	00008214 	.word	0x00008214
fffd4234:	00008b11 	.word	0x00008b11
fffd4238:	00008420 	.word	0x00008420
fffd423c:	00008b3a 	.word	0x00008b3a
fffd4240:	00008b63 	.word	0x00008b63
fffd4244:	00008b95 	.word	0x00008b95
fffd4248:	00008b9d 	.word	0x00008b9d
fffd424c:	00008b41 	.word	0x00008b41
fffd4250:	00008b4b 	.word	0x00008b4b

fffd4254 <PutUnsignedInt>:

    /* Take current digit into account when calculating width */
    width--;

    /* Recursively write upper digits */
    if ((value / 10) > 0)
fffd4254:	e3530009 	cmp	r3, #9
{
fffd4258:	e92d4070 	push	{r4, r5, r6, lr}
    width--;
fffd425c:	e242c001 	sub	r12, r2, #1
{
fffd4260:	e1a04000 	mov	r4, r0
fffd4264:	e1a05003 	mov	r5, r3
fffd4268:	91a0e001 	movls	lr, r1
    if ((value / 10) > 0)
fffd426c:	9a000010 	bls	fffd42b4 <PutUnsignedInt+0x60>
    {
        num = PutUnsignedInt (pStr, fill, width, value / 10);
fffd4270:	e59f2054 	ldr	r2, [pc, #84]	; fffd42cc <PutUnsignedInt+0x78>
fffd4274:	e0832293 	umull	r2, r3, r3, r2
fffd4278:	e1a0200c 	mov	r2, r12
fffd427c:	e1a031a3 	lsr	r3, r3, #3
fffd4280:	ebfffff3 	bl	fffd4254 <PutUnsignedInt>
        pStr += num;
fffd4284:	e0844000 	add	r4, r4, r0
            width--;
        }
    }

    /* Write lower digit */
    num += PutChar(pStr, (value % 10) + '0');
fffd4288:	e59f203c 	ldr	r2, [pc, #60]	; fffd42cc <PutUnsignedInt+0x78>

    return num;
}
fffd428c:	e2800001 	add	r0, r0, #1
    num += PutChar(pStr, (value % 10) + '0');
fffd4290:	e0832295 	umull	r2, r3, r5, r2
fffd4294:	e3a0200a 	mov	r2, #10
fffd4298:	e1a031a3 	lsr	r3, r3, #3
fffd429c:	e0635392 	mls	r3, r2, r3, r5
fffd42a0:	e2833030 	add	r3, r3, #48	; 0x30
    *pStr = c;
fffd42a4:	e5c43000 	strb	r3, [r4]
}
fffd42a8:	e8bd8070 	pop	{r4, r5, r6, pc}
            width--;
fffd42ac:	e24cc001 	sub	r12, r12, #1
    *pStr = c;
fffd42b0:	e4c4e001 	strb	lr, [r4], #1
        while (width > 0)
fffd42b4:	e35c0000 	cmp	r12, #0
fffd42b8:	cafffffb 	bgt	fffd42ac <PutUnsignedInt+0x58>
fffd42bc:	e3520001 	cmp	r2, #1
fffd42c0:	b3a02001 	movlt	r2, #1
fffd42c4:	e2420001 	sub	r0, r2, #1
fffd42c8:	eaffffee 	b	fffd4288 <PutUnsignedInt+0x34>
fffd42cc:	cccccccd 	.word	0xcccccccd

fffd42d0 <PutSignedInt>:
 * @param fill   Fill character.
 * @param width  Minimum integer width.
 * @param value  Signed integer value.
 */
static signed int PutSignedInt(char *pStr, char fill, signed int width, signed long int value)
{
fffd42d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    signed int num = 0;
    unsigned long int absolute;

    /* Compute absolute value */
    if (value < 0)
        absolute = -value;
fffd42d4:	e0235fc3 	eor	r5, r3, r3, asr #31
{
fffd42d8:	e1a0c002 	mov	r12, r2
        absolute = -value;
fffd42dc:	e0455fc3 	sub	r5, r5, r3, asr #31
{
fffd42e0:	e1a04000 	mov	r4, r0
    else
        absolute = value;

    /* Take current digit into account when calculating width */
    width--;
fffd42e4:	e2422001 	sub	r2, r2, #1

    /* Recursively write upper digits */
    if ((absolute / 10) > 0)
fffd42e8:	e3550009 	cmp	r5, #9
fffd42ec:	9a000010 	bls	fffd4334 <PutSignedInt+0x64>
fffd42f0:	e59f6088 	ldr	r6, [pc, #136]	; fffd4380 <PutSignedInt+0xb0>
fffd42f4:	e1a0c003 	mov	r12, r3
    {
        if (value < 0)
fffd42f8:	e35c0000 	cmp	r12, #0
fffd42fc:	e0876695 	umull	r6, r7, r5, r6
fffd4300:	e1a031a7 	lsr	r3, r7, #3
        {
            num = PutSignedInt(pStr, fill, width, -(absolute / 10));
fffd4304:	b2633000 	rsblt	r3, r3, #0
        }
        else
        {
            num = PutSignedInt(pStr, fill, width, absolute / 10);
fffd4308:	ebfffff0 	bl	fffd42d0 <PutSignedInt>
        }
        pStr += num;
fffd430c:	e0842000 	add	r2, r4, r0
            pStr++;
        }
    }

    /* Write lower digit */
    num += PutChar(pStr, (absolute % 10) + '0');
fffd4310:	e59f6068 	ldr	r6, [pc, #104]	; fffd4380 <PutSignedInt+0xb0>
fffd4314:	e3a0100a 	mov	r1, #10

    return num;
}
fffd4318:	e2800001 	add	r0, r0, #1
    num += PutChar(pStr, (absolute % 10) + '0');
fffd431c:	e0876695 	umull	r6, r7, r5, r6
fffd4320:	e1a031a7 	lsr	r3, r7, #3
fffd4324:	e0635391 	mls	r3, r1, r3, r5
fffd4328:	e2833030 	add	r3, r3, #48	; 0x30
    *pStr = c;
fffd432c:	e5c23000 	strb	r3, [r2]
}
fffd4330:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if (value < 0)
fffd4334:	e3530000 	cmp	r3, #0
fffd4338:	e1a0e001 	mov	lr, r1
            width--;
fffd433c:	b24c2002 	sublt	r2, r12, #2
{
fffd4340:	e1a01000 	mov	r1, r0
fffd4344:	e080c002 	add	r12, r0, r2
fffd4348:	e04c0001 	sub	r0, r12, r1
        while (width > 0)
fffd434c:	e3500000 	cmp	r0, #0
fffd4350:	ca000008 	bgt	fffd4378 <PutSignedInt+0xa8>
fffd4354:	e1c20fc2 	bic	r0, r2, r2, asr #31
        if (value < 0)
fffd4358:	e3530000 	cmp	r3, #0
    *pStr = c;
fffd435c:	b3a0302d 	movlt	r3, #45	; 0x2d
fffd4360:	e0842000 	add	r2, r4, r0
fffd4364:	e2801001 	add	r1, r0, #1
fffd4368:	b7c43000 	strblt	r3, [r4, r0]
            pStr++;
fffd436c:	b2822001 	addlt	r2, r2, #1
fffd4370:	b1a00001 	movlt	r0, r1
fffd4374:	eaffffe5 	b	fffd4310 <PutSignedInt+0x40>
    *pStr = c;
fffd4378:	e4c1e001 	strb	lr, [r1], #1
fffd437c:	eafffff1 	b	fffd4348 <PutSignedInt+0x78>
fffd4380:	cccccccd 	.word	0xcccccccd

fffd4384 <PutHexa>:
 * @param value  Hexadecimal value.
 *
 * @return  The number of char written
 */
static signed int PutHexa (char *pStr, char fill, signed int width, unsigned char maj, unsigned long int value)
{
fffd4384:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    signed int num = 0;

    /* Decrement width */
    width--;
fffd4388:	e242c001 	sub	r12, r2, #1
{
fffd438c:	e59d5020 	ldr	r5, [sp, #32]
fffd4390:	e1a04000 	mov	r4, r0
fffd4394:	e1a06003 	mov	r6, r3

    /* Recursively output upper digits */
    if ((value >> 4) > 0)
fffd4398:	e1b07225 	lsrs	r7, r5, #4
fffd439c:	01a0e001 	moveq	lr, r1
fffd43a0:	0a000011 	beq	fffd43ec <PutHexa+0x68>
    {

        num += PutHexa(pStr, fill, width, maj, value >> 4);
fffd43a4:	e58d7000 	str	r7, [sp]
fffd43a8:	e1a0200c 	mov	r2, r12
fffd43ac:	ebfffff4 	bl	fffd4384 <PutHexa>
        pStr += num;
fffd43b0:	e0844000 	add	r4, r4, r0
fffd43b4:	e205500f 	and	r5, r5, #15
fffd43b8:	e6ef3075 	uxtb	r3, r5
            width--;
        }
    }

    /* Write current digit */
    if ((value & 0xF) < 10)
fffd43bc:	e3550009 	cmp	r5, #9
    {
        PutChar(pStr, (value & 0xF) + '0');
fffd43c0:	92833030 	addls	r3, r3, #48	; 0x30
    if ((value & 0xF) < 10)
fffd43c4:	9a000002 	bls	fffd43d4 <PutHexa+0x50>
    }
    else if (maj)
fffd43c8:	e3560000 	cmp	r6, #0
    {
        PutChar(pStr, (value & 0xF) - 10 + 'A');
fffd43cc:	12833037 	addne	r3, r3, #55	; 0x37
    }
    else
    {
        PutChar(pStr, (value & 0xF) - 10 + 'a');
fffd43d0:	02833057 	addeq	r3, r3, #87	; 0x57
    }
    num++;

    return num;
}
fffd43d4:	e2800001 	add	r0, r0, #1
    *pStr = c;
fffd43d8:	e5c43000 	strb	r3, [r4]
}
fffd43dc:	e28dd00c 	add	sp, sp, #12
fffd43e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
            width--;
fffd43e4:	e24cc001 	sub	r12, r12, #1
    *pStr = c;
fffd43e8:	e4c4e001 	strb	lr, [r4], #1
        while (width > 0)
fffd43ec:	e35c0000 	cmp	r12, #0
fffd43f0:	cafffffb 	bgt	fffd43e4 <PutHexa+0x60>
fffd43f4:	e3520001 	cmp	r2, #1
fffd43f8:	b3a02001 	movlt	r2, #1
fffd43fc:	e2420001 	sub	r0, r2, #1
fffd4400:	eaffffeb 	b	fffd43b4 <PutHexa+0x30>

fffd4404 <vsnprintf>:
 * @param ap      Argument list.
 *
 * @return  The number of characters written.
 */
signed int vsnprintf (char *pStr, size_t length, const char *pFormat, va_list ap)
{
fffd4404:	e92d43f7 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    unsigned char width;
    signed int    num = 0;
    signed int    size = 0;
    unsigned char Size_Prefixes = 0;

    if (pStr==NULL)
fffd4408:	e2504000 	subs	r4, r0, #0
    	return 0;
fffd440c:	01a05004 	moveq	r5, r4
    if (pStr==NULL)
fffd4410:	0a00000c 	beq	fffd4448 <vsnprintf+0x44>
fffd4414:	e3a06000 	mov	r6, #0
fffd4418:	e1a07001 	mov	r7, r1
    signed int    size = 0;
fffd441c:	e1a05006 	mov	r5, r6

    /* Clear the string */
    *pStr = 0;
fffd4420:	e5c46000 	strb	r6, [r4]

    /* Phase string */
    while (*pFormat != 0 && size < length)
fffd4424:	e5d21000 	ldrb	r1, [r2]
fffd4428:	e3510000 	cmp	r1, #0
fffd442c:	1a000059 	bne	fffd4598 <vsnprintf+0x194>
            size += num;
        }
    }

    /* NULL-terminated (final \0 is not counted) */
    if (size < length)
fffd4430:	e1570005 	cmp	r7, r5
    {
        *pStr = 0;
fffd4434:	85c41000 	strbhi	r1, [r4]
    if (size < length)
fffd4438:	8a000002 	bhi	fffd4448 <vsnprintf+0x44>
    }
    else
    {
        *(--pStr) = 0;
        size--;
fffd443c:	e2455001 	sub	r5, r5, #1
        *(--pStr) = 0;
fffd4440:	e3a03000 	mov	r3, #0
fffd4444:	e5443001 	strb	r3, [r4, #-1]
    }

    return size;
}
fffd4448:	e1a00005 	mov	r0, r5
fffd444c:	e28dd00c 	add	sp, sp, #12
fffd4450:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
            if (*pFormat == '0')
fffd4454:	e3510030 	cmp	r1, #48	; 0x30
                pFormat++;
fffd4458:	02820002 	addeq	r0, r2, #2
            pFormat++;
fffd445c:	12820001 	addne	r0, r2, #1
            fill = ' ';
fffd4460:	13a01020 	movne	r1, #32
fffd4464:	e3a02000 	mov	r2, #0
fffd4468:	ea000003 	b	fffd447c <vsnprintf+0x78>
                width = (width*10) + *pFormat-'0';
fffd446c:	e0822102 	add	r2, r2, r2, lsl #2
fffd4470:	e08c2082 	add	r2, r12, r2, lsl #1
fffd4474:	e2422030 	sub	r2, r2, #48	; 0x30
fffd4478:	e20220ff 	and	r2, r2, #255	; 0xff
            while ((*pFormat >= '0') && (*pFormat <= '9'))
fffd447c:	e5d0c000 	ldrb	r12, [r0]
fffd4480:	e1a09000 	mov	r9, r0
fffd4484:	e2800001 	add	r0, r0, #1
fffd4488:	e24ce030 	sub	lr, r12, #48	; 0x30
fffd448c:	e35e0009 	cmp	lr, #9
fffd4490:	9afffff5 	bls	fffd446c <vsnprintf+0x68>
            if (size + width > length)
fffd4494:	e0820005 	add	r0, r2, r5
fffd4498:	e1500007 	cmp	r0, r7
                width = length - size;
fffd449c:	80472005 	subhi	r2, r7, r5
fffd44a0:	86ef2072 	uxtbhi	r2, r2
            if (*pFormat == 'l')
fffd44a4:	e35c006c 	cmp	r12, #108	; 0x6c
            	pFormat++;
fffd44a8:	02899001 	addeq	r9, r9, #1
            switch (*pFormat)
fffd44ac:	e5d90000 	ldrb	r0, [r9]
            	Size_Prefixes = 1;
fffd44b0:	03a06001 	moveq	r6, #1
            switch (*pFormat)
fffd44b4:	e3500069 	cmp	r0, #105	; 0x69
fffd44b8:	0a000017 	beq	fffd451c <vsnprintf+0x118>
fffd44bc:	8a000007 	bhi	fffd44e0 <vsnprintf+0xdc>
fffd44c0:	e3500063 	cmp	r0, #99	; 0x63
fffd44c4:	0a00002e 	beq	fffd4584 <vsnprintf+0x180>
fffd44c8:	e3500064 	cmp	r0, #100	; 0x64
fffd44cc:	0a000012 	beq	fffd451c <vsnprintf+0x118>
fffd44d0:	e3500058 	cmp	r0, #88	; 0x58
fffd44d4:	0a000025 	beq	fffd4570 <vsnprintf+0x16c>
					return EOF;
fffd44d8:	e3e05000 	mvn	r5, #0
fffd44dc:	eaffffd9 	b	fffd4448 <vsnprintf+0x44>
            switch (*pFormat)
fffd44e0:	e3500075 	cmp	r0, #117	; 0x75
fffd44e4:	0a000015 	beq	fffd4540 <vsnprintf+0x13c>
fffd44e8:	e3500078 	cmp	r0, #120	; 0x78
fffd44ec:	0a000018 	beq	fffd4554 <vsnprintf+0x150>
fffd44f0:	e3500073 	cmp	r0, #115	; 0x73
fffd44f4:	1afffff7 	bne	fffd44d8 <vsnprintf+0xd4>
				case 's': num = PutString(pStr, va_arg(ap, char *)); break;
fffd44f8:	e5932000 	ldr	r2, [r3]
fffd44fc:	e2838004 	add	r8, r3, #4
    signed int num = 0;
fffd4500:	e3a00000 	mov	r0, #0
    while (*pSource != 0)
fffd4504:	e7d23000 	ldrb	r3, [r2, r0]
fffd4508:	e3530000 	cmp	r3, #0
fffd450c:	0a000006 	beq	fffd452c <vsnprintf+0x128>
        *pStr++ = *pSource++;
fffd4510:	e7c43000 	strb	r3, [r4, r0]
        num++;
fffd4514:	e2800001 	add	r0, r0, #1
fffd4518:	eafffff9 	b	fffd4504 <vsnprintf+0x100>
fffd451c:	e2838004 	add	r8, r3, #4
							num = PutSignedInt(pStr, fill, width, va_arg(ap, signed long int));
fffd4520:	e1a00004 	mov	r0, r4
fffd4524:	e5933000 	ldr	r3, [r3]
							num = PutSignedInt(pStr, fill, width, va_arg(ap, signed int));
fffd4528:	ebffff68 	bl	fffd42d0 <PutSignedInt>
            pFormat++;
fffd452c:	e2892001 	add	r2, r9, #1
            pStr += num;
fffd4530:	e0844000 	add	r4, r4, r0
            size += num;
fffd4534:	e0855000 	add	r5, r5, r0
fffd4538:	e1a03008 	mov	r3, r8
fffd453c:	eaffffb8 	b	fffd4424 <vsnprintf+0x20>
fffd4540:	e2838004 	add	r8, r3, #4
						num = PutUnsignedInt(pStr, fill, width, va_arg(ap, unsigned int));
fffd4544:	e1a00004 	mov	r0, r4
fffd4548:	e5933000 	ldr	r3, [r3]
fffd454c:	ebffff40 	bl	fffd4254 <PutUnsignedInt>
fffd4550:	eafffff5 	b	fffd452c <vsnprintf+0x128>
fffd4554:	e2838004 	add	r8, r3, #4
						num = PutHexa(pStr, fill, width, 0, va_arg(ap, unsigned int));
fffd4558:	e5933000 	ldr	r3, [r3]
fffd455c:	e58d3000 	str	r3, [sp]
fffd4560:	e3a03000 	mov	r3, #0
						num = PutHexa(pStr, fill, width, 1, va_arg(ap, unsigned int));
fffd4564:	e1a00004 	mov	r0, r4
fffd4568:	ebffff85 	bl	fffd4384 <PutHexa>
fffd456c:	eaffffee 	b	fffd452c <vsnprintf+0x128>
fffd4570:	e2838004 	add	r8, r3, #4
fffd4574:	e5933000 	ldr	r3, [r3]
fffd4578:	e58d3000 	str	r3, [sp]
fffd457c:	e3a03001 	mov	r3, #1
fffd4580:	eafffff7 	b	fffd4564 <vsnprintf+0x160>
				case 'c': num = PutChar(pStr, va_arg(ap, unsigned int)); break;
fffd4584:	e2838004 	add	r8, r3, #4
fffd4588:	e5933000 	ldr	r3, [r3]
fffd458c:	e3a00001 	mov	r0, #1
fffd4590:	e5c43000 	strb	r3, [r4]
fffd4594:	eaffffe4 	b	fffd452c <vsnprintf+0x128>
    while (*pFormat != 0 && size < length)
fffd4598:	e1570005 	cmp	r7, r5
fffd459c:	9affffa6 	bls	fffd443c <vsnprintf+0x38>
        if (*pFormat != '%')
fffd45a0:	e3510025 	cmp	r1, #37	; 0x25
            *pStr++ = *pFormat++;
fffd45a4:	12822001 	addne	r2, r2, #1
fffd45a8:	15c41000 	strbne	r1, [r4]
        if (*pFormat != '%')
fffd45ac:	1a000004 	bne	fffd45c4 <vsnprintf+0x1c0>
        else if (*(pFormat+1) == '%')
fffd45b0:	e5d21001 	ldrb	r1, [r2, #1]
fffd45b4:	e3510025 	cmp	r1, #37	; 0x25
fffd45b8:	1affffa5 	bne	fffd4454 <vsnprintf+0x50>
            pFormat += 2;
fffd45bc:	e2822002 	add	r2, r2, #2
            *pStr++ = '%';
fffd45c0:	e5c41000 	strb	r1, [r4]
            size++;
fffd45c4:	e2855001 	add	r5, r5, #1
            *pStr++ = '%';
fffd45c8:	e2844001 	add	r4, r4, #1
fffd45cc:	eaffff94 	b	fffd4424 <vsnprintf+0x20>

fffd45d0 <snprintf>:
 * @param ...     Other arguments
 *
 * @return  The number of characters written.
 */
signed int snprintf (char *pString, size_t length, const char *pFormat, ...)
{
fffd45d0:	e92d000c 	push	{r2, r3}
fffd45d4:	e92d4007 	push	{r0, r1, r2, lr}
    va_list    ap;
    signed int rc;

    va_start(ap, pFormat);
fffd45d8:	e28d3014 	add	r3, sp, #20
    rc = vsnprintf(pString, length, pFormat, ap);
fffd45dc:	e59d2010 	ldr	r2, [sp, #16]
    va_start(ap, pFormat);
fffd45e0:	e58d3004 	str	r3, [sp, #4]
    rc = vsnprintf(pString, length, pFormat, ap);
fffd45e4:	ebffff86 	bl	fffd4404 <vsnprintf>
    va_end(ap);

    return rc;
}
fffd45e8:	e28dd00c 	add	sp, sp, #12
fffd45ec:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
fffd45f0:	e28dd008 	add	sp, sp, #8
fffd45f4:	e12fff1e 	bx	lr

fffd45f8 <vsprintf>:


signed int vsprintf(char *pString, const char *pFormat, va_list ap)
{
	return (0);
}
fffd45f8:	e3a00000 	mov	r0, #0
fffd45fc:	e12fff1e 	bx	lr

fffd4600 <sprintf>:
signed int sprintf(char *pStr, const char *pFormat, ...)
{
fffd4600:	e92d000e 	push	{r1, r2, r3}
	return (0);
}
fffd4604:	e3a00000 	mov	r0, #0
fffd4608:	e28dd00c 	add	sp, sp, #12
fffd460c:	e12fff1e 	bx	lr

fffd4610 <vprintf>:
signed int vprintf(const char *pFormat, va_list ap)
{
	return (0);
}
fffd4610:	e3a00000 	mov	r0, #0
fffd4614:	e12fff1e 	bx	lr

fffd4618 <vfprintf>:
signed int vfprintf(FILE *pStream, const char *pFormat, va_list ap)
{
	return (0);
}
fffd4618:	e3a00000 	mov	r0, #0
fffd461c:	e12fff1e 	bx	lr

fffd4620 <fprintf>:
signed int fprintf(FILE *pStream, const char *pFormat, ...)
{
fffd4620:	e92d000e 	push	{r1, r2, r3}
	return 0;
}
fffd4624:	e3a00000 	mov	r0, #0
fffd4628:	e28dd00c 	add	sp, sp, #12
fffd462c:	e12fff1e 	bx	lr

fffd4630 <printf>:
signed int printf(const char *pFormat, ...)
{
fffd4630:	e92d000f 	push	{r0, r1, r2, r3}
	return (0);
}
fffd4634:	e3a00000 	mov	r0, #0
fffd4638:	e28dd010 	add	sp, sp, #16
fffd463c:	e12fff1e 	bx	lr

fffd4640 <puts>:
signed int puts(const char *pStr)
{
   return (0);
}
fffd4640:	e3a00000 	mov	r0, #0
fffd4644:	e12fff1e 	bx	lr

fffd4648 <fputc>:
signed int fputc(signed int c, FILE *pStream)
{
	 return EOF;
}
fffd4648:	e3e00000 	mvn	r0, #0
fffd464c:	e12fff1e 	bx	lr

fffd4650 <fputs>:
signed int fputs(const char *pStr, FILE *pStream)
{
	return EOF;
}
fffd4650:	e3e00000 	mvn	r0, #0
fffd4654:	e12fff1e 	bx	lr

fffd4658 <strlen>:

// Get string Length
size_t strlen (const char *pStr)
{
	size_t num = 0;
	while (*pStr != 0)
fffd4658:	e3a03000 	mov	r3, #0
fffd465c:	e7d02003 	ldrb	r2, [r0, r3]
fffd4660:	e3520000 	cmp	r2, #0
fffd4664:	1a000001 	bne	fffd4670 <strlen+0x18>
		if (num <= 0)
			return (EOF); // error, string is longer then 32767
		pStr++;
	}
	return (num);
}
fffd4668:	e1a00003 	mov	r0, r3
fffd466c:	e12fff1e 	bx	lr
		if (num <= 0)
fffd4670:	e3730001 	cmn	r3, #1
fffd4674:	0afffffb 	beq	fffd4668 <strlen+0x10>
fffd4678:	e2833001 	add	r3, r3, #1
fffd467c:	eafffff6 	b	fffd465c <strlen+0x4>

fffd4680 <_sbrk>:
caddr_t _sbrk ( int incr )
{
  static unsigned char *heap = NULL;
  unsigned char *prev_heap;

    if (heap == NULL)
fffd4680:	e59f2038 	ldr	r2, [pc, #56]	; fffd46c0 <_sbrk+0x40>
{
fffd4684:	e1a03000 	mov	r3, r0
fffd4688:	e59f1034 	ldr	r1, [pc, #52]	; fffd46c4 <_sbrk+0x44>
    if (heap == NULL)
fffd468c:	e08f2002 	add	r2, pc, r2
fffd4690:	e5920000 	ldr	r0, [r2]
{
fffd4694:	e08f1001 	add	r1, pc, r1
    if (heap == NULL)
fffd4698:	e3500000 	cmp	r0, #0
    {
        heap = (unsigned char *)&end;
fffd469c:	059f0024 	ldreq	r0, [pc, #36]	; fffd46c8 <_sbrk+0x48>
fffd46a0:	07911000 	ldreq	r1, [r1, r0]
fffd46a4:	05821000 	streq	r1, [r2]
    }
    prev_heap = heap;
fffd46a8:	e59f201c 	ldr	r2, [pc, #28]	; fffd46cc <_sbrk+0x4c>
fffd46ac:	e08f2002 	add	r2, pc, r2
fffd46b0:	e5920000 	ldr	r0, [r2]
    heap += incr;
fffd46b4:	e0803003 	add	r3, r0, r3
fffd46b8:	e5823000 	str	r3, [r2]
    return (caddr_t) prev_heap;
}
fffd46bc:	e12fff1e 	bx	lr
fffd46c0:	000095a4 	.word	0x000095a4
fffd46c4:	00008b88 	.word	0x00008b88
fffd46c8:	00000014 	.word	0x00000014
fffd46cc:	00009584 	.word	0x00009584

fffd46d0 <link>:

__attribute__ ((used))
int link(char *old, char *new)
{
    return -1;
}
fffd46d0:	e3e00000 	mvn	r0, #0
fffd46d4:	e12fff1e 	bx	lr

fffd46d8 <_close>:

__attribute__ ((used))
int _close(int file)
{
  return -1;
}
fffd46d8:	e3e00000 	mvn	r0, #0
fffd46dc:	e12fff1e 	bx	lr

fffd46e0 <_fstat>:

__attribute__ ((used))
int _fstat(int file, struct stat *st)
{
  st->st_mode = S_IFCHR;
fffd46e0:	e3a03a02 	mov	r3, #8192	; 0x2000
  return 0;
}
fffd46e4:	e3a00000 	mov	r0, #0
  st->st_mode = S_IFCHR;
fffd46e8:	e5813004 	str	r3, [r1, #4]
}
fffd46ec:	e12fff1e 	bx	lr

fffd46f0 <_isatty>:

__attribute__ ((used))
int _isatty(int file)
{
  return 1;
}
fffd46f0:	e3a00001 	mov	r0, #1
fffd46f4:	e12fff1e 	bx	lr

fffd46f8 <_lseek>:

__attribute__ ((used))
int _lseek(int file, int ptr, int dir)
{
  return 0;
}
fffd46f8:	e3a00000 	mov	r0, #0
fffd46fc:	e12fff1e 	bx	lr

fffd4700 <_read>:
__attribute__ ((used))
int _read(int file, char *ptr, int len)
{
  return 0;
}
fffd4700:	e3a00000 	mov	r0, #0
fffd4704:	e12fff1e 	bx	lr

fffd4708 <_write>:
__attribute__ ((used))
int _write(int file, char *ptr, int len)
{
  return len;
}
fffd4708:	e1a00002 	mov	r0, r2
fffd470c:	e12fff1e 	bx	lr

fffd4710 <abort>:

__attribute__ ((used))
void abort (void)
{
	LogMessage ("\n\n");
fffd4710:	e59f0030 	ldr	r0, [pc, #48]	; fffd4748 <abort+0x38>
{
fffd4714:	e92d4010 	push	{r4, lr}
	LogMessage ("\n\n");
fffd4718:	e08f0000 	add	r0, pc, r0
fffd471c:	eb0000e5 	bl	fffd4ab8 <LogMessage>
	LogError ("***************\n");
fffd4720:	e59f0024 	ldr	r0, [pc, #36]	; fffd474c <abort+0x3c>
fffd4724:	e08f0000 	add	r0, pc, r0
fffd4728:	eb00010e 	bl	fffd4b68 <LogError>
	LogError ("   Test abort  \n");
fffd472c:	e59f001c 	ldr	r0, [pc, #28]	; fffd4750 <abort+0x40>
fffd4730:	e08f0000 	add	r0, pc, r0
fffd4734:	eb00010b 	bl	fffd4b68 <LogError>
	LogError ("*************** \n");
fffd4738:	e59f0014 	ldr	r0, [pc, #20]	; fffd4754 <abort+0x44>
fffd473c:	e08f0000 	add	r0, pc, r0
fffd4740:	eb000108 	bl	fffd4b68 <LogError>
fffd4744:	eafffffe 	b	fffd4744 <abort+0x34>
fffd4748:	00007e0f 	.word	0x00007e0f
fffd474c:	000086b2 	.word	0x000086b2
fffd4750:	000085d1 	.word	0x000085d1
fffd4754:	000085d6 	.word	0x000085d6

fffd4758 <exit>:

__attribute__ ((used))
void exit (int status)
{
  /* Abort called */
	if (status!=0)
fffd4758:	e2505000 	subs	r5, r0, #0
{
fffd475c:	e92d4010 	push	{r4, lr}
	if (status!=0)
fffd4760:	0a00000d 	beq	fffd479c <exit+0x44>
	{
		LogMessage ("\n\n");
fffd4764:	e59f0064 	ldr	r0, [pc, #100]	; fffd47d0 <exit+0x78>
		LogError ("**********************************\n");
fffd4768:	e59f4064 	ldr	r4, [pc, #100]	; fffd47d4 <exit+0x7c>
		LogMessage ("\n\n");
fffd476c:	e08f0000 	add	r0, pc, r0
		LogError ("**********************************\n");
fffd4770:	e08f4004 	add	r4, pc, r4
		LogMessage ("\n\n");
fffd4774:	eb0000cf 	bl	fffd4ab8 <LogMessage>
		LogError ("**********************************\n");
fffd4778:	e1a00004 	mov	r0, r4
fffd477c:	eb0000f9 	bl	fffd4b68 <LogError>
		LogError ("   Test exit with error num %d     \n",status);
fffd4780:	e59f0050 	ldr	r0, [pc, #80]	; fffd47d8 <exit+0x80>
fffd4784:	e1a01005 	mov	r1, r5
fffd4788:	e08f0000 	add	r0, pc, r0
fffd478c:	eb0000f5 	bl	fffd4b68 <LogError>
		LogError ("**********************************\n");
fffd4790:	e1a00004 	mov	r0, r4
fffd4794:	eb0000f3 	bl	fffd4b68 <LogError>
fffd4798:	eafffffe 	b	fffd4798 <exit+0x40>
	}
	else
	{
		 LogMessage ("\n\n");
fffd479c:	e59f0038 	ldr	r0, [pc, #56]	; fffd47dc <exit+0x84>
		 LogPass ("**********************************\n");
fffd47a0:	e59f4038 	ldr	r4, [pc, #56]	; fffd47e0 <exit+0x88>
		 LogMessage ("\n\n");
fffd47a4:	e08f0000 	add	r0, pc, r0
		 LogPass ("**********************************\n");
fffd47a8:	e08f4004 	add	r4, pc, r4
		 LogMessage ("\n\n");
fffd47ac:	eb0000c1 	bl	fffd4ab8 <LogMessage>
		 LogPass ("**********************************\n");
fffd47b0:	e1a00004 	mov	r0, r4
fffd47b4:	eb00011b 	bl	fffd4c28 <LogPass>
		 LogPass ("  Test exit with no errors        \n");
fffd47b8:	e59f0024 	ldr	r0, [pc, #36]	; fffd47e4 <exit+0x8c>
fffd47bc:	e08f0000 	add	r0, pc, r0
fffd47c0:	eb000118 	bl	fffd4c28 <LogPass>
		 LogPass ("**********************************\n"); 
fffd47c4:	e1a00004 	mov	r0, r4
fffd47c8:	eb000116 	bl	fffd4c28 <LogPass>
fffd47cc:	eafffff1 	b	fffd4798 <exit+0x40>
fffd47d0:	00007dbb 	.word	0x00007dbb
fffd47d4:	00008653 	.word	0x00008653
fffd47d8:	0000859c 	.word	0x0000859c
fffd47dc:	00007d83 	.word	0x00007d83
fffd47e0:	0000861b 	.word	0x0000861b
fffd47e4:	0000858d 	.word	0x0000858d

fffd47e8 <Uart_AutoDetect>:
	UartSendStr (FormattedTextBuffer);
}
//-------------------------------------------------------------

extern void Uart_AutoDetect (void)
{
fffd47e8:	e59f3014 	ldr	r3, [pc, #20]	; fffd4804 <Uart_AutoDetect+0x1c>
// It /*update baud rate to 115384bps and*/ disable interrupts. 

UINT32 UART_NUM_g;
extern void UartSetNum (int UART_Num)
{
	UART_NUM_g = UART_Num;
fffd47ec:	e59f2014 	ldr	r2, [pc, #20]	; fffd4808 <Uart_AutoDetect+0x20>
{
fffd47f0:	e08f3003 	add	r3, pc, r3
	UART_NUM_g = UART_Num;
fffd47f4:	e7933002 	ldr	r3, [r3, r2]
fffd47f8:	e3a02000 	mov	r2, #0
fffd47fc:	e5832000 	str	r2, [r3]
}
fffd4800:	e12fff1e 	bx	lr
fffd4804:	00008a2c 	.word	0x00008a2c
fffd4808:	00000000 	.word	0x00000000

fffd480c <UartSetNum>:
{
fffd480c:	e59f3010 	ldr	r3, [pc, #16]	; fffd4824 <UartSetNum+0x18>
	UART_NUM_g = UART_Num;
fffd4810:	e59f2010 	ldr	r2, [pc, #16]	; fffd4828 <UartSetNum+0x1c>
{
fffd4814:	e08f3003 	add	r3, pc, r3
	UART_NUM_g = UART_Num;
fffd4818:	e7933002 	ldr	r3, [r3, r2]
fffd481c:	e5830000 	str	r0, [r3]
}
fffd4820:	e12fff1e 	bx	lr
fffd4824:	00008a08 	.word	0x00008a08
fffd4828:	00000000 	.word	0x00000000

fffd482c <UartInit>:

//-------------------------------------------------------------
// Fixed to UART3 connected to SI2 @ 115K
extern void UartInit (void)
{
fffd482c:	e59f307c 	ldr	r3, [pc, #124]	; fffd48b0 <UartInit+0x84>
	UINT8 LCR;

	UART_NUM_g = 3;
fffd4830:	e59f207c 	ldr	r2, [pc, #124]	; fffd48b4 <UartInit+0x88>
{
fffd4834:	e92d4010 	push	{r4, lr}
fffd4838:	e08f3003 	add	r3, pc, r3

	while ((READ_REG(UART_LSR(3))&0x40) == 0x00); // wait for THRE (Transmitter Holding Register Empty) and TSR (Transmitter Shift Register) to be empty.
fffd483c:	e59f4074 	ldr	r4, [pc, #116]	; fffd48b8 <UartInit+0x8c>
	UART_NUM_g = 3;
fffd4840:	e7933002 	ldr	r3, [r3, r2]
fffd4844:	e3a02003 	mov	r2, #3
fffd4848:	e5832000 	str	r2, [r3]
	while ((READ_REG(UART_LSR(3))&0x40) == 0x00); // wait for THRE (Transmitter Holding Register Empty) and TSR (Transmitter Shift Register) to be empty.
fffd484c:	e5d43014 	ldrb	r3, [r4, #20]
fffd4850:	e3130040 	tst	r3, #64	; 0x40
fffd4854:	0afffffc 	beq	fffd484c <UartInit+0x20>
	Sleep (10000);
fffd4858:	e3020710 	movw	r0, #10000	; 0x2710
fffd485c:	eb0001de 	bl	fffd4fdc <Sleep>

	WRITE_REG (UART_IER(3),0x00); // disable all interrupts; use polling mode	
fffd4860:	e3a03000 	mov	r3, #0
	WRITE_REG (UART_FCR(3),0x07); // reset TX and RX FIFO
fffd4864:	e3a02007 	mov	r2, #7
	WRITE_REG (UART_IER(3),0x00); // disable all interrupts; use polling mode	
fffd4868:	e5c43004 	strb	r3, [r4, #4]
	WRITE_REG (UART_FCR(3),0x07); // reset TX and RX FIFO
fffd486c:	e5c42008 	strb	r2, [r4, #8]
	
	
	LCR = 0x03; // 8N1
	LCR |= 0x80; // Set DLAB bit; Accesses the Divisor Latch Registers (DLL, DLM).
	WRITE_REG (UART_LCR(3), LCR);
fffd4870:	e3e0207c 	mvn	r2, #124	; 0x7c
fffd4874:	e5c4200c 	strb	r2, [r4, #12]
	WRITE_REG (UART_DLL(3), 11); // Baud Rate = UART Clock 24MHz / (16 * (11+2)) = 115384
fffd4878:	e3a0200b 	mov	r2, #11
fffd487c:	e5c42000 	strb	r2, [r4]
	WRITE_REG (UART_DLM(3), 0x00); 
	LCR &= 0x7F; // Clear DLAB bit; Accesses RBR, THR or IER registers.
	WRITE_REG (UART_LCR(3), LCR);
	
	// Set UART3 output to SI2
	WRITE_REG (SPSWC, (READ_REG(SPSWC)&0xFFFFFFF8) | 0x02); 
fffd4880:	e59f2034 	ldr	r2, [pc, #52]	; fffd48bc <UartInit+0x90>
	WRITE_REG (UART_DLM(3), 0x00); 
fffd4884:	e5c43004 	strb	r3, [r4, #4]
	WRITE_REG (UART_LCR(3), LCR);
fffd4888:	e3a03003 	mov	r3, #3
fffd488c:	e5c4300c 	strb	r3, [r4, #12]
	WRITE_REG (SPSWC, (READ_REG(SPSWC)&0xFFFFFFF8) | 0x02); 
fffd4890:	e5923038 	ldr	r3, [r2, #56]	; 0x38
fffd4894:	e3c33007 	bic	r3, r3, #7
fffd4898:	e3833002 	orr	r3, r3, #2
fffd489c:	e5823038 	str	r3, [r2, #56]	; 0x38

	// Set SI2 Mux pins
	SET_BIT_REG (MFSEL1,11);
fffd48a0:	e592300c 	ldr	r3, [r2, #12]
fffd48a4:	e3833b02 	orr	r3, r3, #2048	; 0x800
fffd48a8:	e582300c 	str	r3, [r2, #12]
	
}
fffd48ac:	e8bd8010 	pop	{r4, pc}
fffd48b0:	000089e4 	.word	0x000089e4
fffd48b4:	00000000 	.word	0x00000000
fffd48b8:	f0004000 	.word	0xf0004000
fffd48bc:	f0800000 	.word	0xf0800000

fffd48c0 <TestMsgInit>:
	UartInit ();
fffd48c0:	eaffffd9 	b	fffd482c <UartInit>

fffd48c4 <UartSendBuff>:
//-------------------------------------------------------------
extern void UartSendBuff (const void *BuffOut, UINT32 NumberOfBytesToSend)
{
fffd48c4:	e59f2050 	ldr	r2, [pc, #80]	; fffd491c <UartSendBuff+0x58>
fffd48c8:	e0801001 	add	r1, r0, r1
	UINT8 *pBuff;
	pBuff = (UINT8*) BuffOut;

	while (NumberOfBytesToSend!=0)
fffd48cc:	e1510000 	cmp	r1, r0
	{
		while ((READ_REG(UART_LSR(UART_NUM_g))&0x20) == 0x00); // wait for THRE (Transmitter Holding Register Empty) to be set.
fffd48d0:	e59fc048 	ldr	r12, [pc, #72]	; fffd4920 <UartSendBuff+0x5c>
{
fffd48d4:	e08f2002 	add	r2, pc, r2
	while (NumberOfBytesToSend!=0)
fffd48d8:	012fff1e 	bxeq	lr
{
fffd48dc:	e92d4010 	push	{r4, lr}
		while ((READ_REG(UART_LSR(UART_NUM_g))&0x20) == 0x00); // wait for THRE (Transmitter Holding Register Empty) to be set.
fffd48e0:	e59f303c 	ldr	r3, [pc, #60]	; fffd4924 <UartSendBuff+0x60>
fffd48e4:	e7923003 	ldr	r3, [r2, r3]
fffd48e8:	e5933000 	ldr	r3, [r3]
fffd48ec:	e1a03603 	lsl	r3, r3, #12
fffd48f0:	e083400c 	add	r4, r3, r12
fffd48f4:	e5d4e000 	ldrb	lr, [r4]
fffd48f8:	e31e0020 	tst	lr, #32
fffd48fc:	0afffffc 	beq	fffd48f4 <UartSendBuff+0x30>
		WRITE_REG (UART_THR(UART_NUM_g), *pBuff);
fffd4900:	e4d0e001 	ldrb	lr, [r0], #1
fffd4904:	e283320f 	add	r3, r3, #-268435456	; 0xf0000000
fffd4908:	e2833a01 	add	r3, r3, #4096	; 0x1000
	while (NumberOfBytesToSend!=0)
fffd490c:	e1510000 	cmp	r1, r0
		WRITE_REG (UART_THR(UART_NUM_g), *pBuff);
fffd4910:	e5c3e000 	strb	lr, [r3]
	while (NumberOfBytesToSend!=0)
fffd4914:	1afffff1 	bne	fffd48e0 <UartSendBuff+0x1c>
fffd4918:	e8bd8010 	pop	{r4, pc}
fffd491c:	00008948 	.word	0x00008948
fffd4920:	f0001014 	.word	0xf0001014
fffd4924:	00000000 	.word	0x00000000

fffd4928 <UartReviceBuff>:
	}
}

//-------------------------------------------------------------	
extern UINT8 UartReviceBuff (void *BuffIn, UINT32 NumberOfBytesToreceive, UINT32 *NumberOfBytesreceived, UINT32 IntervalTimeout, UINT32 TotalTimeout) 
{
fffd4928:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	pBuff = (UINT8*) BuffIn;
	UINT32 l_IntervalTimeout, l_NumberOfBytesreceived;
	UINT8 l_LSR;
	UINT8 status;

	l_IntervalTimeout = IntervalTimeout;
fffd492c:	e1a0e003 	mov	lr, r3
{
fffd4930:	e59d6018 	ldr	r6, [sp, #24]
	l_NumberOfBytesreceived = 0;
fffd4934:	e3a05000 	mov	r5, #0
		{
			status = 0;
			break;
		}

		l_LSR = READ_REG(UART_LSR(UART_NUM_g));
fffd4938:	e59f8094 	ldr	r8, [pc, #148]	; fffd49d4 <UartReviceBuff+0xac>
{
fffd493c:	e59f7094 	ldr	r7, [pc, #148]	; fffd49d8 <UartReviceBuff+0xb0>
fffd4940:	e08f7007 	add	r7, pc, r7
		if (NumberOfBytesToreceive == 0) // end
fffd4944:	e3510000 	cmp	r1, #0
fffd4948:	0a000017 	beq	fffd49ac <UartReviceBuff+0x84>
		l_LSR = READ_REG(UART_LSR(UART_NUM_g));
fffd494c:	e59fc088 	ldr	r12, [pc, #136]	; fffd49dc <UartReviceBuff+0xb4>
fffd4950:	e797c00c 	ldr	r12, [r7, r12]
fffd4954:	e59c4000 	ldr	r4, [r12]
fffd4958:	e1a0c604 	lsl	r12, r4, #12
fffd495c:	e7d84604 	ldrb	r4, [r8, r4, lsl #12]
fffd4960:	e6ef4074 	uxtb	r4, r4

		if ((l_LSR&0x01) == 0x01) // check RFDR; RxFIFO contains at least one received data word
fffd4964:	e3140001 	tst	r4, #1
fffd4968:	0a000006 	beq	fffd4988 <UartReviceBuff+0x60>
		{
			*pBuff = READ_REG (UART_THR(UART_NUM_g));
fffd496c:	e28cc20f 	add	r12, r12, #-268435456	; 0xf0000000
			pBuff++;
			l_IntervalTimeout = IntervalTimeout;
			l_NumberOfBytesreceived++;
fffd4970:	e2855001 	add	r5, r5, #1
			*pBuff = READ_REG (UART_THR(UART_NUM_g));
fffd4974:	e28cca01 	add	r12, r12, #4096	; 0x1000
			NumberOfBytesToreceive--;
fffd4978:	e2411001 	sub	r1, r1, #1
			*pBuff = READ_REG (UART_THR(UART_NUM_g));
fffd497c:	e5dcc000 	ldrb	r12, [r12]
			l_IntervalTimeout = IntervalTimeout;
fffd4980:	e1a0e003 	mov	lr, r3
			*pBuff = READ_REG (UART_THR(UART_NUM_g));
fffd4984:	e4c0c001 	strb	r12, [r0], #1
		}

		if ((l_LSR&0x1E) != 0) // OEI (Overrun Error Indicator); PEI (Parity Error Indicator); FEI (Framing Error Indicator); BII (Break Interrupt Indicator)
fffd4988:	e314001e 	tst	r4, #30
fffd498c:	1a00000a 	bne	fffd49bc <UartReviceBuff+0x94>
		{
			status = 1;
			break;
		}

		if (l_IntervalTimeout == 0) // IntervalTimeout
fffd4990:	e35e0000 	cmp	lr, #0
fffd4994:	0a00000a 	beq	fffd49c4 <UartReviceBuff+0x9c>
		{
			status = 2;
			break;
		}

		if (TotalTimeout == 0) // TotalTimeout
fffd4998:	e3560000 	cmp	r6, #0
fffd499c:	0a00000a 	beq	fffd49cc <UartReviceBuff+0xa4>
		{
			status = 3;
			break;
		}

		TotalTimeout--;
fffd49a0:	e2466001 	sub	r6, r6, #1
		l_IntervalTimeout--;
fffd49a4:	e24ee001 	sub	lr, lr, #1
		if (NumberOfBytesToreceive == 0) // end
fffd49a8:	eaffffe5 	b	fffd4944 <UartReviceBuff+0x1c>
			status = 0;
fffd49ac:	e1a00001 	mov	r0, r1

	}

	if (NumberOfBytesreceived != NULL)
fffd49b0:	e3520000 	cmp	r2, #0
		*NumberOfBytesreceived = l_NumberOfBytesreceived;
fffd49b4:	15825000 	strne	r5, [r2]

	return (status);
}
fffd49b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			status = 1;
fffd49bc:	e3a00001 	mov	r0, #1
fffd49c0:	eafffffa 	b	fffd49b0 <UartReviceBuff+0x88>
			status = 2;
fffd49c4:	e3a00002 	mov	r0, #2
fffd49c8:	eafffff8 	b	fffd49b0 <UartReviceBuff+0x88>
			status = 3;
fffd49cc:	e3a00003 	mov	r0, #3
fffd49d0:	eafffff6 	b	fffd49b0 <UartReviceBuff+0x88>
fffd49d4:	f0001014 	.word	0xf0001014
fffd49d8:	000088dc 	.word	0x000088dc
fffd49dc:	00000000 	.word	0x00000000

fffd49e0 <UartSendStr>:
//-------------------------------------
extern void UartSendStr (const char *Str)
{
	while (*Str != 0)
	{
		while ((READ_REG(UART_LSR(UART_NUM_g))&0x20) == 0x00); // wait for THRE (Transmitter Holding Register Empty) to be set.
fffd49e0:	e59fc07c 	ldr	r12, [pc, #124]	; fffd4a64 <UartSendStr+0x84>
fffd49e4:	e2400001 	sub	r0, r0, #1
{
fffd49e8:	e59f1078 	ldr	r1, [pc, #120]	; fffd4a68 <UartSendStr+0x88>
fffd49ec:	e92d4070 	push	{r4, r5, r6, lr}
		WRITE_REG (UART_THR(UART_NUM_g), *Str);
		if (*Str == 0x0A)
		{
			while ((READ_REG(UART_LSR(UART_NUM_g))&0x20) == 0x00); // wait for THRE (Transmitter Holding Register Empty) to be set.
			WRITE_REG (UART_THR(UART_NUM_g), 0x0D);  // add CR and LF
fffd49f0:	e3a0400d 	mov	r4, #13
{
fffd49f4:	e08f1001 	add	r1, pc, r1
	while (*Str != 0)
fffd49f8:	e5f02001 	ldrb	r2, [r0, #1]!
fffd49fc:	e3520000 	cmp	r2, #0
fffd4a00:	08bd8070 	popeq	{r4, r5, r6, pc}
		while ((READ_REG(UART_LSR(UART_NUM_g))&0x20) == 0x00); // wait for THRE (Transmitter Holding Register Empty) to be set.
fffd4a04:	e59f3060 	ldr	r3, [pc, #96]	; fffd4a6c <UartSendStr+0x8c>
fffd4a08:	e791e003 	ldr	lr, [r1, r3]
fffd4a0c:	e59e3000 	ldr	r3, [lr]
fffd4a10:	e1a03603 	lsl	r3, r3, #12
fffd4a14:	e083600c 	add	r6, r3, r12
fffd4a18:	e5d65000 	ldrb	r5, [r6]
fffd4a1c:	e3150020 	tst	r5, #32
fffd4a20:	0afffffc 	beq	fffd4a18 <UartSendStr+0x38>
		WRITE_REG (UART_THR(UART_NUM_g), *Str);
fffd4a24:	e283320f 	add	r3, r3, #-268435456	; 0xf0000000
fffd4a28:	e2833a01 	add	r3, r3, #4096	; 0x1000
fffd4a2c:	e5c32000 	strb	r2, [r3]
		if (*Str == 0x0A)
fffd4a30:	e5d03000 	ldrb	r3, [r0]
fffd4a34:	e353000a 	cmp	r3, #10
fffd4a38:	1affffee 	bne	fffd49f8 <UartSendStr+0x18>
			while ((READ_REG(UART_LSR(UART_NUM_g))&0x20) == 0x00); // wait for THRE (Transmitter Holding Register Empty) to be set.
fffd4a3c:	e59e3000 	ldr	r3, [lr]
fffd4a40:	e1a03603 	lsl	r3, r3, #12
fffd4a44:	e083e00c 	add	lr, r3, r12
fffd4a48:	e5de2000 	ldrb	r2, [lr]
fffd4a4c:	e3120020 	tst	r2, #32
fffd4a50:	0afffffc 	beq	fffd4a48 <UartSendStr+0x68>
			WRITE_REG (UART_THR(UART_NUM_g), 0x0D);  // add CR and LF
fffd4a54:	e283320f 	add	r3, r3, #-268435456	; 0xf0000000
fffd4a58:	e2833a01 	add	r3, r3, #4096	; 0x1000
fffd4a5c:	e5c34000 	strb	r4, [r3]
fffd4a60:	eaffffe4 	b	fffd49f8 <UartSendStr+0x18>
fffd4a64:	f0001014 	.word	0xf0001014
fffd4a68:	00008828 	.word	0x00008828
fffd4a6c:	00000000 	.word	0x00000000

fffd4a70 <__log_message>:
{
fffd4a70:	e92d4010 	push	{r4, lr}
	FormattedTextBuffer[0] = 0; // clear the string
fffd4a74:	e3a03000 	mov	r3, #0
fffd4a78:	e59f4030 	ldr	r4, [pc, #48]	; fffd4ab0 <__log_message+0x40>
	len = vsnprintf((char*)&FormattedTextBuffer[0], sizeof(FormattedTextBuffer)-1, pFormat, ap); // len is not counting the terminating null character.
fffd4a7c:	e1a02000 	mov	r2, r0
	FormattedTextBuffer[0] = 0; // clear the string
fffd4a80:	e08f4004 	add	r4, pc, r4
fffd4a84:	e5c43000 	strb	r3, [r4]
	len = vsnprintf((char*)&FormattedTextBuffer[0], sizeof(FormattedTextBuffer)-1, pFormat, ap); // len is not counting the terminating null character.
fffd4a88:	e1a00004 	mov	r0, r4
fffd4a8c:	e1a03001 	mov	r3, r1
fffd4a90:	e3a010ff 	mov	r1, #255	; 0xff
fffd4a94:	ebfffe5a 	bl	fffd4404 <vsnprintf>
	if (len >= (sizeof(FormattedTextBuffer)-1) )
fffd4a98:	e35000fe 	cmp	r0, #254	; 0xfe
		UartSendStr ((char *)&FormattedTextBuffer[0]);
fffd4a9c:	91a00004 	movls	r0, r4
		UartSendStr (pErrorMsg);
fffd4aa0:	859f000c 	ldrhi	r0, [pc, #12]	; fffd4ab4 <__log_message+0x44>
fffd4aa4:	808f0000 	addhi	r0, pc, r0
}
fffd4aa8:	e8bd4010 	pop	{r4, lr}
		UartSendStr ((char *)&FormattedTextBuffer[0]);
fffd4aac:	eaffffcb 	b	fffd49e0 <UartSendStr>
fffd4ab0:	000091b4 	.word	0x000091b4
fffd4ab4:	000082c9 	.word	0x000082c9

fffd4ab8 <LogMessage>:
{
fffd4ab8:	e92d000f 	push	{r0, r1, r2, r3}
fffd4abc:	e92d4007 	push	{r0, r1, r2, lr}
    va_start(ap, pFormat);
fffd4ac0:	e28d1014 	add	r1, sp, #20
    __log_message (pFormat, ap);
fffd4ac4:	e59d0010 	ldr	r0, [sp, #16]
    va_start(ap, pFormat);
fffd4ac8:	e58d1004 	str	r1, [sp, #4]
    __log_message (pFormat, ap);
fffd4acc:	ebffffe7 	bl	fffd4a70 <__log_message>
}
fffd4ad0:	e28dd00c 	add	sp, sp, #12
fffd4ad4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
fffd4ad8:	e28dd010 	add	sp, sp, #16
fffd4adc:	e12fff1e 	bx	lr

fffd4ae0 <SetColor>:
{
fffd4ae0:	e92d4013 	push	{r0, r1, r4, lr}
	snprintf (FormattedTextBuffer,sizeof(FormattedTextBuffer)-1,"%c[%u;%um",0x1B,ForeColor+COLOR_FOREGROUND,BackColor+COLOR_BACKGROUND);
fffd4ae4:	e2811028 	add	r1, r1, #40	; 0x28
fffd4ae8:	e59f4034 	ldr	r4, [pc, #52]	; fffd4b24 <SetColor+0x44>
fffd4aec:	e280001e 	add	r0, r0, #30
fffd4af0:	e3a0301b 	mov	r3, #27
fffd4af4:	e59f202c 	ldr	r2, [pc, #44]	; fffd4b28 <SetColor+0x48>
fffd4af8:	e08f4004 	add	r4, pc, r4
fffd4afc:	e58d1004 	str	r1, [sp, #4]
fffd4b00:	e58d0000 	str	r0, [sp]
fffd4b04:	e3a010ff 	mov	r1, #255	; 0xff
fffd4b08:	e08f2002 	add	r2, pc, r2
fffd4b0c:	e1a00004 	mov	r0, r4
fffd4b10:	ebfffeae 	bl	fffd45d0 <snprintf>
	UartSendStr (FormattedTextBuffer);
fffd4b14:	e1a00004 	mov	r0, r4
}
fffd4b18:	e28dd008 	add	sp, sp, #8
fffd4b1c:	e8bd4010 	pop	{r4, lr}
	UartSendStr (FormattedTextBuffer);
fffd4b20:	eaffffae 	b	fffd49e0 <UartSendStr>
fffd4b24:	0000913c 	.word	0x0000913c
fffd4b28:	0000829f 	.word	0x0000829f

fffd4b2c <LogMessageColor>:
{
fffd4b2c:	e92d000e 	push	{r1, r2, r3}
fffd4b30:	e92d4003 	push	{r0, r1, lr}
	SetColor (ForeColor, COLOR_DEFAULT);
fffd4b34:	e3a01009 	mov	r1, #9
fffd4b38:	ebffffe8 	bl	fffd4ae0 <SetColor>
	va_start(ap, pFormat);
fffd4b3c:	e28d1010 	add	r1, sp, #16
	__log_message (pFormat, ap);
fffd4b40:	e59d000c 	ldr	r0, [sp, #12]
	va_start(ap, pFormat);
fffd4b44:	e58d1004 	str	r1, [sp, #4]
	__log_message (pFormat, ap);
fffd4b48:	ebffffc8 	bl	fffd4a70 <__log_message>
	SetColor (COLOR_DEFAULT, COLOR_DEFAULT);
fffd4b4c:	e3a01009 	mov	r1, #9
fffd4b50:	e1a00001 	mov	r0, r1
fffd4b54:	ebffffe1 	bl	fffd4ae0 <SetColor>
}
fffd4b58:	e28dd008 	add	sp, sp, #8
fffd4b5c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
fffd4b60:	e28dd00c 	add	sp, sp, #12
fffd4b64:	e12fff1e 	bx	lr

fffd4b68 <LogError>:
{
fffd4b68:	e92d000f 	push	{r0, r1, r2, r3}
fffd4b6c:	e92d4007 	push	{r0, r1, r2, lr}
	SetColor (COLOR_RED, COLOR_DEFAULT);
fffd4b70:	e3a01009 	mov	r1, #9
fffd4b74:	e3a00001 	mov	r0, #1
fffd4b78:	ebffffd8 	bl	fffd4ae0 <SetColor>
    va_start(ap, pFormat);
fffd4b7c:	e28d1014 	add	r1, sp, #20
    __log_message (pFormat, ap);
fffd4b80:	e59d0010 	ldr	r0, [sp, #16]
    va_start(ap, pFormat);
fffd4b84:	e58d1004 	str	r1, [sp, #4]
    __log_message (pFormat, ap);
fffd4b88:	ebffffb8 	bl	fffd4a70 <__log_message>
	SetColor (COLOR_DEFAULT, COLOR_DEFAULT);
fffd4b8c:	e3a01009 	mov	r1, #9
fffd4b90:	e1a00001 	mov	r0, r1
fffd4b94:	ebffffd1 	bl	fffd4ae0 <SetColor>
}
fffd4b98:	e28dd00c 	add	sp, sp, #12
fffd4b9c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
fffd4ba0:	e28dd010 	add	sp, sp, #16
fffd4ba4:	e12fff1e 	bx	lr

fffd4ba8 <LogWarning>:
{
fffd4ba8:	e92d000f 	push	{r0, r1, r2, r3}
fffd4bac:	e92d4007 	push	{r0, r1, r2, lr}
	SetColor (COLOR_MAGENTA,COLOR_DEFAULT );
fffd4bb0:	e3a01009 	mov	r1, #9
fffd4bb4:	e3a00005 	mov	r0, #5
fffd4bb8:	ebffffc8 	bl	fffd4ae0 <SetColor>
	va_start(ap, pFormat);
fffd4bbc:	e28d1014 	add	r1, sp, #20
	__log_message (pFormat, ap);
fffd4bc0:	e59d0010 	ldr	r0, [sp, #16]
	va_start(ap, pFormat);
fffd4bc4:	e58d1004 	str	r1, [sp, #4]
	__log_message (pFormat, ap);
fffd4bc8:	ebffffa8 	bl	fffd4a70 <__log_message>
	SetColor (COLOR_DEFAULT, COLOR_DEFAULT);
fffd4bcc:	e3a01009 	mov	r1, #9
fffd4bd0:	e1a00001 	mov	r0, r1
fffd4bd4:	ebffffc1 	bl	fffd4ae0 <SetColor>
}
fffd4bd8:	e28dd00c 	add	sp, sp, #12
fffd4bdc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
fffd4be0:	e28dd010 	add	sp, sp, #16
fffd4be4:	e12fff1e 	bx	lr

fffd4be8 <LogTitle>:
{
fffd4be8:	e92d000f 	push	{r0, r1, r2, r3}
fffd4bec:	e92d4007 	push	{r0, r1, r2, lr}
	SetColor (COLOR_MAGENTA, COLOR_DEFAULT);
fffd4bf0:	e3a01009 	mov	r1, #9
fffd4bf4:	e3a00005 	mov	r0, #5
fffd4bf8:	ebffffb8 	bl	fffd4ae0 <SetColor>
    va_start(ap, pFormat);
fffd4bfc:	e28d1014 	add	r1, sp, #20
    __log_message (pFormat, ap);
fffd4c00:	e59d0010 	ldr	r0, [sp, #16]
    va_start(ap, pFormat);
fffd4c04:	e58d1004 	str	r1, [sp, #4]
    __log_message (pFormat, ap);
fffd4c08:	ebffff98 	bl	fffd4a70 <__log_message>
	SetColor (COLOR_DEFAULT, COLOR_DEFAULT);
fffd4c0c:	e3a01009 	mov	r1, #9
fffd4c10:	e1a00001 	mov	r0, r1
fffd4c14:	ebffffb1 	bl	fffd4ae0 <SetColor>
}
fffd4c18:	e28dd00c 	add	sp, sp, #12
fffd4c1c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
fffd4c20:	e28dd010 	add	sp, sp, #16
fffd4c24:	e12fff1e 	bx	lr

fffd4c28 <LogPass>:
{
fffd4c28:	e92d000f 	push	{r0, r1, r2, r3}
fffd4c2c:	e92d4007 	push	{r0, r1, r2, lr}
	SetColor (COLOR_GREEN, COLOR_DEFAULT);
fffd4c30:	e3a01009 	mov	r1, #9
fffd4c34:	e3a00002 	mov	r0, #2
fffd4c38:	ebffffa8 	bl	fffd4ae0 <SetColor>
    va_start(ap, pFormat);
fffd4c3c:	e28d1014 	add	r1, sp, #20
    __log_message (pFormat, ap);
fffd4c40:	e59d0010 	ldr	r0, [sp, #16]
    va_start(ap, pFormat);
fffd4c44:	e58d1004 	str	r1, [sp, #4]
    __log_message (pFormat, ap);
fffd4c48:	ebffff88 	bl	fffd4a70 <__log_message>
	SetColor (COLOR_DEFAULT, COLOR_DEFAULT);
fffd4c4c:	e3a01009 	mov	r1, #9
fffd4c50:	e1a00001 	mov	r0, r1
fffd4c54:	ebffffa1 	bl	fffd4ae0 <SetColor>
}
fffd4c58:	e28dd00c 	add	sp, sp, #12
fffd4c5c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
fffd4c60:	e28dd010 	add	sp, sp, #16
fffd4c64:	e12fff1e 	bx	lr

fffd4c68 <LogHeader>:
{
fffd4c68:	e92d000f 	push	{r0, r1, r2, r3}
fffd4c6c:	e92d4007 	push	{r0, r1, r2, lr}
	SetColor (COLOR_CYAN, COLOR_DEFAULT);
fffd4c70:	e3a01009 	mov	r1, #9
fffd4c74:	e3a00006 	mov	r0, #6
fffd4c78:	ebffff98 	bl	fffd4ae0 <SetColor>
	UartSendStr ("***************************************************\n");
fffd4c7c:	e59f003c 	ldr	r0, [pc, #60]	; fffd4cc0 <LogHeader+0x58>
fffd4c80:	e08f0000 	add	r0, pc, r0
fffd4c84:	ebffff55 	bl	fffd49e0 <UartSendStr>
    va_start(ap, pFormat);
fffd4c88:	e28d1014 	add	r1, sp, #20
    __log_message (pFormat, ap);
fffd4c8c:	e59d0010 	ldr	r0, [sp, #16]
    va_start(ap, pFormat);
fffd4c90:	e58d1004 	str	r1, [sp, #4]
    __log_message (pFormat, ap);
fffd4c94:	ebffff75 	bl	fffd4a70 <__log_message>
	UartSendStr ("\n***************************************************\n");
fffd4c98:	e59f0024 	ldr	r0, [pc, #36]	; fffd4cc4 <LogHeader+0x5c>
fffd4c9c:	e08f0000 	add	r0, pc, r0
fffd4ca0:	ebffff4e 	bl	fffd49e0 <UartSendStr>
	SetColor (COLOR_DEFAULT, COLOR_DEFAULT);
fffd4ca4:	e3a01009 	mov	r1, #9
fffd4ca8:	e1a00001 	mov	r0, r1
fffd4cac:	ebffff8b 	bl	fffd4ae0 <SetColor>
}
fffd4cb0:	e28dd00c 	add	sp, sp, #12
fffd4cb4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
fffd4cb8:	e28dd010 	add	sp, sp, #16
fffd4cbc:	e12fff1e 	bx	lr
fffd4cc0:	00008132 	.word	0x00008132
fffd4cc4:	00008115 	.word	0x00008115

fffd4cc8 <UartSendChar>:
}
//-------------------------------------------------------------

//-------------------------------------------------------------
extern void UartSendChar (const char data)
{
fffd4cc8:	e59f3034 	ldr	r3, [pc, #52]	; fffd4d04 <UartSendChar+0x3c>
	while ((READ_REG(UART_LSR(UART_NUM_g))&0x20) == 0x00); // wait for THRE (Transmitter Holding Register Empty) to be set.
fffd4ccc:	e59f2034 	ldr	r2, [pc, #52]	; fffd4d08 <UartSendChar+0x40>
{
fffd4cd0:	e08f3003 	add	r3, pc, r3
	while ((READ_REG(UART_LSR(UART_NUM_g))&0x20) == 0x00); // wait for THRE (Transmitter Holding Register Empty) to be set.
fffd4cd4:	e7933002 	ldr	r3, [r3, r2]
fffd4cd8:	e59f202c 	ldr	r2, [pc, #44]	; fffd4d0c <UartSendChar+0x44>
fffd4cdc:	e5933000 	ldr	r3, [r3]
fffd4ce0:	e1a03603 	lsl	r3, r3, #12
fffd4ce4:	e0832002 	add	r2, r3, r2
fffd4ce8:	e5d21000 	ldrb	r1, [r2]
fffd4cec:	e3110020 	tst	r1, #32
fffd4cf0:	0afffffc 	beq	fffd4ce8 <UartSendChar+0x20>
	WRITE_REG (UART_THR(UART_NUM_g), data);
fffd4cf4:	e283320f 	add	r3, r3, #-268435456	; 0xf0000000
fffd4cf8:	e2833a01 	add	r3, r3, #4096	; 0x1000
fffd4cfc:	e5c30000 	strb	r0, [r3]
}
fffd4d00:	e12fff1e 	bx	lr
fffd4d04:	0000854c 	.word	0x0000854c
fffd4d08:	00000000 	.word	0x00000000
fffd4d0c:	f0001014 	.word	0xf0001014

fffd4d10 <UartWaitForEmpty>:
//-------------------------------------------------------------
// use this function to wait until UART send all it's buffer before change clock freq
extern void UartWaitForEmpty (void)
{
fffd4d10:	e59f3054 	ldr	r3, [pc, #84]	; fffd4d6c <UartWaitForEmpty+0x5c>
fffd4d14:	e24dd008 	sub	sp, sp, #8
	while ((READ_REG(UART_LSR(UART_NUM_g))&0x40) == 0x00); // wait for THRE (Transmitter Holding Register Empty) and TSR (Transmitter Shift Register) to be empty.
fffd4d18:	e59f2050 	ldr	r2, [pc, #80]	; fffd4d70 <UartWaitForEmpty+0x60>
{
fffd4d1c:	e08f3003 	add	r3, pc, r3
	while ((READ_REG(UART_LSR(UART_NUM_g))&0x40) == 0x00); // wait for THRE (Transmitter Holding Register Empty) and TSR (Transmitter Shift Register) to be empty.
fffd4d20:	e7933002 	ldr	r3, [r3, r2]
fffd4d24:	e5932000 	ldr	r2, [r3]
fffd4d28:	e59f3044 	ldr	r3, [pc, #68]	; fffd4d74 <UartWaitForEmpty+0x64>
fffd4d2c:	e0833602 	add	r3, r3, r2, lsl #12
fffd4d30:	e5d32000 	ldrb	r2, [r3]
fffd4d34:	e3120040 	tst	r2, #64	; 0x40
fffd4d38:	0afffffc 	beq	fffd4d30 <UartWaitForEmpty+0x20>
	// some delay. notice needed some delay so UartUpdateTool will pass w/o error log
	volatile unsigned int delay;
	for (delay=0;delay<10000;delay++);
fffd4d3c:	e302270f 	movw	r2, #9999	; 0x270f
fffd4d40:	e3a03000 	mov	r3, #0
fffd4d44:	e58d3004 	str	r3, [sp, #4]
fffd4d48:	e59d3004 	ldr	r3, [sp, #4]
fffd4d4c:	e1530002 	cmp	r3, r2
fffd4d50:	9a000001 	bls	fffd4d5c <UartWaitForEmpty+0x4c>
}
fffd4d54:	e28dd008 	add	sp, sp, #8
fffd4d58:	e12fff1e 	bx	lr
	for (delay=0;delay<10000;delay++);
fffd4d5c:	e59d3004 	ldr	r3, [sp, #4]
fffd4d60:	e2833001 	add	r3, r3, #1
fffd4d64:	e58d3004 	str	r3, [sp, #4]
fffd4d68:	eafffff6 	b	fffd4d48 <UartWaitForEmpty+0x38>
fffd4d6c:	00008500 	.word	0x00008500
fffd4d70:	00000000 	.word	0x00000000
fffd4d74:	f0001014 	.word	0xf0001014

fffd4d78 <KbHit>:
// Input from Console
//----------------------------------

//-----------------------------------
extern int KbHit (void)
{
fffd4d78:	e59f301c 	ldr	r3, [pc, #28]	; fffd4d9c <KbHit+0x24>

	if ( (READ_REG(UART_LSR(UART_NUM_g))&0x01) == 0x01) // check RFDR; RxFIFO contains at least one received data word
fffd4d7c:	e59f201c 	ldr	r2, [pc, #28]	; fffd4da0 <KbHit+0x28>
{
fffd4d80:	e08f3003 	add	r3, pc, r3
	if ( (READ_REG(UART_LSR(UART_NUM_g))&0x01) == 0x01) // check RFDR; RxFIFO contains at least one received data word
fffd4d84:	e7933002 	ldr	r3, [r3, r2]
fffd4d88:	e5932000 	ldr	r2, [r3]
fffd4d8c:	e59f3010 	ldr	r3, [pc, #16]	; fffd4da4 <KbHit+0x2c>
fffd4d90:	e7d30602 	ldrb	r0, [r3, r2, lsl #12]
		return (TRUE); // key was received.
	else
		return (FALSE); // no key is waiting.
}
fffd4d94:	e2000001 	and	r0, r0, #1
fffd4d98:	e12fff1e 	bx	lr
fffd4d9c:	0000849c 	.word	0x0000849c
fffd4da0:	00000000 	.word	0x00000000
fffd4da4:	f0001014 	.word	0xf0001014

fffd4da8 <GetChar>:
//------------------------------------
extern char GetChar (void)
{
fffd4da8:	e59f3020 	ldr	r3, [pc, #32]	; fffd4dd0 <GetChar+0x28>
	char data;

	data = READ_REG (UART_THR(UART_NUM_g));
fffd4dac:	e59f2020 	ldr	r2, [pc, #32]	; fffd4dd4 <GetChar+0x2c>
{
fffd4db0:	e08f3003 	add	r3, pc, r3
	data = READ_REG (UART_THR(UART_NUM_g));
fffd4db4:	e7933002 	ldr	r3, [r3, r2]
fffd4db8:	e5933000 	ldr	r3, [r3]
fffd4dbc:	e283380f 	add	r3, r3, #983040	; 0xf0000
fffd4dc0:	e2833001 	add	r3, r3, #1
fffd4dc4:	e1a03603 	lsl	r3, r3, #12
fffd4dc8:	e5d30000 	ldrb	r0, [r3]

	return (data);
}
fffd4dcc:	e12fff1e 	bx	lr
fffd4dd0:	0000846c 	.word	0x0000846c
fffd4dd4:	00000000 	.word	0x00000000

fffd4dd8 <GetString>:
//------------------------------------
// Note: user should use ENTER key to end the string
extern char GetString (char *string, UINT32 MaxStrLen, UINT8 IsPreset) 
{
fffd4dd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd4ddc:	e1a04000 	mov	r4, r0
fffd4de0:	e1a05002 	mov	r5, r2
fffd4de4:	e24dd01c 	sub	sp, sp, #28
	char data;
	UINT32 index = 0;

	MaxStrLen--; // keep one space for 0x0 (end of string).
fffd4de8:	e241b001 	sub	r11, r1, #1

	SetColor (COLOR_YELLOW, COLOR_DEFAULT);
fffd4dec:	e3a00003 	mov	r0, #3
fffd4df0:	e3a01009 	mov	r1, #9
fffd4df4:	ebffff39 	bl	fffd4ae0 <SetColor>

	if (IsPreset==TRUE)
fffd4df8:	e3550001 	cmp	r5, #1
fffd4dfc:	01a07004 	moveq	r7, r4
fffd4e00:	01a06007 	moveq	r6, r7
fffd4e04:	0a000002 	beq	fffd4e14 <GetString+0x3c>
	UINT32 index = 0;
fffd4e08:	e3a05000 	mov	r5, #0
fffd4e0c:	ea000005 	b	fffd4e28 <GetString+0x50>
	{
		while (*string!=0)
		{
			UartSendChar (*string);
fffd4e10:	ebffffac 	bl	fffd4cc8 <UartSendChar>
fffd4e14:	e0465007 	sub	r5, r6, r7
fffd4e18:	e1a04006 	mov	r4, r6
		while (*string!=0)
fffd4e1c:	e4d60001 	ldrb	r0, [r6], #1
fffd4e20:	e3500000 	cmp	r0, #0
fffd4e24:	1afffff9 	bne	fffd4e10 <GetString+0x38>
		//-----------------------------
		else if (data==0x08)  // back
		{
			if (index!=0) 
			{
				UartSendStr ("\b \b");
fffd4e28:	e59f21a0 	ldr	r2, [pc, #416]	; fffd4fd0 <GetString+0x1f8>
			UartReviceBuff (&tmp, 1, NULL, 1000, 1000);
fffd4e2c:	e28d9017 	add	r9, sp, #23
	*string = 0; 
fffd4e30:	e3a03000 	mov	r3, #0
fffd4e34:	e5c43000 	strb	r3, [r4]
				UartSendStr ("\b \b");
fffd4e38:	e08f2002 	add	r2, pc, r2
			char tmp = 0; // spacial keys has several char
fffd4e3c:	e1cd20f8 	strd	r2, [sp, #8]
		while (KbHit()!=TRUE); // wait for key
fffd4e40:	ebffffcc 	bl	fffd4d78 <KbHit>
fffd4e44:	e3500001 	cmp	r0, #1
fffd4e48:	e1a08000 	mov	r8, r0
fffd4e4c:	1afffffb 	bne	fffd4e40 <GetString+0x68>
		data = GetChar ();
fffd4e50:	ebffffd4 	bl	fffd4da8 <GetChar>
		if (data==0x1B /*ESC*/)  // ESC key or spacial keys
fffd4e54:	e350001b 	cmp	r0, #27
		data = GetChar ();
fffd4e58:	e1a06000 	mov	r6, r0
		if (data==0x1B /*ESC*/)  // ESC key or spacial keys
fffd4e5c:	1a000035 	bne	fffd4f38 <GetString+0x160>
			char tmp = 0; // spacial keys has several char
fffd4e60:	e59d300c 	ldr	r3, [sp, #12]
			UartReviceBuff (&tmp, 1, NULL, 1000, 1000);
fffd4e64:	e3a07ffa 	mov	r7, #1000	; 0x3e8
fffd4e68:	e58d7000 	str	r7, [sp]
fffd4e6c:	e3a02000 	mov	r2, #0
fffd4e70:	e1a01008 	mov	r1, r8
fffd4e74:	e1a00009 	mov	r0, r9
			char tmp = 0; // spacial keys has several char
fffd4e78:	e5cd3017 	strb	r3, [sp, #23]
			UartReviceBuff (&tmp, 1, NULL, 1000, 1000);
fffd4e7c:	e1a03007 	mov	r3, r7
fffd4e80:	ebfffea8 	bl	fffd4928 <UartReviceBuff>
			if (tmp=='[')
fffd4e84:	e5dda017 	ldrb	r10, [sp, #23]
fffd4e88:	e35a005b 	cmp	r10, #91	; 0x5b
fffd4e8c:	1a000020 	bne	fffd4f14 <GetString+0x13c>
				UartReviceBuff (&tmp, 1, NULL, 1000, 1000);
fffd4e90:	e58d7000 	str	r7, [sp]
fffd4e94:	e3a02000 	mov	r2, #0
fffd4e98:	e1a01008 	mov	r1, r8
fffd4e9c:	e1a00009 	mov	r0, r9
fffd4ea0:	ebfffea0 	bl	fffd4928 <UartReviceBuff>
				if (tmp=='D') // back 
fffd4ea4:	e5dd7017 	ldrb	r7, [sp, #23]
fffd4ea8:	e3570044 	cmp	r7, #68	; 0x44
fffd4eac:	1a000009 	bne	fffd4ed8 <GetString+0x100>
					if (index!=0) 
fffd4eb0:	e3550000 	cmp	r5, #0
fffd4eb4:	0a000007 	beq	fffd4ed8 <GetString+0x100>
						UartSendChar (0x1B); 
fffd4eb8:	e1a00006 	mov	r0, r6
						index--;
fffd4ebc:	e2455001 	sub	r5, r5, #1
						UartSendChar (0x1B); 
fffd4ec0:	ebffff80 	bl	fffd4cc8 <UartSendChar>
						string--;	
fffd4ec4:	e2444001 	sub	r4, r4, #1
						UartSendChar ('['); 
fffd4ec8:	e1a0000a 	mov	r0, r10
fffd4ecc:	ebffff7d 	bl	fffd4cc8 <UartSendChar>
						UartSendChar ('D'); 
fffd4ed0:	e1a00007 	mov	r0, r7
fffd4ed4:	ebffff7b 	bl	fffd4cc8 <UartSendChar>
				if (tmp=='C') // forward 
fffd4ed8:	e5dd6017 	ldrb	r6, [sp, #23]
fffd4edc:	e3560043 	cmp	r6, #67	; 0x43
fffd4ee0:	1affffd6 	bne	fffd4e40 <GetString+0x68>
					if (*string!=0) 
fffd4ee4:	e5d43000 	ldrb	r3, [r4]
fffd4ee8:	e3530000 	cmp	r3, #0
fffd4eec:	0affffd3 	beq	fffd4e40 <GetString+0x68>
						UartSendChar (0x1B); 
fffd4ef0:	e3a0001b 	mov	r0, #27
						index++;
fffd4ef4:	e2855001 	add	r5, r5, #1
						UartSendChar (0x1B); 
fffd4ef8:	ebffff72 	bl	fffd4cc8 <UartSendChar>
						UartSendChar ('['); 
fffd4efc:	e3a0005b 	mov	r0, #91	; 0x5b
						string++;	
fffd4f00:	e2844001 	add	r4, r4, #1
						UartSendChar ('['); 
fffd4f04:	ebffff6f 	bl	fffd4cc8 <UartSendChar>
						UartSendChar ('C'); 
fffd4f08:	e1a00006 	mov	r0, r6
fffd4f0c:	ebffff6d 	bl	fffd4cc8 <UartSendChar>
fffd4f10:	eaffffca 	b	fffd4e40 <GetString+0x68>
				SetColor (COLOR_DEFAULT, COLOR_DEFAULT);
fffd4f14:	e3a01009 	mov	r1, #9
fffd4f18:	e1a00001 	mov	r0, r1
fffd4f1c:	ebfffeef 	bl	fffd4ae0 <SetColor>
				UartSendStr ("\n");
fffd4f20:	e59f00ac 	ldr	r0, [pc, #172]	; fffd4fd4 <GetString+0x1fc>
fffd4f24:	e08f0000 	add	r0, pc, r0
			UartSendStr ("\n");
fffd4f28:	ebfffeac 	bl	fffd49e0 <UartSendStr>
				string++;
			}	
		}
		//-----------------------------
	}
}
fffd4f2c:	e1a00006 	mov	r0, r6
fffd4f30:	e28dd01c 	add	sp, sp, #28
fffd4f34:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
		else if (data==0x0A || data==0x0D )
fffd4f38:	e350000d 	cmp	r0, #13
fffd4f3c:	1350000a 	cmpne	r0, #10
fffd4f40:	03a03001 	moveq	r3, #1
fffd4f44:	13a03000 	movne	r3, #0
fffd4f48:	1a000005 	bne	fffd4f64 <GetString+0x18c>
			SetColor (COLOR_DEFAULT, COLOR_DEFAULT);
fffd4f4c:	e3a01009 	mov	r1, #9
fffd4f50:	e1a00001 	mov	r0, r1
fffd4f54:	ebfffee1 	bl	fffd4ae0 <SetColor>
			UartSendStr ("\n");
fffd4f58:	e59f0078 	ldr	r0, [pc, #120]	; fffd4fd8 <GetString+0x200>
fffd4f5c:	e08f0000 	add	r0, pc, r0
fffd4f60:	eafffff0 	b	fffd4f28 <GetString+0x150>
		else if (data==0x08)  // back
fffd4f64:	e3500008 	cmp	r0, #8
fffd4f68:	1a00000a 	bne	fffd4f98 <GetString+0x1c0>
			if (index!=0) 
fffd4f6c:	e3550000 	cmp	r5, #0
fffd4f70:	0affffb2 	beq	fffd4e40 <GetString+0x68>
				UartSendStr ("\b \b");
fffd4f74:	e59d0008 	ldr	r0, [sp, #8]
				index--;
fffd4f78:	e2455001 	sub	r5, r5, #1
				UartSendStr ("\b \b");
fffd4f7c:	ebfffe97 	bl	fffd49e0 <UartSendStr>
				if (*string==0)
fffd4f80:	e5d42000 	ldrb	r2, [r4]
fffd4f84:	e2443001 	sub	r3, r4, #1
fffd4f88:	e3520000 	cmp	r2, #0
					*string = 0;
fffd4f8c:	05442001 	strbeq	r2, [r4, #-1]
				string++;
fffd4f90:	e1a04003 	mov	r4, r3
fffd4f94:	eaffffa9 	b	fffd4e40 <GetString+0x68>
		else if (index==0 && data==' ')
fffd4f98:	e3550000 	cmp	r5, #0
fffd4f9c:	03500020 	cmpeq	r0, #32
fffd4fa0:	01a05003 	moveq	r5, r3
fffd4fa4:	0affffa5 	beq	fffd4e40 <GetString+0x68>
		else if (index<MaxStrLen) // limit typing when reach to end of buffer
fffd4fa8:	e155000b 	cmp	r5, r11
fffd4fac:	2affffa3 	bcs	fffd4e40 <GetString+0x68>
			UartSendChar (data); // ECHO
fffd4fb0:	ebffff44 	bl	fffd4cc8 <UartSendChar>
			if (*string==0)
fffd4fb4:	e5d42000 	ldrb	r2, [r4]
			index++;
fffd4fb8:	e2855001 	add	r5, r5, #1
fffd4fbc:	e2843001 	add	r3, r4, #1
				*string = data;
fffd4fc0:	e5c40000 	strb	r0, [r4]
			if (*string==0)
fffd4fc4:	e3520000 	cmp	r2, #0
				*string = 0;
fffd4fc8:	05c42001 	strbeq	r2, [r4, #1]
fffd4fcc:	eaffffef 	b	fffd4f90 <GetString+0x1b8>
fffd4fd0:	00007faf 	.word	0x00007faf
fffd4fd4:	00007604 	.word	0x00007604
fffd4fd8:	000075cc 	.word	0x000075cc

fffd4fdc <Sleep>:

void Sleep (DWORD Cycles)
{
    volatile DWORD delay;

    while (Cycles!=0)
fffd4fdc:	e3500000 	cmp	r0, #0
    {
         for  (delay=0;delay<0x10;delay++);
fffd4fe0:	e3a02000 	mov	r2, #0
    while (Cycles!=0)
fffd4fe4:	012fff1e 	bxeq	lr
{
fffd4fe8:	e24dd008 	sub	sp, sp, #8
         for  (delay=0;delay<0x10;delay++);
fffd4fec:	e58d2004 	str	r2, [sp, #4]
fffd4ff0:	e59d3004 	ldr	r3, [sp, #4]
fffd4ff4:	e353000f 	cmp	r3, #15
fffd4ff8:	9a000004 	bls	fffd5010 <Sleep+0x34>
         Cycles--;
fffd4ffc:	e2400001 	sub	r0, r0, #1
    while (Cycles!=0)
fffd5000:	e3500000 	cmp	r0, #0
fffd5004:	1afffff8 	bne	fffd4fec <Sleep+0x10>
    }
    return;

} // *End of Delay*
fffd5008:	e28dd008 	add	sp, sp, #8
fffd500c:	e12fff1e 	bx	lr
         for  (delay=0;delay<0x10;delay++);
fffd5010:	e59d3004 	ldr	r3, [sp, #4]
fffd5014:	e2833001 	add	r3, r3, #1
fffd5018:	e58d3004 	str	r3, [sp, #4]
fffd501c:	eafffff3 	b	fffd4ff0 <Sleep+0x14>

fffd5020 <Get_MPCore_ID>:
//-------------------------------------------------
// Accessed CPU within an MPCore core
UINT32 Get_MPCore_ID (void)
{
	UINT32 CPU_ID;
	CP15_READ (CPU_ID, 0, c0, c0, 5);
fffd5020:	ee100fb0 	mrc	15, 0, r0, cr0, cr0, {5}
	//CPU_ID &= 0x03;
	return (CPU_ID);
}
fffd5024:	e12fff1e 	bx	lr

fffd5028 <Get_CPU_ID_CODE>:
//-------------------------------------------------
// reads Main ID register - return the device ID code that contains information about the processor.
UINT32 Get_CPU_ID_CODE (void)
{
	UINT32 CPU_ID_CODE;
	CP15_READ (CPU_ID_CODE, 0, c0, c0, 0);
fffd5028:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	return (CPU_ID_CODE);
}
fffd502c:	e12fff1e 	bx	lr

fffd5030 <Error>:
//-------------------------------------------------

extern void Error (int status)
{
	// bl and r0 registers can identify the calling code
	__asm__ ("BKPT 0x00FF");
fffd5030:	e1200f7f 	bkpt	0x00ff
fffd5034:	eafffffe 	b	fffd5034 <Error+0x4>

fffd5038 <InvalidateCache>:
}
//----------------------------------------------------------
extern void InvalidateCache (void)
{
	// Invalidate Instruction cache.
	CP15_WRITE (0,0,c7,c5,0); // ICIALLU: Invalidate all instruction caches to PoU. Also flushes branch target cache.
fffd5038:	e3a03000 	mov	r3, #0
fffd503c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
	CP15_WRITE (0,0,c7,c5,6); // BPIALL: Invalidate entire branch predictor array.
fffd5040:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
}
fffd5044:	e12fff1e 	bx	lr

fffd5048 <MemoryDumpD>:

//---------------------------------------------------------------------------
//                              Memory Dump Display
//---------------------------------------------------------------------------
extern void MemoryDumpD (UINT32 Address, UINT32 DisplayAddress, UINT16 NumOfLines)
{	
fffd5048:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
fffd504c:	e0805202 	add	r5, r0, r2, lsl #4
	{
		LineBuff [0] = *pData32++;
		LineBuff [1] = *pData32++;
		LineBuff [2] = *pData32++;
		LineBuff [3] = *pData32++;
		LogMessage ("0x%08lX: 0x%08lX 0x%08lX 0x%08lX 0x%08lX \n",DisplayAddress,LineBuff [0],LineBuff [1],LineBuff [2],LineBuff [3]);
fffd5050:	e59f7040 	ldr	r7, [pc, #64]	; fffd5098 <MemoryDumpD+0x50>
	UINT32 *pData32 = (UINT32*)Address;
fffd5054:	e1a04000 	mov	r4, r0
fffd5058:	e0416000 	sub	r6, r1, r0
		LogMessage ("0x%08lX: 0x%08lX 0x%08lX 0x%08lX 0x%08lX \n",DisplayAddress,LineBuff [0],LineBuff [1],LineBuff [2],LineBuff [3]);
fffd505c:	e08f7007 	add	r7, pc, r7
	for (line=0;line<NumOfLines;line++)
fffd5060:	e1540005 	cmp	r4, r5
fffd5064:	e0861004 	add	r1, r6, r4
fffd5068:	1a000001 	bne	fffd5074 <MemoryDumpD+0x2c>
		DisplayAddress+=16;
	}	
}
fffd506c:	e28dd00c 	add	sp, sp, #12
fffd5070:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		LogMessage ("0x%08lX: 0x%08lX 0x%08lX 0x%08lX 0x%08lX \n",DisplayAddress,LineBuff [0],LineBuff [1],LineBuff [2],LineBuff [3]);
fffd5074:	e594300c 	ldr	r3, [r4, #12]
fffd5078:	e1a00007 	mov	r0, r7
fffd507c:	e58d3004 	str	r3, [sp, #4]
fffd5080:	e5943008 	ldr	r3, [r4, #8]
fffd5084:	e58d3000 	str	r3, [sp]
fffd5088:	e5943004 	ldr	r3, [r4, #4]
fffd508c:	e4942010 	ldr	r2, [r4], #16
fffd5090:	ebfffe88 	bl	fffd4ab8 <LogMessage>
fffd5094:	eafffff1 	b	fffd5060 <MemoryDumpD+0x18>
fffd5098:	00007d8f 	.word	0x00007d8f

fffd509c <MemoryDumpW>:
//-------------------------------------------------------------
extern void MemoryDumpW (UINT32 Address, UINT32 DisplayAddress, UINT16 NumOfLines)
{	
fffd509c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd50a0:	e0806202 	add	r6, r0, r2, lsl #4
	UINT16 Data16; 
	UINT8 index;

	for (line=0;line<NumOfLines;line++)
	{
		LogMessage ("0x%08lX: ",DisplayAddress); DisplayAddress+=16;
fffd50a4:	e59f8058 	ldr	r8, [pc, #88]	; fffd5104 <MemoryDumpW+0x68>
{	
fffd50a8:	e1a05000 	mov	r5, r0
fffd50ac:	e1a07001 	mov	r7, r1
	UINT16 *pData16 = (UINT16*)Address;
fffd50b0:	e1a04000 	mov	r4, r0
		for (index=0;index<8;index++)
		{
			Data16 = *pData16++;
			LogMessage ("0x%04X  ",Data16); 
fffd50b4:	e59f904c 	ldr	r9, [pc, #76]	; fffd5108 <MemoryDumpW+0x6c>
		}
		LogMessage ("\n");
fffd50b8:	e59fa04c 	ldr	r10, [pc, #76]	; fffd510c <MemoryDumpW+0x70>
		LogMessage ("0x%08lX: ",DisplayAddress); DisplayAddress+=16;
fffd50bc:	e08f8008 	add	r8, pc, r8
			LogMessage ("0x%04X  ",Data16); 
fffd50c0:	e08f9009 	add	r9, pc, r9
		LogMessage ("\n");
fffd50c4:	e08fa00a 	add	r10, pc, r10
fffd50c8:	e0471005 	sub	r1, r7, r5
	for (line=0;line<NumOfLines;line++)
fffd50cc:	e1540006 	cmp	r4, r6
fffd50d0:	e0811004 	add	r1, r1, r4
fffd50d4:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd50d8:	e284b010 	add	r11, r4, #16
		LogMessage ("0x%08lX: ",DisplayAddress); DisplayAddress+=16;
fffd50dc:	e1a00008 	mov	r0, r8
fffd50e0:	ebfffe74 	bl	fffd4ab8 <LogMessage>
			LogMessage ("0x%04X  ",Data16); 
fffd50e4:	e0d410b2 	ldrh	r1, [r4], #2
fffd50e8:	e1a00009 	mov	r0, r9
fffd50ec:	ebfffe71 	bl	fffd4ab8 <LogMessage>
		for (index=0;index<8;index++)
fffd50f0:	e154000b 	cmp	r4, r11
fffd50f4:	1afffffa 	bne	fffd50e4 <MemoryDumpW+0x48>
		LogMessage ("\n");
fffd50f8:	e1a0000a 	mov	r0, r10
fffd50fc:	ebfffe6d 	bl	fffd4ab8 <LogMessage>
fffd5100:	eafffff0 	b	fffd50c8 <MemoryDumpW+0x2c>
fffd5104:	00007d5a 	.word	0x00007d5a
fffd5108:	00007d60 	.word	0x00007d60
fffd510c:	00007464 	.word	0x00007464

fffd5110 <MemoryDumpW_Compare>:
	}	
}
//-------------------------------------------------------------
extern void MemoryDumpW_Compare (UINT32 Address_Reference, UINT32 Address, UINT32 DisplayAddress, UINT16 NumOfLines)
{	
fffd5110:	e92d4ff7 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd5114:	e0813203 	add	r3, r1, r3, lsl #4
	UINT16 Data16,Data16_Reference; 
	UINT8 index;

	for (line=0;line<NumOfLines;line++)
	{
		LogMessage ("0x%08lX: ",DisplayAddress); DisplayAddress+=16;
fffd5118:	e59f8098 	ldr	r8, [pc, #152]	; fffd51b8 <MemoryDumpW_Compare+0xa8>
{	
fffd511c:	e1a06000 	mov	r6, r0
fffd5120:	e1a05001 	mov	r5, r1
fffd5124:	e1a07002 	mov	r7, r2
			Data16 = *pData16++;
			Data16_Reference = *pData16_Reference++;
			if (Data16!=Data16_Reference)
				LogError ("0x%04X  ",Data16); 
			else
				LogPass ("0x%04X  ",Data16);
fffd5128:	e59f908c 	ldr	r9, [pc, #140]	; fffd51bc <MemoryDumpW_Compare+0xac>
	UINT16 *pData16 = (UINT16*)Address;
fffd512c:	e1a0b001 	mov	r11, r1
		LogMessage ("0x%08lX: ",DisplayAddress); DisplayAddress+=16;
fffd5130:	e08f8008 	add	r8, pc, r8
fffd5134:	e58d3000 	str	r3, [sp]
				LogPass ("0x%04X  ",Data16);
fffd5138:	e08f9009 	add	r9, pc, r9
	for (line=0;line<NumOfLines;line++)
fffd513c:	e59d3000 	ldr	r3, [sp]
fffd5140:	e0471005 	sub	r1, r7, r5
fffd5144:	e0464005 	sub	r4, r6, r5
fffd5148:	e081100b 	add	r1, r1, r11
fffd514c:	e084400b 	add	r4, r4, r11
fffd5150:	e15b0003 	cmp	r11, r3
fffd5154:	1a000001 	bne	fffd5160 <MemoryDumpW_Compare+0x50>
		}
		LogMessage ("\n");
	}	
}
fffd5158:	e28dd00c 	add	sp, sp, #12
fffd515c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
		LogMessage ("0x%08lX: ",DisplayAddress); DisplayAddress+=16;
fffd5160:	e1a00008 	mov	r0, r8
fffd5164:	e28ba010 	add	r10, r11, #16
fffd5168:	ebfffe52 	bl	fffd4ab8 <LogMessage>
				LogError ("0x%04X  ",Data16); 
fffd516c:	e59f304c 	ldr	r3, [pc, #76]	; fffd51c0 <MemoryDumpW_Compare+0xb0>
fffd5170:	e08f3003 	add	r3, pc, r3
fffd5174:	e58d3004 	str	r3, [sp, #4]
			Data16 = *pData16++;
fffd5178:	e0db10b2 	ldrh	r1, [r11], #2
			if (Data16!=Data16_Reference)
fffd517c:	e0d420b2 	ldrh	r2, [r4], #2
fffd5180:	e1520001 	cmp	r2, r1
fffd5184:	0a000007 	beq	fffd51a8 <MemoryDumpW_Compare+0x98>
				LogError ("0x%04X  ",Data16); 
fffd5188:	e59d0004 	ldr	r0, [sp, #4]
fffd518c:	ebfffe75 	bl	fffd4b68 <LogError>
		for (index=0;index<8;index++)
fffd5190:	e15b000a 	cmp	r11, r10
fffd5194:	1afffff7 	bne	fffd5178 <MemoryDumpW_Compare+0x68>
		LogMessage ("\n");
fffd5198:	e59f0024 	ldr	r0, [pc, #36]	; fffd51c4 <MemoryDumpW_Compare+0xb4>
fffd519c:	e08f0000 	add	r0, pc, r0
fffd51a0:	ebfffe44 	bl	fffd4ab8 <LogMessage>
fffd51a4:	eaffffe4 	b	fffd513c <MemoryDumpW_Compare+0x2c>
				LogPass ("0x%04X  ",Data16);
fffd51a8:	e1a01002 	mov	r1, r2
fffd51ac:	e1a00009 	mov	r0, r9
fffd51b0:	ebfffe9c 	bl	fffd4c28 <LogPass>
fffd51b4:	eafffff5 	b	fffd5190 <MemoryDumpW_Compare+0x80>
fffd51b8:	00007ce6 	.word	0x00007ce6
fffd51bc:	00007ce8 	.word	0x00007ce8
fffd51c0:	00007cb0 	.word	0x00007cb0
fffd51c4:	0000738c 	.word	0x0000738c

fffd51c8 <MemoryDumpB>:
//-------------------------------------------------------------
extern void MemoryDumpB (UINT32 Address, UINT32 DisplayAddress, UINT16 NumOfLines)
{	
fffd51c8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd51cc:	e0806202 	add	r6, r0, r2, lsl #4
	UINT8 index;
	UINT8 Data8;

	for (line=0;line<NumOfLines;line++)
	{
		LogMessage ("0x%08lX: ",DisplayAddress); DisplayAddress+=16;
fffd51d0:	e59f8058 	ldr	r8, [pc, #88]	; fffd5230 <MemoryDumpB+0x68>
{	
fffd51d4:	e1a05000 	mov	r5, r0
fffd51d8:	e1a07001 	mov	r7, r1
	UINT8 *pData8 = (UINT8*)Address;
fffd51dc:	e1a04000 	mov	r4, r0
		for (index=0;index<16;index++)
		{
			Data8 = *pData8++;
			LogMessage ("0x%02X  ",Data8); 
fffd51e0:	e59f904c 	ldr	r9, [pc, #76]	; fffd5234 <MemoryDumpB+0x6c>
		}
		LogMessage ("\n");
fffd51e4:	e59fa04c 	ldr	r10, [pc, #76]	; fffd5238 <MemoryDumpB+0x70>
		LogMessage ("0x%08lX: ",DisplayAddress); DisplayAddress+=16;
fffd51e8:	e08f8008 	add	r8, pc, r8
			LogMessage ("0x%02X  ",Data8); 
fffd51ec:	e08f9009 	add	r9, pc, r9
		LogMessage ("\n");
fffd51f0:	e08fa00a 	add	r10, pc, r10
fffd51f4:	e0471005 	sub	r1, r7, r5
	for (line=0;line<NumOfLines;line++)
fffd51f8:	e1540006 	cmp	r4, r6
fffd51fc:	e0811004 	add	r1, r1, r4
fffd5200:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd5204:	e284b010 	add	r11, r4, #16
		LogMessage ("0x%08lX: ",DisplayAddress); DisplayAddress+=16;
fffd5208:	e1a00008 	mov	r0, r8
fffd520c:	ebfffe29 	bl	fffd4ab8 <LogMessage>
			LogMessage ("0x%02X  ",Data8); 
fffd5210:	e4d41001 	ldrb	r1, [r4], #1
fffd5214:	e1a00009 	mov	r0, r9
fffd5218:	ebfffe26 	bl	fffd4ab8 <LogMessage>
		for (index=0;index<16;index++)
fffd521c:	e154000b 	cmp	r4, r11
fffd5220:	1afffffa 	bne	fffd5210 <MemoryDumpB+0x48>
		LogMessage ("\n");
fffd5224:	e1a0000a 	mov	r0, r10
fffd5228:	ebfffe22 	bl	fffd4ab8 <LogMessage>
fffd522c:	eafffff0 	b	fffd51f4 <MemoryDumpB+0x2c>
fffd5230:	00007c2e 	.word	0x00007c2e
fffd5234:	00007c3d 	.word	0x00007c3d
fffd5238:	00007338 	.word	0x00007338

fffd523c <MemCmp>:
//--------------------------------------------
extern int MemCmp (const void *ptr1, const void *ptr2, UINT32 SizeInByte)
{
	UINT32 Offset;

	Offset = 0;
fffd523c:	e3a03000 	mov	r3, #0
	while (SizeInByte!=0)
fffd5240:	e1530002 	cmp	r3, r2
fffd5244:	1a000006 	bne	fffd5264 <MemCmp+0x28>
		ptr1 = (UINT8*)ptr1 + 1;
		ptr2 = (UINT8*)ptr2 + 1;
		Offset++;
		SizeInByte--;	
	}
	return (-1); // pass
fffd5248:	e3e00000 	mvn	r0, #0
}
fffd524c:	e12fff1e 	bx	lr
		Offset++;
fffd5250:	e2833001 	add	r3, r3, #1
	while (SizeInByte!=0)
fffd5254:	e1530002 	cmp	r3, r2
fffd5258:	1a000002 	bne	fffd5268 <MemCmp+0x2c>
	return (-1); // pass
fffd525c:	e3e00000 	mvn	r0, #0
}
fffd5260:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
{
fffd5264:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
		if ( *((UINT8*)ptr1) != *((UINT8*)ptr2) )
fffd5268:	e7d0e003 	ldrb	lr, [r0, r3]
fffd526c:	e7d1c003 	ldrb	r12, [r1, r3]
fffd5270:	e15e000c 	cmp	lr, r12
fffd5274:	0afffff5 	beq	fffd5250 <MemCmp+0x14>
			return (Offset);	
fffd5278:	e1a00003 	mov	r0, r3
fffd527c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

fffd5280 <MemCpy>:
//--------------------------------------------
// Same as memcpy but use 8bit burst only. 
//--------------------------------------------
extern void MemCpy (void *dst, const void *src, UINT32 SizeInByte)
{
fffd5280:	e2400001 	sub	r0, r0, #1
fffd5284:	e0812002 	add	r2, r1, r2
	UINT8 *pDst = (UINT8 *)dst;
	UINT8 const *pSrc = (UINT8 const *)src;

	while (SizeInByte--)
fffd5288:	e1510002 	cmp	r1, r2
fffd528c:	012fff1e 	bxeq	lr
	{
		*pDst++ = *pSrc++;
fffd5290:	e4d13001 	ldrb	r3, [r1], #1
fffd5294:	e5e03001 	strb	r3, [r0, #1]!
fffd5298:	eafffffa 	b	fffd5288 <MemCpy+0x8>

fffd529c <MemSet>:
*/
//-----------------------------------------------------------------
// Same as memcpy but use 8bit burst only. 
//-----------------------------------------------------------------
extern void MemSet (void *dst, int val, UINT32 SizeInByte)
{
fffd529c:	e0802002 	add	r2, r0, r2
	UINT8 *pDst = (UINT8 *)dst;

	while (SizeInByte--)
fffd52a0:	e1500002 	cmp	r0, r2
fffd52a4:	012fff1e 	bxeq	lr
	{
		*pDst++ = val;
fffd52a8:	e4c01001 	strb	r1, [r0], #1
fffd52ac:	eafffffb 	b	fffd52a0 <MemSet+0x4>

fffd52b0 <GetRandSeed>:
static unsigned long int next = 1;

extern unsigned long int GetRandSeed (void)
{
	return (next);
}
fffd52b0:	e59f3004 	ldr	r3, [pc, #4]	; fffd52bc <GetRandSeed+0xc>
fffd52b4:	e79f0003 	ldr	r0, [pc, r3]
fffd52b8:	e12fff1e 	bx	lr
fffd52bc:	00007fc8 	.word	0x00007fc8

fffd52c0 <rand>:
extern int rand (void)
{
	next = next * 1103515245 + 12345;
fffd52c0:	e59f301c 	ldr	r3, [pc, #28]	; fffd52e4 <rand+0x24>
fffd52c4:	e3032039 	movw	r2, #12345	; 0x3039
fffd52c8:	e59f1018 	ldr	r1, [pc, #24]	; fffd52e8 <rand+0x28>
fffd52cc:	e08f3003 	add	r3, pc, r3
fffd52d0:	e5930000 	ldr	r0, [r3]
fffd52d4:	e0202091 	mla	r0, r1, r0, r2
fffd52d8:	e5830000 	str	r0, [r3]
	return ((unsigned int)(next>>16)) & 0x7FFF ;
}
fffd52dc:	e7ee0850 	ubfx	r0, r0, #16, #15
fffd52e0:	e12fff1e 	bx	lr
fffd52e4:	00007fb0 	.word	0x00007fb0
fffd52e8:	41c64e6d 	.word	0x41c64e6d

fffd52ec <SetRandSeed>:
extern void SetRandSeed (unsigned long int seed)
{
	next = seed;
fffd52ec:	e59f3008 	ldr	r3, [pc, #8]	; fffd52fc <SetRandSeed+0x10>
fffd52f0:	e08f3003 	add	r3, pc, r3
fffd52f4:	e5830000 	str	r0, [r3]
}
fffd52f8:	e12fff1e 	bx	lr
fffd52fc:	00007f8c 	.word	0x00007f8c

fffd5300 <srand>:

extern void srand (unsigned int seed)
{
	next = seed;
fffd5300:	e59f3008 	ldr	r3, [pc, #8]	; fffd5310 <srand+0x10>
fffd5304:	e08f3003 	add	r3, pc, r3
fffd5308:	e5830000 	str	r0, [r3]
}
fffd530c:	e12fff1e 	bx	lr
fffd5310:	00007f78 	.word	0x00007f78

fffd5314 <GetUserParam_HEX_8BIT>:
{
	char key_string[5];
	UINT32 NewValue;
	char KeyPress;

	if (IsPreset==TRUE)
fffd5314:	e3510001 	cmp	r1, #1
{
fffd5318:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
fffd531c:	e1a05000 	mov	r5, r0
fffd5320:	e1a06001 	mov	r6, r1
fffd5324:	e28d4008 	add	r4, sp, #8
	if (IsPreset==TRUE)
fffd5328:	1a000005 	bne	fffd5344 <GetUserParam_HEX_8BIT+0x30>
		snprintf (key_string,sizeof(key_string),"0x%02X",*Param);
fffd532c:	e59f2090 	ldr	r2, [pc, #144]	; fffd53c4 <GetUserParam_HEX_8BIT+0xb0>
fffd5330:	e3a01005 	mov	r1, #5
fffd5334:	e5d03000 	ldrb	r3, [r0]
fffd5338:	e1a00004 	mov	r0, r4
fffd533c:	e08f2002 	add	r2, pc, r2
fffd5340:	ebfffca2 	bl	fffd45d0 <snprintf>
	KeyPress = GetString (key_string,sizeof(key_string), IsPreset);
fffd5344:	e1a02006 	mov	r2, r6
fffd5348:	e3a01005 	mov	r1, #5
fffd534c:	e1a00004 	mov	r0, r4
fffd5350:	ebfffea0 	bl	fffd4dd8 <GetString>
	
	if ((KeyPress==ESC_KEY) || (key_string[0]==0/*EMPTY*/))
fffd5354:	e350001b 	cmp	r0, #27
fffd5358:	0a000002 	beq	fffd5368 <GetUserParam_HEX_8BIT+0x54>
fffd535c:	e5dd3008 	ldrb	r3, [sp, #8]
fffd5360:	e3530000 	cmp	r3, #0
fffd5364:	1a000005 	bne	fffd5380 <GetUserParam_HEX_8BIT+0x6c>
	{
		LogWarning (" - aborted by user.\n");
fffd5368:	e59f0058 	ldr	r0, [pc, #88]	; fffd53c8 <GetUserParam_HEX_8BIT+0xb4>
fffd536c:	e08f0000 	add	r0, pc, r0
fffd5370:	ebfffe0c 	bl	fffd4ba8 <LogWarning>
		return (-1); 
fffd5374:	e3e00000 	mvn	r0, #0
		LogError (" - Invalid format, abort.\n");
		return (-2); 
	}
	*Param = (UINT8)NewValue;
	return (0);
}
fffd5378:	e28dd010 	add	sp, sp, #16
fffd537c:	e8bd8070 	pop	{r4, r5, r6, pc}
	if ((sscanf (key_string,"0x%lx",&NewValue) != 1) || (NewValue>0xFF) )
fffd5380:	e59f1044 	ldr	r1, [pc, #68]	; fffd53cc <GetUserParam_HEX_8BIT+0xb8>
fffd5384:	e28d2004 	add	r2, sp, #4
fffd5388:	e1a00004 	mov	r0, r4
fffd538c:	e08f1001 	add	r1, pc, r1
fffd5390:	fa0001dd 	blx	fffd5b0c <sscanf>
fffd5394:	e3500001 	cmp	r0, #1
fffd5398:	1a000004 	bne	fffd53b0 <GetUserParam_HEX_8BIT+0x9c>
fffd539c:	e59d3004 	ldr	r3, [sp, #4]
fffd53a0:	e35300ff 	cmp	r3, #255	; 0xff
	*Param = (UINT8)NewValue;
fffd53a4:	95c53000 	strbls	r3, [r5]
	return (0);
fffd53a8:	93a00000 	movls	r0, #0
	if ((sscanf (key_string,"0x%lx",&NewValue) != 1) || (NewValue>0xFF) )
fffd53ac:	9afffff1 	bls	fffd5378 <GetUserParam_HEX_8BIT+0x64>
		LogError (" - Invalid format, abort.\n");
fffd53b0:	e59f0018 	ldr	r0, [pc, #24]	; fffd53d0 <GetUserParam_HEX_8BIT+0xbc>
fffd53b4:	e08f0000 	add	r0, pc, r0
fffd53b8:	ebfffdea 	bl	fffd4b68 <LogError>
		return (-2); 
fffd53bc:	e3e00001 	mvn	r0, #1
fffd53c0:	eaffffec 	b	fffd5378 <GetUserParam_HEX_8BIT+0x64>
fffd53c4:	00007af6 	.word	0x00007af6
fffd53c8:	00007acd 	.word	0x00007acd
fffd53cc:	00007ac2 	.word	0x00007ac2
fffd53d0:	00007aa0 	.word	0x00007aa0

fffd53d4 <GetUserParam_HEX_32BIT>:
{
	char key_string[11];
	UINT32 NewValue;
	char KeyPress;

	if (IsPreset==TRUE)
fffd53d4:	e3510001 	cmp	r1, #1
{
fffd53d8:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
fffd53dc:	e1a05000 	mov	r5, r0
fffd53e0:	e1a06001 	mov	r6, r1
fffd53e4:	e28d4004 	add	r4, sp, #4
	if (IsPreset==TRUE)
fffd53e8:	1a000005 	bne	fffd5404 <GetUserParam_HEX_32BIT+0x30>
		snprintf (key_string,sizeof(key_string),"0x%08lX",*Param);
fffd53ec:	e59f2088 	ldr	r2, [pc, #136]	; fffd547c <GetUserParam_HEX_32BIT+0xa8>
fffd53f0:	e3a0100b 	mov	r1, #11
fffd53f4:	e5903000 	ldr	r3, [r0]
fffd53f8:	e1a00004 	mov	r0, r4
fffd53fc:	e08f2002 	add	r2, pc, r2
fffd5400:	ebfffc72 	bl	fffd45d0 <snprintf>
	KeyPress = GetString (key_string,sizeof(key_string), IsPreset);
fffd5404:	e1a02006 	mov	r2, r6
fffd5408:	e3a0100b 	mov	r1, #11
fffd540c:	e1a00004 	mov	r0, r4
fffd5410:	ebfffe70 	bl	fffd4dd8 <GetString>

	if ((KeyPress==ESC_KEY) || (key_string[0]==0/*EMPTY*/))
fffd5414:	e350001b 	cmp	r0, #27
fffd5418:	0a000002 	beq	fffd5428 <GetUserParam_HEX_32BIT+0x54>
fffd541c:	e5dd3004 	ldrb	r3, [sp, #4]
fffd5420:	e3530000 	cmp	r3, #0
fffd5424:	1a000005 	bne	fffd5440 <GetUserParam_HEX_32BIT+0x6c>
	{
		LogWarning (" - aborted by user.\n");
fffd5428:	e59f0050 	ldr	r0, [pc, #80]	; fffd5480 <GetUserParam_HEX_32BIT+0xac>
fffd542c:	e08f0000 	add	r0, pc, r0
fffd5430:	ebfffddc 	bl	fffd4ba8 <LogWarning>
		return (-1); 
fffd5434:	e3e00000 	mvn	r0, #0
		LogError (" - Invalid format, abort.\n");
		return (-2); 
	}
	*Param = (UINT32)NewValue;
	return (0);
}
fffd5438:	e28dd010 	add	sp, sp, #16
fffd543c:	e8bd8070 	pop	{r4, r5, r6, pc}
	if (sscanf (key_string,"0x%lx",&NewValue) != 1)
fffd5440:	e59f103c 	ldr	r1, [pc, #60]	; fffd5484 <GetUserParam_HEX_32BIT+0xb0>
fffd5444:	e1a0200d 	mov	r2, sp
fffd5448:	e1a00004 	mov	r0, r4
fffd544c:	e08f1001 	add	r1, pc, r1
fffd5450:	fa0001ad 	blx	fffd5b0c <sscanf>
fffd5454:	e3500001 	cmp	r0, #1
	*Param = (UINT32)NewValue;
fffd5458:	059d3000 	ldreq	r3, [sp]
	return (0);
fffd545c:	03a00000 	moveq	r0, #0
	*Param = (UINT32)NewValue;
fffd5460:	05853000 	streq	r3, [r5]
	if (sscanf (key_string,"0x%lx",&NewValue) != 1)
fffd5464:	0afffff3 	beq	fffd5438 <GetUserParam_HEX_32BIT+0x64>
		LogError (" - Invalid format, abort.\n");
fffd5468:	e59f0018 	ldr	r0, [pc, #24]	; fffd5488 <GetUserParam_HEX_32BIT+0xb4>
fffd546c:	e08f0000 	add	r0, pc, r0
fffd5470:	ebfffdbc 	bl	fffd4b68 <LogError>
		return (-2); 
fffd5474:	e3e00001 	mvn	r0, #1
fffd5478:	eaffffee 	b	fffd5438 <GetUserParam_HEX_32BIT+0x64>
fffd547c:	00007a73 	.word	0x00007a73
fffd5480:	00007a0d 	.word	0x00007a0d
fffd5484:	00007a02 	.word	0x00007a02
fffd5488:	000079e8 	.word	0x000079e8

fffd548c <GetUserParam_INT_32BIT>:
{
	char key_string[11];
	long int NewValue;
	char KeyPress;

	if (IsPreset==TRUE)
fffd548c:	e3510001 	cmp	r1, #1
{
fffd5490:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
fffd5494:	e1a05000 	mov	r5, r0
fffd5498:	e1a06001 	mov	r6, r1
fffd549c:	e28d4004 	add	r4, sp, #4
	if (IsPreset==TRUE)
fffd54a0:	1a000005 	bne	fffd54bc <GetUserParam_INT_32BIT+0x30>
		snprintf (key_string,sizeof(key_string),"%ld",*Param);
fffd54a4:	e59f2088 	ldr	r2, [pc, #136]	; fffd5534 <GetUserParam_INT_32BIT+0xa8>
fffd54a8:	e3a0100b 	mov	r1, #11
fffd54ac:	e5903000 	ldr	r3, [r0]
fffd54b0:	e1a00004 	mov	r0, r4
fffd54b4:	e08f2002 	add	r2, pc, r2
fffd54b8:	ebfffc44 	bl	fffd45d0 <snprintf>
	KeyPress = GetString (key_string,sizeof(key_string), IsPreset);
fffd54bc:	e1a02006 	mov	r2, r6
fffd54c0:	e3a0100b 	mov	r1, #11
fffd54c4:	e1a00004 	mov	r0, r4
fffd54c8:	ebfffe42 	bl	fffd4dd8 <GetString>

	if ((KeyPress==ESC_KEY) || (key_string[0]==0/*EMPTY*/))
fffd54cc:	e350001b 	cmp	r0, #27
fffd54d0:	0a000002 	beq	fffd54e0 <GetUserParam_INT_32BIT+0x54>
fffd54d4:	e5dd3004 	ldrb	r3, [sp, #4]
fffd54d8:	e3530000 	cmp	r3, #0
fffd54dc:	1a000005 	bne	fffd54f8 <GetUserParam_INT_32BIT+0x6c>
	{
		LogWarning (" - aborted by user.\n");
fffd54e0:	e59f0050 	ldr	r0, [pc, #80]	; fffd5538 <GetUserParam_INT_32BIT+0xac>
fffd54e4:	e08f0000 	add	r0, pc, r0
fffd54e8:	ebfffdae 	bl	fffd4ba8 <LogWarning>
		return (-1); 
fffd54ec:	e3e00000 	mvn	r0, #0
		LogError (" - Invalid format, abort.\n");
		return (-2); 
	}
	*Param = NewValue;
	return (0);
}
fffd54f0:	e28dd010 	add	sp, sp, #16
fffd54f4:	e8bd8070 	pop	{r4, r5, r6, pc}
	if (sscanf (key_string,"%ld",&NewValue) != 1)
fffd54f8:	e59f103c 	ldr	r1, [pc, #60]	; fffd553c <GetUserParam_INT_32BIT+0xb0>
fffd54fc:	e1a0200d 	mov	r2, sp
fffd5500:	e1a00004 	mov	r0, r4
fffd5504:	e08f1001 	add	r1, pc, r1
fffd5508:	fa00017f 	blx	fffd5b0c <sscanf>
fffd550c:	e3500001 	cmp	r0, #1
	*Param = NewValue;
fffd5510:	059d3000 	ldreq	r3, [sp]
	return (0);
fffd5514:	03a00000 	moveq	r0, #0
	*Param = NewValue;
fffd5518:	05853000 	streq	r3, [r5]
	if (sscanf (key_string,"%ld",&NewValue) != 1)
fffd551c:	0afffff3 	beq	fffd54f0 <GetUserParam_INT_32BIT+0x64>
		LogError (" - Invalid format, abort.\n");
fffd5520:	e59f0018 	ldr	r0, [pc, #24]	; fffd5540 <GetUserParam_INT_32BIT+0xb4>
fffd5524:	e08f0000 	add	r0, pc, r0
fffd5528:	ebfffd8e 	bl	fffd4b68 <LogError>
		return (-2); 
fffd552c:	e3e00001 	mvn	r0, #1
fffd5530:	eaffffee 	b	fffd54f0 <GetUserParam_INT_32BIT+0x64>
fffd5534:	000079c3 	.word	0x000079c3
fffd5538:	00007955 	.word	0x00007955
fffd553c:	00007973 	.word	0x00007973
fffd5540:	00007930 	.word	0x00007930
fffd5544:	00000000 	.word	0x00000000

fffd5548 <__udivsi3>:
fffd5548:	1e4a      	subs	r2, r1, #1
fffd554a:	bf08      	it	eq
fffd554c:	4770      	bxeq	lr
fffd554e:	f0c0 8124 	bcc.w	fffd579a <__udivsi3+0x252>
fffd5552:	4288      	cmp	r0, r1
fffd5554:	f240 8116 	bls.w	fffd5784 <__udivsi3+0x23c>
fffd5558:	4211      	tst	r1, r2
fffd555a:	f000 8117 	beq.w	fffd578c <__udivsi3+0x244>
fffd555e:	fab0 f380 	clz	r3, r0
fffd5562:	fab1 f281 	clz	r2, r1
fffd5566:	eba2 0303 	sub.w	r3, r2, r3
fffd556a:	f1c3 031f 	rsb	r3, r3, #31
fffd556e:	a204      	add	r2, pc, #16	; (adr r2, fffd5580 <__udivsi3+0x38>)
fffd5570:	eb02 1303 	add.w	r3, r2, r3, lsl #4
fffd5574:	f04f 0200 	mov.w	r2, #0
fffd5578:	469f      	mov	pc, r3
fffd557a:	bf00      	nop
fffd557c:	f3af 8000 	nop.w
fffd5580:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
fffd5584:	bf00      	nop
fffd5586:	eb42 0202 	adc.w	r2, r2, r2
fffd558a:	bf28      	it	cs
fffd558c:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
fffd5590:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
fffd5594:	bf00      	nop
fffd5596:	eb42 0202 	adc.w	r2, r2, r2
fffd559a:	bf28      	it	cs
fffd559c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
fffd55a0:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
fffd55a4:	bf00      	nop
fffd55a6:	eb42 0202 	adc.w	r2, r2, r2
fffd55aa:	bf28      	it	cs
fffd55ac:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
fffd55b0:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
fffd55b4:	bf00      	nop
fffd55b6:	eb42 0202 	adc.w	r2, r2, r2
fffd55ba:	bf28      	it	cs
fffd55bc:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
fffd55c0:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
fffd55c4:	bf00      	nop
fffd55c6:	eb42 0202 	adc.w	r2, r2, r2
fffd55ca:	bf28      	it	cs
fffd55cc:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
fffd55d0:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
fffd55d4:	bf00      	nop
fffd55d6:	eb42 0202 	adc.w	r2, r2, r2
fffd55da:	bf28      	it	cs
fffd55dc:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
fffd55e0:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
fffd55e4:	bf00      	nop
fffd55e6:	eb42 0202 	adc.w	r2, r2, r2
fffd55ea:	bf28      	it	cs
fffd55ec:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
fffd55f0:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
fffd55f4:	bf00      	nop
fffd55f6:	eb42 0202 	adc.w	r2, r2, r2
fffd55fa:	bf28      	it	cs
fffd55fc:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
fffd5600:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
fffd5604:	bf00      	nop
fffd5606:	eb42 0202 	adc.w	r2, r2, r2
fffd560a:	bf28      	it	cs
fffd560c:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
fffd5610:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
fffd5614:	bf00      	nop
fffd5616:	eb42 0202 	adc.w	r2, r2, r2
fffd561a:	bf28      	it	cs
fffd561c:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
fffd5620:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
fffd5624:	bf00      	nop
fffd5626:	eb42 0202 	adc.w	r2, r2, r2
fffd562a:	bf28      	it	cs
fffd562c:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
fffd5630:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
fffd5634:	bf00      	nop
fffd5636:	eb42 0202 	adc.w	r2, r2, r2
fffd563a:	bf28      	it	cs
fffd563c:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
fffd5640:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
fffd5644:	bf00      	nop
fffd5646:	eb42 0202 	adc.w	r2, r2, r2
fffd564a:	bf28      	it	cs
fffd564c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
fffd5650:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
fffd5654:	bf00      	nop
fffd5656:	eb42 0202 	adc.w	r2, r2, r2
fffd565a:	bf28      	it	cs
fffd565c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
fffd5660:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
fffd5664:	bf00      	nop
fffd5666:	eb42 0202 	adc.w	r2, r2, r2
fffd566a:	bf28      	it	cs
fffd566c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
fffd5670:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
fffd5674:	bf00      	nop
fffd5676:	eb42 0202 	adc.w	r2, r2, r2
fffd567a:	bf28      	it	cs
fffd567c:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
fffd5680:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
fffd5684:	bf00      	nop
fffd5686:	eb42 0202 	adc.w	r2, r2, r2
fffd568a:	bf28      	it	cs
fffd568c:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
fffd5690:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
fffd5694:	bf00      	nop
fffd5696:	eb42 0202 	adc.w	r2, r2, r2
fffd569a:	bf28      	it	cs
fffd569c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
fffd56a0:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
fffd56a4:	bf00      	nop
fffd56a6:	eb42 0202 	adc.w	r2, r2, r2
fffd56aa:	bf28      	it	cs
fffd56ac:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
fffd56b0:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
fffd56b4:	bf00      	nop
fffd56b6:	eb42 0202 	adc.w	r2, r2, r2
fffd56ba:	bf28      	it	cs
fffd56bc:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
fffd56c0:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
fffd56c4:	bf00      	nop
fffd56c6:	eb42 0202 	adc.w	r2, r2, r2
fffd56ca:	bf28      	it	cs
fffd56cc:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
fffd56d0:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
fffd56d4:	bf00      	nop
fffd56d6:	eb42 0202 	adc.w	r2, r2, r2
fffd56da:	bf28      	it	cs
fffd56dc:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
fffd56e0:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
fffd56e4:	bf00      	nop
fffd56e6:	eb42 0202 	adc.w	r2, r2, r2
fffd56ea:	bf28      	it	cs
fffd56ec:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
fffd56f0:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
fffd56f4:	bf00      	nop
fffd56f6:	eb42 0202 	adc.w	r2, r2, r2
fffd56fa:	bf28      	it	cs
fffd56fc:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
fffd5700:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
fffd5704:	bf00      	nop
fffd5706:	eb42 0202 	adc.w	r2, r2, r2
fffd570a:	bf28      	it	cs
fffd570c:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
fffd5710:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
fffd5714:	bf00      	nop
fffd5716:	eb42 0202 	adc.w	r2, r2, r2
fffd571a:	bf28      	it	cs
fffd571c:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
fffd5720:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
fffd5724:	bf00      	nop
fffd5726:	eb42 0202 	adc.w	r2, r2, r2
fffd572a:	bf28      	it	cs
fffd572c:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
fffd5730:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
fffd5734:	bf00      	nop
fffd5736:	eb42 0202 	adc.w	r2, r2, r2
fffd573a:	bf28      	it	cs
fffd573c:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
fffd5740:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
fffd5744:	bf00      	nop
fffd5746:	eb42 0202 	adc.w	r2, r2, r2
fffd574a:	bf28      	it	cs
fffd574c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
fffd5750:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
fffd5754:	bf00      	nop
fffd5756:	eb42 0202 	adc.w	r2, r2, r2
fffd575a:	bf28      	it	cs
fffd575c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
fffd5760:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
fffd5764:	bf00      	nop
fffd5766:	eb42 0202 	adc.w	r2, r2, r2
fffd576a:	bf28      	it	cs
fffd576c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
fffd5770:	ebb0 0f01 	cmp.w	r0, r1
fffd5774:	bf00      	nop
fffd5776:	eb42 0202 	adc.w	r2, r2, r2
fffd577a:	bf28      	it	cs
fffd577c:	eba0 0001 	subcs.w	r0, r0, r1
fffd5780:	4610      	mov	r0, r2
fffd5782:	4770      	bx	lr
fffd5784:	bf0c      	ite	eq
fffd5786:	2001      	moveq	r0, #1
fffd5788:	2000      	movne	r0, #0
fffd578a:	4770      	bx	lr
fffd578c:	fab1 f281 	clz	r2, r1
fffd5790:	f1c2 021f 	rsb	r2, r2, #31
fffd5794:	fa20 f002 	lsr.w	r0, r0, r2
fffd5798:	4770      	bx	lr
fffd579a:	b108      	cbz	r0, fffd57a0 <__udivsi3+0x258>
fffd579c:	f04f 30ff 	mov.w	r0, #4294967295
fffd57a0:	f000 b966 	b.w	fffd5a70 <__aeabi_idiv0>

fffd57a4 <__aeabi_uidivmod>:
fffd57a4:	2900      	cmp	r1, #0
fffd57a6:	d0f8      	beq.n	fffd579a <__udivsi3+0x252>
fffd57a8:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
fffd57ac:	f7ff fecc 	bl	fffd5548 <__udivsi3>
fffd57b0:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
fffd57b4:	fb02 f300 	mul.w	r3, r2, r0
fffd57b8:	eba1 0103 	sub.w	r1, r1, r3
fffd57bc:	4770      	bx	lr
fffd57be:	bf00      	nop

fffd57c0 <__divsi3>:
fffd57c0:	2900      	cmp	r1, #0
fffd57c2:	f000 813e 	beq.w	fffd5a42 <.divsi3_skip_div0_test+0x27c>

fffd57c6 <.divsi3_skip_div0_test>:
fffd57c6:	ea80 0c01 	eor.w	r12, r0, r1
fffd57ca:	bf48      	it	mi
fffd57cc:	4249      	negmi	r1, r1
fffd57ce:	1e4a      	subs	r2, r1, #1
fffd57d0:	f000 811f 	beq.w	fffd5a12 <.divsi3_skip_div0_test+0x24c>
fffd57d4:	0003      	movs	r3, r0
fffd57d6:	bf48      	it	mi
fffd57d8:	4243      	negmi	r3, r0
fffd57da:	428b      	cmp	r3, r1
fffd57dc:	f240 811e 	bls.w	fffd5a1c <.divsi3_skip_div0_test+0x256>
fffd57e0:	4211      	tst	r1, r2
fffd57e2:	f000 8123 	beq.w	fffd5a2c <.divsi3_skip_div0_test+0x266>
fffd57e6:	fab3 f283 	clz	r2, r3
fffd57ea:	fab1 f081 	clz	r0, r1
fffd57ee:	eba0 0202 	sub.w	r2, r0, r2
fffd57f2:	f1c2 021f 	rsb	r2, r2, #31
fffd57f6:	a004      	add	r0, pc, #16	; (adr r0, fffd5808 <.divsi3_skip_div0_test+0x42>)
fffd57f8:	eb00 1202 	add.w	r2, r0, r2, lsl #4
fffd57fc:	f04f 0000 	mov.w	r0, #0
fffd5800:	4697      	mov	pc, r2
fffd5802:	bf00      	nop
fffd5804:	f3af 8000 	nop.w
fffd5808:	ebb3 7fc1 	cmp.w	r3, r1, lsl #31
fffd580c:	bf00      	nop
fffd580e:	eb40 0000 	adc.w	r0, r0, r0
fffd5812:	bf28      	it	cs
fffd5814:	eba3 73c1 	subcs.w	r3, r3, r1, lsl #31
fffd5818:	ebb3 7f81 	cmp.w	r3, r1, lsl #30
fffd581c:	bf00      	nop
fffd581e:	eb40 0000 	adc.w	r0, r0, r0
fffd5822:	bf28      	it	cs
fffd5824:	eba3 7381 	subcs.w	r3, r3, r1, lsl #30
fffd5828:	ebb3 7f41 	cmp.w	r3, r1, lsl #29
fffd582c:	bf00      	nop
fffd582e:	eb40 0000 	adc.w	r0, r0, r0
fffd5832:	bf28      	it	cs
fffd5834:	eba3 7341 	subcs.w	r3, r3, r1, lsl #29
fffd5838:	ebb3 7f01 	cmp.w	r3, r1, lsl #28
fffd583c:	bf00      	nop
fffd583e:	eb40 0000 	adc.w	r0, r0, r0
fffd5842:	bf28      	it	cs
fffd5844:	eba3 7301 	subcs.w	r3, r3, r1, lsl #28
fffd5848:	ebb3 6fc1 	cmp.w	r3, r1, lsl #27
fffd584c:	bf00      	nop
fffd584e:	eb40 0000 	adc.w	r0, r0, r0
fffd5852:	bf28      	it	cs
fffd5854:	eba3 63c1 	subcs.w	r3, r3, r1, lsl #27
fffd5858:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
fffd585c:	bf00      	nop
fffd585e:	eb40 0000 	adc.w	r0, r0, r0
fffd5862:	bf28      	it	cs
fffd5864:	eba3 6381 	subcs.w	r3, r3, r1, lsl #26
fffd5868:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
fffd586c:	bf00      	nop
fffd586e:	eb40 0000 	adc.w	r0, r0, r0
fffd5872:	bf28      	it	cs
fffd5874:	eba3 6341 	subcs.w	r3, r3, r1, lsl #25
fffd5878:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
fffd587c:	bf00      	nop
fffd587e:	eb40 0000 	adc.w	r0, r0, r0
fffd5882:	bf28      	it	cs
fffd5884:	eba3 6301 	subcs.w	r3, r3, r1, lsl #24
fffd5888:	ebb3 5fc1 	cmp.w	r3, r1, lsl #23
fffd588c:	bf00      	nop
fffd588e:	eb40 0000 	adc.w	r0, r0, r0
fffd5892:	bf28      	it	cs
fffd5894:	eba3 53c1 	subcs.w	r3, r3, r1, lsl #23
fffd5898:	ebb3 5f81 	cmp.w	r3, r1, lsl #22
fffd589c:	bf00      	nop
fffd589e:	eb40 0000 	adc.w	r0, r0, r0
fffd58a2:	bf28      	it	cs
fffd58a4:	eba3 5381 	subcs.w	r3, r3, r1, lsl #22
fffd58a8:	ebb3 5f41 	cmp.w	r3, r1, lsl #21
fffd58ac:	bf00      	nop
fffd58ae:	eb40 0000 	adc.w	r0, r0, r0
fffd58b2:	bf28      	it	cs
fffd58b4:	eba3 5341 	subcs.w	r3, r3, r1, lsl #21
fffd58b8:	ebb3 5f01 	cmp.w	r3, r1, lsl #20
fffd58bc:	bf00      	nop
fffd58be:	eb40 0000 	adc.w	r0, r0, r0
fffd58c2:	bf28      	it	cs
fffd58c4:	eba3 5301 	subcs.w	r3, r3, r1, lsl #20
fffd58c8:	ebb3 4fc1 	cmp.w	r3, r1, lsl #19
fffd58cc:	bf00      	nop
fffd58ce:	eb40 0000 	adc.w	r0, r0, r0
fffd58d2:	bf28      	it	cs
fffd58d4:	eba3 43c1 	subcs.w	r3, r3, r1, lsl #19
fffd58d8:	ebb3 4f81 	cmp.w	r3, r1, lsl #18
fffd58dc:	bf00      	nop
fffd58de:	eb40 0000 	adc.w	r0, r0, r0
fffd58e2:	bf28      	it	cs
fffd58e4:	eba3 4381 	subcs.w	r3, r3, r1, lsl #18
fffd58e8:	ebb3 4f41 	cmp.w	r3, r1, lsl #17
fffd58ec:	bf00      	nop
fffd58ee:	eb40 0000 	adc.w	r0, r0, r0
fffd58f2:	bf28      	it	cs
fffd58f4:	eba3 4341 	subcs.w	r3, r3, r1, lsl #17
fffd58f8:	ebb3 4f01 	cmp.w	r3, r1, lsl #16
fffd58fc:	bf00      	nop
fffd58fe:	eb40 0000 	adc.w	r0, r0, r0
fffd5902:	bf28      	it	cs
fffd5904:	eba3 4301 	subcs.w	r3, r3, r1, lsl #16
fffd5908:	ebb3 3fc1 	cmp.w	r3, r1, lsl #15
fffd590c:	bf00      	nop
fffd590e:	eb40 0000 	adc.w	r0, r0, r0
fffd5912:	bf28      	it	cs
fffd5914:	eba3 33c1 	subcs.w	r3, r3, r1, lsl #15
fffd5918:	ebb3 3f81 	cmp.w	r3, r1, lsl #14
fffd591c:	bf00      	nop
fffd591e:	eb40 0000 	adc.w	r0, r0, r0
fffd5922:	bf28      	it	cs
fffd5924:	eba3 3381 	subcs.w	r3, r3, r1, lsl #14
fffd5928:	ebb3 3f41 	cmp.w	r3, r1, lsl #13
fffd592c:	bf00      	nop
fffd592e:	eb40 0000 	adc.w	r0, r0, r0
fffd5932:	bf28      	it	cs
fffd5934:	eba3 3341 	subcs.w	r3, r3, r1, lsl #13
fffd5938:	ebb3 3f01 	cmp.w	r3, r1, lsl #12
fffd593c:	bf00      	nop
fffd593e:	eb40 0000 	adc.w	r0, r0, r0
fffd5942:	bf28      	it	cs
fffd5944:	eba3 3301 	subcs.w	r3, r3, r1, lsl #12
fffd5948:	ebb3 2fc1 	cmp.w	r3, r1, lsl #11
fffd594c:	bf00      	nop
fffd594e:	eb40 0000 	adc.w	r0, r0, r0
fffd5952:	bf28      	it	cs
fffd5954:	eba3 23c1 	subcs.w	r3, r3, r1, lsl #11
fffd5958:	ebb3 2f81 	cmp.w	r3, r1, lsl #10
fffd595c:	bf00      	nop
fffd595e:	eb40 0000 	adc.w	r0, r0, r0
fffd5962:	bf28      	it	cs
fffd5964:	eba3 2381 	subcs.w	r3, r3, r1, lsl #10
fffd5968:	ebb3 2f41 	cmp.w	r3, r1, lsl #9
fffd596c:	bf00      	nop
fffd596e:	eb40 0000 	adc.w	r0, r0, r0
fffd5972:	bf28      	it	cs
fffd5974:	eba3 2341 	subcs.w	r3, r3, r1, lsl #9
fffd5978:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
fffd597c:	bf00      	nop
fffd597e:	eb40 0000 	adc.w	r0, r0, r0
fffd5982:	bf28      	it	cs
fffd5984:	eba3 2301 	subcs.w	r3, r3, r1, lsl #8
fffd5988:	ebb3 1fc1 	cmp.w	r3, r1, lsl #7
fffd598c:	bf00      	nop
fffd598e:	eb40 0000 	adc.w	r0, r0, r0
fffd5992:	bf28      	it	cs
fffd5994:	eba3 13c1 	subcs.w	r3, r3, r1, lsl #7
fffd5998:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
fffd599c:	bf00      	nop
fffd599e:	eb40 0000 	adc.w	r0, r0, r0
fffd59a2:	bf28      	it	cs
fffd59a4:	eba3 1381 	subcs.w	r3, r3, r1, lsl #6
fffd59a8:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
fffd59ac:	bf00      	nop
fffd59ae:	eb40 0000 	adc.w	r0, r0, r0
fffd59b2:	bf28      	it	cs
fffd59b4:	eba3 1341 	subcs.w	r3, r3, r1, lsl #5
fffd59b8:	ebb3 1f01 	cmp.w	r3, r1, lsl #4
fffd59bc:	bf00      	nop
fffd59be:	eb40 0000 	adc.w	r0, r0, r0
fffd59c2:	bf28      	it	cs
fffd59c4:	eba3 1301 	subcs.w	r3, r3, r1, lsl #4
fffd59c8:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
fffd59cc:	bf00      	nop
fffd59ce:	eb40 0000 	adc.w	r0, r0, r0
fffd59d2:	bf28      	it	cs
fffd59d4:	eba3 03c1 	subcs.w	r3, r3, r1, lsl #3
fffd59d8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
fffd59dc:	bf00      	nop
fffd59de:	eb40 0000 	adc.w	r0, r0, r0
fffd59e2:	bf28      	it	cs
fffd59e4:	eba3 0381 	subcs.w	r3, r3, r1, lsl #2
fffd59e8:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
fffd59ec:	bf00      	nop
fffd59ee:	eb40 0000 	adc.w	r0, r0, r0
fffd59f2:	bf28      	it	cs
fffd59f4:	eba3 0341 	subcs.w	r3, r3, r1, lsl #1
fffd59f8:	ebb3 0f01 	cmp.w	r3, r1
fffd59fc:	bf00      	nop
fffd59fe:	eb40 0000 	adc.w	r0, r0, r0
fffd5a02:	bf28      	it	cs
fffd5a04:	eba3 0301 	subcs.w	r3, r3, r1
fffd5a08:	f1bc 0f00 	cmp.w	r12, #0
fffd5a0c:	bf48      	it	mi
fffd5a0e:	4240      	negmi	r0, r0
fffd5a10:	4770      	bx	lr
fffd5a12:	ea9c 0f00 	teq	r12, r0
fffd5a16:	bf48      	it	mi
fffd5a18:	4240      	negmi	r0, r0
fffd5a1a:	4770      	bx	lr
fffd5a1c:	bf38      	it	cc
fffd5a1e:	2000      	movcc	r0, #0
fffd5a20:	bf04      	itt	eq
fffd5a22:	ea4f 70ec 	moveq.w	r0, r12, asr #31
fffd5a26:	f040 0001 	orreq.w	r0, r0, #1
fffd5a2a:	4770      	bx	lr
fffd5a2c:	fab1 f281 	clz	r2, r1
fffd5a30:	f1c2 021f 	rsb	r2, r2, #31
fffd5a34:	f1bc 0f00 	cmp.w	r12, #0
fffd5a38:	fa23 f002 	lsr.w	r0, r3, r2
fffd5a3c:	bf48      	it	mi
fffd5a3e:	4240      	negmi	r0, r0
fffd5a40:	4770      	bx	lr
fffd5a42:	2800      	cmp	r0, #0
fffd5a44:	bfc8      	it	gt
fffd5a46:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
fffd5a4a:	bfb8      	it	lt
fffd5a4c:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
fffd5a50:	f000 b80e 	b.w	fffd5a70 <__aeabi_idiv0>

fffd5a54 <__aeabi_idivmod>:
fffd5a54:	2900      	cmp	r1, #0
fffd5a56:	d0f4      	beq.n	fffd5a42 <.divsi3_skip_div0_test+0x27c>
fffd5a58:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
fffd5a5c:	f7ff feb3 	bl	fffd57c6 <.divsi3_skip_div0_test>
fffd5a60:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
fffd5a64:	fb02 f300 	mul.w	r3, r2, r0
fffd5a68:	eba1 0103 	sub.w	r1, r1, r3
fffd5a6c:	4770      	bx	lr
fffd5a6e:	bf00      	nop

fffd5a70 <__aeabi_idiv0>:
fffd5a70:	4770      	bx	lr
fffd5a72:	bf00      	nop

fffd5a74 <memset>:
fffd5a74:	b4f0      	push	{r4, r5, r6, r7}
fffd5a76:	0786      	lsls	r6, r0, #30
fffd5a78:	d044      	beq.n	fffd5b04 <memset+0x90>
fffd5a7a:	1e54      	subs	r4, r2, #1
fffd5a7c:	2a00      	cmp	r2, #0
fffd5a7e:	d03f      	beq.n	fffd5b00 <memset+0x8c>
fffd5a80:	b2ca      	uxtb	r2, r1
fffd5a82:	4603      	mov	r3, r0
fffd5a84:	e002      	b.n	fffd5a8c <memset+0x18>
fffd5a86:	f114 34ff 	adds.w	r4, r4, #4294967295
fffd5a8a:	d339      	bcc.n	fffd5b00 <memset+0x8c>
fffd5a8c:	f803 2b01 	strb.w	r2, [r3], #1
fffd5a90:	079d      	lsls	r5, r3, #30
fffd5a92:	d1f8      	bne.n	fffd5a86 <memset+0x12>
fffd5a94:	2c03      	cmp	r4, #3
fffd5a96:	d92c      	bls.n	fffd5af2 <memset+0x7e>
fffd5a98:	b2cd      	uxtb	r5, r1
fffd5a9a:	2c0f      	cmp	r4, #15
fffd5a9c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
fffd5aa0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
fffd5aa4:	d916      	bls.n	fffd5ad4 <memset+0x60>
fffd5aa6:	f1a4 0710 	sub.w	r7, r4, #16
fffd5aaa:	f103 0620 	add.w	r6, r3, #32
fffd5aae:	f103 0210 	add.w	r2, r3, #16
fffd5ab2:	093f      	lsrs	r7, r7, #4
fffd5ab4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
fffd5ab8:	e942 5504 	strd	r5, r5, [r2, #-16]
fffd5abc:	e942 5502 	strd	r5, r5, [r2, #-8]
fffd5ac0:	3210      	adds	r2, #16
fffd5ac2:	42b2      	cmp	r2, r6
fffd5ac4:	d1f8      	bne.n	fffd5ab8 <memset+0x44>
fffd5ac6:	f004 040f 	and.w	r4, r4, #15
fffd5aca:	3701      	adds	r7, #1
fffd5acc:	2c03      	cmp	r4, #3
fffd5ace:	eb03 1307 	add.w	r3, r3, r7, lsl #4
fffd5ad2:	d90e      	bls.n	fffd5af2 <memset+0x7e>
fffd5ad4:	1f26      	subs	r6, r4, #4
fffd5ad6:	1d1f      	adds	r7, r3, #4
fffd5ad8:	461a      	mov	r2, r3
fffd5ada:	08b6      	lsrs	r6, r6, #2
fffd5adc:	eb07 0786 	add.w	r7, r7, r6, lsl #2
fffd5ae0:	f842 5b04 	str.w	r5, [r2], #4
fffd5ae4:	42ba      	cmp	r2, r7
fffd5ae6:	d1fb      	bne.n	fffd5ae0 <memset+0x6c>
fffd5ae8:	3601      	adds	r6, #1
fffd5aea:	f004 0403 	and.w	r4, r4, #3
fffd5aee:	eb03 0386 	add.w	r3, r3, r6, lsl #2
fffd5af2:	b12c      	cbz	r4, fffd5b00 <memset+0x8c>
fffd5af4:	b2c9      	uxtb	r1, r1
fffd5af6:	441c      	add	r4, r3
fffd5af8:	f803 1b01 	strb.w	r1, [r3], #1
fffd5afc:	429c      	cmp	r4, r3
fffd5afe:	d1fb      	bne.n	fffd5af8 <memset+0x84>
fffd5b00:	bcf0      	pop	{r4, r5, r6, r7}
fffd5b02:	4770      	bx	lr
fffd5b04:	4614      	mov	r4, r2
fffd5b06:	4603      	mov	r3, r0
fffd5b08:	e7c4      	b.n	fffd5a94 <memset+0x20>
fffd5b0a:	bf00      	nop

fffd5b0c <sscanf>:
fffd5b0c:	b40e      	push	{r1, r2, r3}
fffd5b0e:	f44f 7201 	mov.w	r2, #516	; 0x204
fffd5b12:	b570      	push	{r4, r5, r6, lr}
fffd5b14:	b09d      	sub	sp, #116	; 0x74
fffd5b16:	ac21      	add	r4, sp, #132	; 0x84
fffd5b18:	f8ad 2014 	strh.w	r2, [sp, #20]
fffd5b1c:	f854 6b04 	ldr.w	r6, [r4], #4
fffd5b20:	9002      	str	r0, [sp, #8]
fffd5b22:	9006      	str	r0, [sp, #24]
fffd5b24:	f7fe ed98 	blx	fffd4658 <strlen>
fffd5b28:	f24d 2188 	movw	r1, #53896	; 0xd288
fffd5b2c:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
fffd5b30:	4623      	mov	r3, r4
fffd5b32:	4632      	mov	r2, r6
fffd5b34:	9401      	str	r4, [sp, #4]
fffd5b36:	f645 3469 	movw	r4, #23401	; 0x5b69
fffd5b3a:	f6cf 74fd 	movt	r4, #65533	; 0xfffd
fffd5b3e:	940a      	str	r4, [sp, #40]	; 0x28
fffd5b40:	2400      	movs	r4, #0
fffd5b42:	940e      	str	r4, [sp, #56]	; 0x38
fffd5b44:	9413      	str	r4, [sp, #76]	; 0x4c
fffd5b46:	4605      	mov	r5, r0
fffd5b48:	9003      	str	r0, [sp, #12]
fffd5b4a:	6808      	ldr	r0, [r1, #0]
fffd5b4c:	a902      	add	r1, sp, #8
fffd5b4e:	9507      	str	r5, [sp, #28]
fffd5b50:	f64f 75ff 	movw	r5, #65535	; 0xffff
fffd5b54:	f8ad 5016 	strh.w	r5, [sp, #22]
fffd5b58:	f000 f808 	bl	fffd5b6c <__ssvfscanf_r>
fffd5b5c:	b01d      	add	sp, #116	; 0x74
fffd5b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
fffd5b62:	b003      	add	sp, #12
fffd5b64:	4770      	bx	lr
fffd5b66:	bf00      	nop

fffd5b68 <__seofread>:
fffd5b68:	2000      	movs	r0, #0
fffd5b6a:	4770      	bx	lr

fffd5b6c <__ssvfscanf_r>:
fffd5b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd5b70:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
fffd5b74:	468b      	mov	r11, r1
fffd5b76:	af02      	add	r7, sp, #8
fffd5b78:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
fffd5b7c:	64f8      	str	r0, [r7, #76]	; 0x4c
fffd5b7e:	0488      	lsls	r0, r1, #18
fffd5b80:	643b      	str	r3, [r7, #64]	; 0x40
fffd5b82:	64ba      	str	r2, [r7, #72]	; 0x48
fffd5b84:	bf5c      	itt	pl
fffd5b86:	f441 5100 	orrpl.w	r1, r1, #8192	; 0x2000
fffd5b8a:	f8db 3064 	ldrpl.w	r3, [r11, #100]	; 0x64
fffd5b8e:	f64c 6284 	movw	r2, #52868	; 0xce84
fffd5b92:	bf58      	it	pl
fffd5b94:	f8ab 100c 	strhpl.w	r1, [r11, #12]
fffd5b98:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd5b9c:	bf58      	it	pl
fffd5b9e:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
fffd5ba2:	60ba      	str	r2, [r7, #8]
fffd5ba4:	bf58      	it	pl
fffd5ba6:	f8cb 3064 	strpl.w	r3, [r11, #100]	; 0x64
fffd5baa:	2300      	movs	r3, #0
fffd5bac:	469a      	mov	r10, r3
fffd5bae:	62fb      	str	r3, [r7, #44]	; 0x2c
fffd5bb0:	e9c7 330d 	strd	r3, r3, [r7, #52]	; 0x34
fffd5bb4:	f249 02c9 	movw	r2, #37065	; 0x90c9
fffd5bb8:	647b      	str	r3, [r7, #68]	; 0x44
fffd5bba:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd5bbe:	f64c 638c 	movw	r3, #52876	; 0xce8c
fffd5bc2:	61fa      	str	r2, [r7, #28]
fffd5bc4:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd5bc8:	61bb      	str	r3, [r7, #24]
fffd5bca:	f24d 2388 	movw	r3, #53896	; 0xd288
fffd5bce:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd5bd2:	623b      	str	r3, [r7, #32]
fffd5bd4:	f8d7 8048 	ldr.w	r8, [r7, #72]	; 0x48
fffd5bd8:	f818 3b01 	ldrb.w	r3, [r8], #1
fffd5bdc:	657b      	str	r3, [r7, #84]	; 0x54
fffd5bde:	2b00      	cmp	r3, #0
fffd5be0:	f000 8084 	beq.w	fffd5cec <__ssvfscanf_r+0x180>
fffd5be4:	f001 fb1a 	bl	fffd721c <__locale_ctype_ptr>
fffd5be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
fffd5bea:	4418      	add	r0, r3
fffd5bec:	7846      	ldrb	r6, [r0, #1]
fffd5bee:	f016 0608 	ands.w	r6, r6, #8
fffd5bf2:	f040 808b 	bne.w	fffd5d0c <__ssvfscanf_r+0x1a0>
fffd5bf6:	2b25      	cmp	r3, #37	; 0x25
fffd5bf8:	f040 80ab 	bne.w	fffd5d52 <__ssvfscanf_r+0x1e6>
fffd5bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
fffd5bfe:	4634      	mov	r4, r6
fffd5c00:	4635      	mov	r5, r6
fffd5c02:	f04f 0c0a 	mov.w	r12, #10
fffd5c06:	785a      	ldrb	r2, [r3, #1]
fffd5c08:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
fffd5c0c:	f108 0001 	add.w	r0, r8, #1
fffd5c10:	2b55      	cmp	r3, #85	; 0x55
fffd5c12:	d86b      	bhi.n	fffd5cec <__ssvfscanf_r+0x180>
fffd5c14:	e8df f013 	tbh	[pc, r3, lsl #1]
fffd5c18:	006a009c 	.word	0x006a009c
fffd5c1c:	006a006a 	.word	0x006a006a
fffd5c20:	0428006a 	.word	0x0428006a
fffd5c24:	006a006a 	.word	0x006a006a
fffd5c28:	006a006a 	.word	0x006a006a
fffd5c2c:	041c006a 	.word	0x041c006a
fffd5c30:	041c041c 	.word	0x041c041c
fffd5c34:	041c041c 	.word	0x041c041c
fffd5c38:	041c041c 	.word	0x041c041c
fffd5c3c:	041c041c 	.word	0x041c041c
fffd5c40:	006a041c 	.word	0x006a041c
fffd5c44:	006a006a 	.word	0x006a006a
fffd5c48:	006a006a 	.word	0x006a006a
fffd5c4c:	006a006a 	.word	0x006a006a
fffd5c50:	006a0418 	.word	0x006a0418
fffd5c54:	04560414 	.word	0x04560414
fffd5c58:	04180418 	.word	0x04180418
fffd5c5c:	006a0418 	.word	0x006a0418
fffd5c60:	006a006a 	.word	0x006a006a
fffd5c64:	00b6006a 	.word	0x00b6006a
fffd5c68:	006a006a 	.word	0x006a006a
fffd5c6c:	006a044c 	.word	0x006a044c
fffd5c70:	006a006a 	.word	0x006a006a
fffd5c74:	006a0446 	.word	0x006a0446
fffd5c78:	006a006a 	.word	0x006a006a
fffd5c7c:	043c006a 	.word	0x043c006a
fffd5c80:	006a006a 	.word	0x006a006a
fffd5c84:	006a0431 	.word	0x006a0431
fffd5c88:	006a006a 	.word	0x006a006a
fffd5c8c:	006a006a 	.word	0x006a006a
fffd5c90:	006a0418 	.word	0x006a0418
fffd5c94:	00c403e4 	.word	0x00c403e4
fffd5c98:	04180418 	.word	0x04180418
fffd5c9c:	04010418 	.word	0x04010418
fffd5ca0:	00b603f6 	.word	0x00b603f6
fffd5ca4:	04a4006a 	.word	0x04a4006a
fffd5ca8:	04750495 	.word	0x04750495
fffd5cac:	046f0473 	.word	0x046f0473
fffd5cb0:	006a006a 	.word	0x006a006a
fffd5cb4:	00be046b 	.word	0x00be046b
fffd5cb8:	006a0463 	.word	0x006a0463
fffd5cbc:	043c006a 	.word	0x043c006a
fffd5cc0:	00be006a 	.word	0x00be006a
fffd5cc4:	4659      	mov	r1, r11
fffd5cc6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd5cc8:	f003 fb3e 	bl	fffd9348 <__ssrefill_r>
fffd5ccc:	2800      	cmp	r0, #0
fffd5cce:	f001 816d 	beq.w	fffd6fac <__ssvfscanf_r+0x1440>
fffd5cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd5cd4:	2b00      	cmp	r3, #0
fffd5cd6:	f000 8164 	beq.w	fffd5fa2 <__ssvfscanf_r+0x436>
fffd5cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
fffd5cdc:	2b00      	cmp	r3, #0
fffd5cde:	f001 8208 	beq.w	fffd70f2 <__ssvfscanf_r+0x1586>
fffd5ce2:	f8bb 300c 	ldrh.w	r3, [r11, #12]
fffd5ce6:	065b      	lsls	r3, r3, #25
fffd5ce8:	f101 8196 	bmi.w	fffd7018 <__ssvfscanf_r+0x14ac>
fffd5cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd5cee:	b13b      	cbz	r3, fffd5d00 <__ssvfscanf_r+0x194>
fffd5cf0:	f8d3 8000 	ldr.w	r8, [r3]
fffd5cf4:	f1b8 0f00 	cmp.w	r8, #0
fffd5cf8:	d002      	beq.n	fffd5d00 <__ssvfscanf_r+0x194>
fffd5cfa:	4640      	mov	r0, r8
fffd5cfc:	f001 fab8 	bl	fffd7270 <free>
fffd5d00:	6c78      	ldr	r0, [r7, #68]	; 0x44
fffd5d02:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
fffd5d06:	46bd      	mov	sp, r7
fffd5d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd5d0c:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd5d10:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
fffd5d12:	e012      	b.n	fffd5d3a <__ssvfscanf_r+0x1ce>
fffd5d14:	f001 fa82 	bl	fffd721c <__locale_ctype_ptr>
fffd5d18:	f8db 3000 	ldr.w	r3, [r11]
fffd5d1c:	1c5a      	adds	r2, r3, #1
fffd5d1e:	781b      	ldrb	r3, [r3, #0]
fffd5d20:	4418      	add	r0, r3
fffd5d22:	7843      	ldrb	r3, [r0, #1]
fffd5d24:	0719      	lsls	r1, r3, #28
fffd5d26:	d510      	bpl.n	fffd5d4a <__ssvfscanf_r+0x1de>
fffd5d28:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd5d2c:	f10a 0a01 	add.w	r10, r10, #1
fffd5d30:	f8cb 2000 	str.w	r2, [r11]
fffd5d34:	3b01      	subs	r3, #1
fffd5d36:	f8cb 3004 	str.w	r3, [r11, #4]
fffd5d3a:	2b00      	cmp	r3, #0
fffd5d3c:	dcea      	bgt.n	fffd5d14 <__ssvfscanf_r+0x1a8>
fffd5d3e:	4659      	mov	r1, r11
fffd5d40:	4620      	mov	r0, r4
fffd5d42:	f003 fb01 	bl	fffd9348 <__ssrefill_r>
fffd5d46:	2800      	cmp	r0, #0
fffd5d48:	d0e4      	beq.n	fffd5d14 <__ssvfscanf_r+0x1a8>
fffd5d4a:	f8c7 8048 	str.w	r8, [r7, #72]	; 0x48
fffd5d4e:	e741      	b.n	fffd5bd4 <__ssvfscanf_r+0x68>
fffd5d50:	4680      	mov	r8, r0
fffd5d52:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd5d56:	2b00      	cmp	r3, #0
fffd5d58:	f340 8716 	ble.w	fffd6b88 <__ssvfscanf_r+0x101c>
fffd5d5c:	f8db 3000 	ldr.w	r3, [r11]
fffd5d60:	f818 2c01 	ldrb.w	r2, [r8, #-1]
fffd5d64:	7819      	ldrb	r1, [r3, #0]
fffd5d66:	4291      	cmp	r1, r2
fffd5d68:	d1c0      	bne.n	fffd5cec <__ssvfscanf_r+0x180>
fffd5d6a:	f8db 2004 	ldr.w	r2, [r11, #4]
fffd5d6e:	3301      	adds	r3, #1
fffd5d70:	f10a 0a01 	add.w	r10, r10, #1
fffd5d74:	f8cb 3000 	str.w	r3, [r11]
fffd5d78:	3a01      	subs	r2, #1
fffd5d7a:	f8c7 8048 	str.w	r8, [r7, #72]	; 0x48
fffd5d7e:	f8cb 2004 	str.w	r2, [r11, #4]
fffd5d82:	e727      	b.n	fffd5bd4 <__ssvfscanf_r+0x68>
fffd5d84:	0721      	lsls	r1, r4, #28
fffd5d86:	d1b1      	bne.n	fffd5cec <__ssvfscanf_r+0x180>
fffd5d88:	f898 2001 	ldrb.w	r2, [r8, #1]
fffd5d8c:	f044 0402 	orr.w	r4, r4, #2
fffd5d90:	4680      	mov	r8, r0
fffd5d92:	e739      	b.n	fffd5c08 <__ssvfscanf_r+0x9c>
fffd5d94:	0722      	lsls	r2, r4, #28
fffd5d96:	d1a9      	bne.n	fffd5cec <__ssvfscanf_r+0x180>
fffd5d98:	f898 2001 	ldrb.w	r2, [r8, #1]
fffd5d9c:	4680      	mov	r8, r0
fffd5d9e:	e733      	b.n	fffd5c08 <__ssvfscanf_r+0x9c>
fffd5da0:	f04f 0803 	mov.w	r8, #3
fffd5da4:	f648 5395 	movw	r3, #36245	; 0x8d95
fffd5da8:	64b8      	str	r0, [r7, #72]	; 0x48
fffd5daa:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd5dae:	62fb      	str	r3, [r7, #44]	; 0x2c
fffd5db0:	230a      	movs	r3, #10
fffd5db2:	63bb      	str	r3, [r7, #56]	; 0x38
fffd5db4:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd5db8:	2b00      	cmp	r3, #0
fffd5dba:	f340 831b 	ble.w	fffd63f4 <__ssvfscanf_r+0x888>
fffd5dbe:	0662      	lsls	r2, r4, #25
fffd5dc0:	d512      	bpl.n	fffd5de8 <__ssvfscanf_r+0x27c>
fffd5dc2:	f108 38ff 	add.w	r8, r8, #4294967295
fffd5dc6:	f1b8 0f03 	cmp.w	r8, #3
fffd5dca:	f200 80fe 	bhi.w	fffd5fca <__ssvfscanf_r+0x45e>
fffd5dce:	e8df f018 	tbh	[pc, r8, lsl #1]
fffd5dd2:	01b7      	.short	0x01b7
fffd5dd4:	00220092 	.word	0x00220092
fffd5dd8:	03e2      	.short	0x03e2
fffd5dda:	4659      	mov	r1, r11
fffd5ddc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd5dde:	f003 fab3 	bl	fffd9348 <__ssrefill_r>
fffd5de2:	2800      	cmp	r0, #0
fffd5de4:	f47f af79 	bne.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd5de8:	f001 fa18 	bl	fffd721c <__locale_ctype_ptr>
fffd5dec:	f8db 3000 	ldr.w	r3, [r11]
fffd5df0:	1c5a      	adds	r2, r3, #1
fffd5df2:	781b      	ldrb	r3, [r3, #0]
fffd5df4:	4418      	add	r0, r3
fffd5df6:	7843      	ldrb	r3, [r0, #1]
fffd5df8:	071b      	lsls	r3, r3, #28
fffd5dfa:	d5e2      	bpl.n	fffd5dc2 <__ssvfscanf_r+0x256>
fffd5dfc:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd5e00:	f10a 0a01 	add.w	r10, r10, #1
fffd5e04:	3b01      	subs	r3, #1
fffd5e06:	f8cb 3004 	str.w	r3, [r11, #4]
fffd5e0a:	2b00      	cmp	r3, #0
fffd5e0c:	bfc8      	it	gt
fffd5e0e:	f8cb 2000 	strgt.w	r2, [r11]
fffd5e12:	dce9      	bgt.n	fffd5de8 <__ssvfscanf_r+0x27c>
fffd5e14:	e7e1      	b.n	fffd5dda <__ssvfscanf_r+0x26e>
fffd5e16:	1e6b      	subs	r3, r5, #1
fffd5e18:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
fffd5e1c:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
fffd5e20:	f04f 0800 	mov.w	r8, #0
fffd5e24:	f507 76b4 	add.w	r6, r7, #360	; 0x168
fffd5e28:	633e      	str	r6, [r7, #48]	; 0x30
fffd5e2a:	bf92      	itee	ls
fffd5e2c:	f04f 0900 	movls.w	r9, #0
fffd5e30:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
fffd5e34:	eb05 0902 	addhi.w	r9, r5, r2
fffd5e38:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
fffd5e3c:	f8d7 9038 	ldr.w	r9, [r7, #56]	; 0x38
fffd5e40:	bf88      	it	hi
fffd5e42:	f240 155d 	movwhi	r5, #349	; 0x15d
fffd5e46:	f8db 1000 	ldr.w	r1, [r11]
fffd5e4a:	7808      	ldrb	r0, [r1, #0]
fffd5e4c:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
fffd5e50:	2b4d      	cmp	r3, #77	; 0x4d
fffd5e52:	f200 8268 	bhi.w	fffd6326 <__ssvfscanf_r+0x7ba>
fffd5e56:	e8df f013 	tbh	[pc, r3, lsl #1]
fffd5e5a:	0293      	.short	0x0293
fffd5e5c:	02930266 	.word	0x02930266
fffd5e60:	02660266 	.word	0x02660266
fffd5e64:	02510298 	.word	0x02510298
fffd5e68:	02510251 	.word	0x02510251
fffd5e6c:	02510251 	.word	0x02510251
fffd5e70:	02510251 	.word	0x02510251
fffd5e74:	02bc02bc 	.word	0x02bc02bc
fffd5e78:	02660266 	.word	0x02660266
fffd5e7c:	02660266 	.word	0x02660266
fffd5e80:	02660266 	.word	0x02660266
fffd5e84:	028d0266 	.word	0x028d0266
fffd5e88:	028d028d 	.word	0x028d028d
fffd5e8c:	028d028d 	.word	0x028d028d
fffd5e90:	0266028d 	.word	0x0266028d
fffd5e94:	02660266 	.word	0x02660266
fffd5e98:	02660266 	.word	0x02660266
fffd5e9c:	02660266 	.word	0x02660266
fffd5ea0:	02660266 	.word	0x02660266
fffd5ea4:	02660266 	.word	0x02660266
fffd5ea8:	02660266 	.word	0x02660266
fffd5eac:	02660266 	.word	0x02660266
fffd5eb0:	02660266 	.word	0x02660266
fffd5eb4:	026602b0 	.word	0x026602b0
fffd5eb8:	02660266 	.word	0x02660266
fffd5ebc:	02660266 	.word	0x02660266
fffd5ec0:	02660266 	.word	0x02660266
fffd5ec4:	028d0266 	.word	0x028d0266
fffd5ec8:	028d028d 	.word	0x028d028d
fffd5ecc:	028d028d 	.word	0x028d028d
fffd5ed0:	0266028d 	.word	0x0266028d
fffd5ed4:	02660266 	.word	0x02660266
fffd5ed8:	02660266 	.word	0x02660266
fffd5edc:	02660266 	.word	0x02660266
fffd5ee0:	02660266 	.word	0x02660266
fffd5ee4:	02660266 	.word	0x02660266
fffd5ee8:	02660266 	.word	0x02660266
fffd5eec:	02660266 	.word	0x02660266
fffd5ef0:	02660266 	.word	0x02660266
fffd5ef4:	02b0      	.short	0x02b0
fffd5ef6:	2d00      	cmp	r5, #0
fffd5ef8:	f004 0610 	and.w	r6, r4, #16
fffd5efc:	bf08      	it	eq
fffd5efe:	f04f 35ff 	moveq.w	r5, #4294967295
fffd5f02:	f014 0801 	ands.w	r8, r4, #1
fffd5f06:	f000 851a 	beq.w	fffd693e <__ssvfscanf_r+0xdd2>
fffd5f0a:	2e00      	cmp	r6, #0
fffd5f0c:	f040 86ce 	bne.w	fffd6cac <__ssvfscanf_r+0x1140>
fffd5f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd5f12:	f853 8b04 	ldr.w	r8, [r3], #4
fffd5f16:	643b      	str	r3, [r7, #64]	; 0x40
fffd5f18:	0623      	lsls	r3, r4, #24
fffd5f1a:	f141 802d 	bpl.w	fffd6f78 <__ssvfscanf_r+0x140c>
fffd5f1e:	f1b8 0f00 	cmp.w	r8, #0
fffd5f22:	f001 811f 	beq.w	fffd7164 <__ssvfscanf_r+0x15f8>
fffd5f26:	2080      	movs	r0, #128	; 0x80
fffd5f28:	f001 f99a 	bl	fffd7260 <malloc>
fffd5f2c:	4681      	mov	r9, r0
fffd5f2e:	2800      	cmp	r0, #0
fffd5f30:	f001 80cd 	beq.w	fffd70ce <__ssvfscanf_r+0x1562>
fffd5f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd5f36:	f8c8 0000 	str.w	r0, [r8]
fffd5f3a:	88d4      	ldrh	r4, [r2, #6]
fffd5f3c:	8893      	ldrh	r3, [r2, #4]
fffd5f3e:	429c      	cmp	r4, r3
fffd5f40:	bf38      	it	cc
fffd5f42:	6810      	ldrcc	r0, [r2, #0]
fffd5f44:	d312      	bcc.n	fffd5f6c <__ssvfscanf_r+0x400>
fffd5f46:	f64f 72f6 	movw	r2, #65526	; 0xfff6
fffd5f4a:	4293      	cmp	r3, r2
fffd5f4c:	f201 8126 	bhi.w	fffd719c <__ssvfscanf_r+0x1630>
fffd5f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd5f52:	3308      	adds	r3, #8
fffd5f54:	63fb      	str	r3, [r7, #60]	; 0x3c
fffd5f56:	0099      	lsls	r1, r3, #2
fffd5f58:	6810      	ldr	r0, [r2, #0]
fffd5f5a:	f001 fc9f 	bl	fffd789c <realloc>
fffd5f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd5f60:	2800      	cmp	r0, #0
fffd5f62:	f001 8125 	beq.w	fffd71b0 <__ssvfscanf_r+0x1644>
fffd5f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd5f68:	6010      	str	r0, [r2, #0]
fffd5f6a:	8093      	strh	r3, [r2, #4]
fffd5f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd5f6e:	f840 8024 	str.w	r8, [r0, r4, lsl #2]
fffd5f72:	3401      	adds	r4, #1
fffd5f74:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
fffd5f78:	46c8      	mov	r8, r9
fffd5f7a:	80dc      	strh	r4, [r3, #6]
fffd5f7c:	2320      	movs	r3, #32
fffd5f7e:	62bb      	str	r3, [r7, #40]	; 0x28
fffd5f80:	2400      	movs	r4, #0
fffd5f82:	f001 f94b 	bl	fffd721c <__locale_ctype_ptr>
fffd5f86:	f8db 3000 	ldr.w	r3, [r11]
fffd5f8a:	1c2a      	adds	r2, r5, #0
fffd5f8c:	781b      	ldrb	r3, [r3, #0]
fffd5f8e:	bf18      	it	ne
fffd5f90:	2201      	movne	r2, #1
fffd5f92:	4418      	add	r0, r3
fffd5f94:	7843      	ldrb	r3, [r0, #1]
fffd5f96:	f083 0308 	eor.w	r3, r3, #8
fffd5f9a:	ea12 03d3 	ands.w	r3, r2, r3, lsr #3
fffd5f9e:	f040 860c 	bne.w	fffd6bba <__ssvfscanf_r+0x104e>
fffd5fa2:	2e00      	cmp	r6, #0
fffd5fa4:	f47f ae16 	bne.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd5fa8:	eba8 0109 	sub.w	r1, r8, r9
fffd5fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd5fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
fffd5fb0:	1089      	asrs	r1, r1, #2
fffd5fb2:	f8c8 6000 	str.w	r6, [r8]
fffd5fb6:	3101      	adds	r1, #1
fffd5fb8:	2b00      	cmp	r3, #0
fffd5fba:	bf18      	it	ne
fffd5fbc:	428a      	cmpne	r2, r1
fffd5fbe:	f200 87c1 	bhi.w	fffd6f44 <__ssvfscanf_r+0x13d8>
fffd5fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
fffd5fc4:	3301      	adds	r3, #1
fffd5fc6:	647b      	str	r3, [r7, #68]	; 0x44
fffd5fc8:	e604      	b.n	fffd5bd4 <__ssvfscanf_r+0x68>
fffd5fca:	2d00      	cmp	r5, #0
fffd5fcc:	f004 0210 	and.w	r2, r4, #16
fffd5fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
fffd5fd2:	bf08      	it	eq
fffd5fd4:	2501      	moveq	r5, #1
fffd5fd6:	f014 0301 	ands.w	r3, r4, #1
fffd5fda:	f000 8460 	beq.w	fffd689e <__ssvfscanf_r+0xd32>
fffd5fde:	2a00      	cmp	r2, #0
fffd5fe0:	f040 866d 	bne.w	fffd6cbe <__ssvfscanf_r+0x1152>
fffd5fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd5fe6:	0626      	lsls	r6, r4, #24
fffd5fe8:	f853 8b04 	ldr.w	r8, [r3], #4
fffd5fec:	643b      	str	r3, [r7, #64]	; 0x40
fffd5fee:	f140 87ce 	bpl.w	fffd6f8e <__ssvfscanf_r+0x1422>
fffd5ff2:	f1b8 0f00 	cmp.w	r8, #0
fffd5ff6:	f001 80b5 	beq.w	fffd7164 <__ssvfscanf_r+0x15f8>
fffd5ffa:	2080      	movs	r0, #128	; 0x80
fffd5ffc:	f001 f930 	bl	fffd7260 <malloc>
fffd6000:	62b8      	str	r0, [r7, #40]	; 0x28
fffd6002:	2800      	cmp	r0, #0
fffd6004:	f001 8063 	beq.w	fffd70ce <__ssvfscanf_r+0x1562>
fffd6008:	6b79      	ldr	r1, [r7, #52]	; 0x34
fffd600a:	6aba      	ldr	r2, [r7, #40]	; 0x28
fffd600c:	88cc      	ldrh	r4, [r1, #6]
fffd600e:	888b      	ldrh	r3, [r1, #4]
fffd6010:	f8c8 2000 	str.w	r2, [r8]
fffd6014:	429c      	cmp	r4, r3
fffd6016:	d310      	bcc.n	fffd603a <__ssvfscanf_r+0x4ce>
fffd6018:	f64f 72f6 	movw	r2, #65526	; 0xfff6
fffd601c:	4293      	cmp	r3, r2
fffd601e:	f201 80bd 	bhi.w	fffd719c <__ssvfscanf_r+0x1630>
fffd6022:	f103 0608 	add.w	r6, r3, #8
fffd6026:	6808      	ldr	r0, [r1, #0]
fffd6028:	00b1      	lsls	r1, r6, #2
fffd602a:	f001 fc37 	bl	fffd789c <realloc>
fffd602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd6030:	2800      	cmp	r0, #0
fffd6032:	f001 804e 	beq.w	fffd70d2 <__ssvfscanf_r+0x1566>
fffd6036:	6018      	str	r0, [r3, #0]
fffd6038:	809e      	strh	r6, [r3, #4]
fffd603a:	6b79      	ldr	r1, [r7, #52]	; 0x34
fffd603c:	1c62      	adds	r2, r4, #1
fffd603e:	f8c7 8014 	str.w	r8, [r7, #20]
fffd6042:	680b      	ldr	r3, [r1, #0]
fffd6044:	80ca      	strh	r2, [r1, #6]
fffd6046:	f843 8024 	str.w	r8, [r3, r4, lsl #2]
fffd604a:	2320      	movs	r3, #32
fffd604c:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
fffd6050:	627b      	str	r3, [r7, #36]	; 0x24
fffd6052:	f8c7 a030 	str.w	r10, [r7, #48]	; 0x30
fffd6056:	f507 79b4 	add.w	r9, r7, #360	; 0x168
fffd605a:	f8d7 a000 	ldr.w	r10, [r7]
fffd605e:	2400      	movs	r4, #0
fffd6060:	f001 f8c8 	bl	fffd71f4 <__locale_mb_cur_max>
fffd6064:	42a0      	cmp	r0, r4
fffd6066:	f43f ae38 	beq.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd606a:	f8db 2000 	ldr.w	r2, [r11]
fffd606e:	f1ba 0f03 	cmp.w	r10, #3
fffd6072:	f8db 1004 	ldr.w	r1, [r11, #4]
fffd6076:	f104 0601 	add.w	r6, r4, #1
fffd607a:	f812 0b01 	ldrb.w	r0, [r2], #1
fffd607e:	f101 31ff 	add.w	r1, r1, #4294967295
fffd6082:	f8cb 1004 	str.w	r1, [r11, #4]
fffd6086:	f809 0004 	strb.w	r0, [r9, r4]
fffd608a:	f107 0460 	add.w	r4, r7, #96	; 0x60
fffd608e:	f8cb 2000 	str.w	r2, [r11]
fffd6092:	d102      	bne.n	fffd609a <__ssvfscanf_r+0x52e>
fffd6094:	6823      	ldr	r3, [r4, #0]
fffd6096:	2b04      	cmp	r3, #4
fffd6098:	d004      	beq.n	fffd60a4 <__ssvfscanf_r+0x538>
fffd609a:	2208      	movs	r2, #8
fffd609c:	2100      	movs	r1, #0
fffd609e:	4620      	mov	r0, r4
fffd60a0:	f7ff fce8 	bl	fffd5a74 <memset>
fffd60a4:	9400      	str	r4, [sp, #0]
fffd60a6:	4633      	mov	r3, r6
fffd60a8:	464a      	mov	r2, r9
fffd60aa:	4641      	mov	r1, r8
fffd60ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd60ae:	f001 fba7 	bl	fffd7800 <_mbrtowc_r>
fffd60b2:	f1b0 3fff 	cmp.w	r0, #4294967295
fffd60b6:	4682      	mov	r10, r0
fffd60b8:	f43f ae0f 	beq.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd60bc:	2800      	cmp	r0, #0
fffd60be:	f040 8659 	bne.w	fffd6d74 <__ssvfscanf_r+0x1208>
fffd60c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd60c4:	b90b      	cbnz	r3, fffd60ca <__ssvfscanf_r+0x55e>
fffd60c6:	f8c8 3000 	str.w	r3, [r8]
fffd60ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd60cc:	4433      	add	r3, r6
fffd60ce:	633b      	str	r3, [r7, #48]	; 0x30
fffd60d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd60d2:	3d01      	subs	r5, #1
fffd60d4:	2b00      	cmp	r3, #0
fffd60d6:	f040 8661 	bne.w	fffd6d9c <__ssvfscanf_r+0x1230>
fffd60da:	6abb      	ldr	r3, [r7, #40]	; 0x28
fffd60dc:	eba8 0403 	sub.w	r4, r8, r3
fffd60e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
fffd60e2:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
fffd60e6:	697b      	ldr	r3, [r7, #20]
fffd60e8:	bf94      	ite	ls
fffd60ea:	2201      	movls	r2, #1
fffd60ec:	2200      	movhi	r2, #0
fffd60ee:	2b00      	cmp	r3, #0
fffd60f0:	bf08      	it	eq
fffd60f2:	2200      	moveq	r2, #0
fffd60f4:	2a00      	cmp	r2, #0
fffd60f6:	f040 867f 	bne.w	fffd6df8 <__ssvfscanf_r+0x128c>
fffd60fa:	f108 0804 	add.w	r8, r8, #4
fffd60fe:	2400      	movs	r4, #0
fffd6100:	f8db 2004 	ldr.w	r2, [r11, #4]
fffd6104:	2a00      	cmp	r2, #0
fffd6106:	f340 8548 	ble.w	fffd6b9a <__ssvfscanf_r+0x102e>
fffd610a:	2d00      	cmp	r5, #0
fffd610c:	d1a8      	bne.n	fffd6060 <__ssvfscanf_r+0x4f4>
fffd610e:	f8c7 a000 	str.w	r10, [r7]
fffd6112:	f8d7 a030 	ldr.w	r10, [r7, #48]	; 0x30
fffd6116:	6abb      	ldr	r3, [r7, #40]	; 0x28
fffd6118:	697a      	ldr	r2, [r7, #20]
fffd611a:	eba8 0103 	sub.w	r1, r8, r3
fffd611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
fffd6120:	ebb3 0fa1 	cmp.w	r3, r1, asr #2
fffd6124:	bf8c      	ite	hi
fffd6126:	2301      	movhi	r3, #1
fffd6128:	2300      	movls	r3, #0
fffd612a:	2a00      	cmp	r2, #0
fffd612c:	bf08      	it	eq
fffd612e:	2300      	moveq	r3, #0
fffd6130:	2b00      	cmp	r3, #0
fffd6132:	f040 87b5 	bne.w	fffd70a0 <__ssvfscanf_r+0x1534>
fffd6136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6138:	2b00      	cmp	r3, #0
fffd613a:	f47f ad4b 	bne.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd613e:	e740      	b.n	fffd5fc2 <__ssvfscanf_r+0x456>
fffd6140:	2d00      	cmp	r5, #0
fffd6142:	f004 0310 	and.w	r3, r4, #16
fffd6146:	62bb      	str	r3, [r7, #40]	; 0x28
fffd6148:	bf08      	it	eq
fffd614a:	f04f 35ff 	moveq.w	r5, #4294967295
fffd614e:	f014 0601 	ands.w	r6, r4, #1
fffd6152:	f000 849c 	beq.w	fffd6a8e <__ssvfscanf_r+0xf22>
fffd6156:	2b00      	cmp	r3, #0
fffd6158:	f040 85b8 	bne.w	fffd6ccc <__ssvfscanf_r+0x1160>
fffd615c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd615e:	0620      	lsls	r0, r4, #24
fffd6160:	f853 9b04 	ldr.w	r9, [r3], #4
fffd6164:	643b      	str	r3, [r7, #64]	; 0x40
fffd6166:	f140 870c 	bpl.w	fffd6f82 <__ssvfscanf_r+0x1416>
fffd616a:	f1b9 0f00 	cmp.w	r9, #0
fffd616e:	f000 87f9 	beq.w	fffd7164 <__ssvfscanf_r+0x15f8>
fffd6172:	2080      	movs	r0, #128	; 0x80
fffd6174:	f001 f874 	bl	fffd7260 <malloc>
fffd6178:	6178      	str	r0, [r7, #20]
fffd617a:	2800      	cmp	r0, #0
fffd617c:	f000 87a7 	beq.w	fffd70ce <__ssvfscanf_r+0x1562>
fffd6180:	6b79      	ldr	r1, [r7, #52]	; 0x34
fffd6182:	697a      	ldr	r2, [r7, #20]
fffd6184:	88cc      	ldrh	r4, [r1, #6]
fffd6186:	888b      	ldrh	r3, [r1, #4]
fffd6188:	f8c9 2000 	str.w	r2, [r9]
fffd618c:	429c      	cmp	r4, r3
fffd618e:	d310      	bcc.n	fffd61b2 <__ssvfscanf_r+0x646>
fffd6190:	f64f 72f6 	movw	r2, #65526	; 0xfff6
fffd6194:	4293      	cmp	r3, r2
fffd6196:	f201 8001 	bhi.w	fffd719c <__ssvfscanf_r+0x1630>
fffd619a:	f103 0608 	add.w	r6, r3, #8
fffd619e:	6808      	ldr	r0, [r1, #0]
fffd61a0:	00b1      	lsls	r1, r6, #2
fffd61a2:	f001 fb7b 	bl	fffd789c <realloc>
fffd61a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd61a8:	2800      	cmp	r0, #0
fffd61aa:	f000 8792 	beq.w	fffd70d2 <__ssvfscanf_r+0x1566>
fffd61ae:	6018      	str	r0, [r3, #0]
fffd61b0:	809e      	strh	r6, [r3, #4]
fffd61b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
fffd61b4:	1c62      	adds	r2, r4, #1
fffd61b6:	f8c7 9004 	str.w	r9, [r7, #4]
fffd61ba:	680b      	ldr	r3, [r1, #0]
fffd61bc:	80ca      	strh	r2, [r1, #6]
fffd61be:	f843 9024 	str.w	r9, [r3, r4, lsl #2]
fffd61c2:	2320      	movs	r3, #32
fffd61c4:	f8d7 9014 	ldr.w	r9, [r7, #20]
fffd61c8:	60fb      	str	r3, [r7, #12]
fffd61ca:	f24d 63b8 	movw	r3, #54968	; 0xd6b8
fffd61ce:	63fd      	str	r5, [r7, #60]	; 0x3c
fffd61d0:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd61d4:	2400      	movs	r4, #0
fffd61d6:	613b      	str	r3, [r7, #16]
fffd61d8:	f8c7 a030 	str.w	r10, [r7, #48]	; 0x30
fffd61dc:	683d      	ldr	r5, [r7, #0]
fffd61de:	e052      	b.n	fffd6286 <__ssvfscanf_r+0x71a>
fffd61e0:	4682      	mov	r10, r0
fffd61e2:	f8c9 0000 	str.w	r0, [r9]
fffd61e6:	f107 0460 	add.w	r4, r7, #96	; 0x60
fffd61ea:	2208      	movs	r2, #8
fffd61ec:	2100      	movs	r1, #0
fffd61ee:	4620      	mov	r0, r4
fffd61f0:	f7ff fc40 	bl	fffd5a74 <memset>
fffd61f4:	6a3b      	ldr	r3, [r7, #32]
fffd61f6:	4652      	mov	r2, r10
fffd61f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
fffd61fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd61fe:	681b      	ldr	r3, [r3, #0]
fffd6200:	627b      	str	r3, [r7, #36]	; 0x24
fffd6202:	4623      	mov	r3, r4
fffd6204:	6a7c      	ldr	r4, [r7, #36]	; 0x24
fffd6206:	f8d4 c034 	ldr.w	r12, [r4, #52]	; 0x34
fffd620a:	693c      	ldr	r4, [r7, #16]
fffd620c:	f1bc 0f00 	cmp.w	r12, #0
fffd6210:	bf08      	it	eq
fffd6212:	46a4      	moveq	r12, r4
fffd6214:	f8dc 40e0 	ldr.w	r4, [r12, #224]	; 0xe0
fffd6218:	47a0      	blx	r4
fffd621a:	2801      	cmp	r0, #1
fffd621c:	bf0c      	ite	eq
fffd621e:	f897 a050 	ldrbeq.w	r10, [r7, #80]	; 0x50
fffd6222:	f04f 0a00 	movne.w	r10, #0
fffd6226:	f107 0368 	add.w	r3, r7, #104	; 0x68
fffd622a:	f813 300a 	ldrb.w	r3, [r3, r10]
fffd622e:	2b00      	cmp	r3, #0
fffd6230:	f000 8720 	beq.w	fffd7074 <__ssvfscanf_r+0x1508>
fffd6234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd6236:	2d03      	cmp	r5, #3
fffd6238:	4443      	add	r3, r8
fffd623a:	633b      	str	r3, [r7, #48]	; 0x30
fffd623c:	f000 85d6 	beq.w	fffd6dec <__ssvfscanf_r+0x1280>
fffd6240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6242:	3b01      	subs	r3, #1
fffd6244:	63fb      	str	r3, [r7, #60]	; 0x3c
fffd6246:	6abb      	ldr	r3, [r7, #40]	; 0x28
fffd6248:	2b00      	cmp	r3, #0
fffd624a:	f040 85aa 	bne.w	fffd6da2 <__ssvfscanf_r+0x1236>
fffd624e:	697b      	ldr	r3, [r7, #20]
fffd6250:	f109 0904 	add.w	r9, r9, #4
fffd6254:	687a      	ldr	r2, [r7, #4]
fffd6256:	eba9 0403 	sub.w	r4, r9, r3
fffd625a:	68fb      	ldr	r3, [r7, #12]
fffd625c:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
fffd6260:	bf94      	ite	ls
fffd6262:	2301      	movls	r3, #1
fffd6264:	2300      	movhi	r3, #0
fffd6266:	2a00      	cmp	r2, #0
fffd6268:	bf08      	it	eq
fffd626a:	2300      	moveq	r3, #0
fffd626c:	2b00      	cmp	r3, #0
fffd626e:	f040 85d4 	bne.w	fffd6e1a <__ssvfscanf_r+0x12ae>
fffd6272:	6abc      	ldr	r4, [r7, #40]	; 0x28
fffd6274:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd6278:	2b00      	cmp	r3, #0
fffd627a:	f340 8598 	ble.w	fffd6dae <__ssvfscanf_r+0x1242>
fffd627e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6280:	2b00      	cmp	r3, #0
fffd6282:	f000 864a 	beq.w	fffd6f1a <__ssvfscanf_r+0x13ae>
fffd6286:	f000 ffb5 	bl	fffd71f4 <__locale_mb_cur_max>
fffd628a:	42a0      	cmp	r0, r4
fffd628c:	f43f ad25 	beq.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd6290:	f8db 3000 	ldr.w	r3, [r11]
fffd6294:	2d03      	cmp	r5, #3
fffd6296:	f8db 2004 	ldr.w	r2, [r11, #4]
fffd629a:	f104 0801 	add.w	r8, r4, #1
fffd629e:	f107 0658 	add.w	r6, r7, #88	; 0x58
fffd62a2:	f813 1b01 	ldrb.w	r1, [r3], #1
fffd62a6:	f102 32ff 	add.w	r2, r2, #4294967295
fffd62aa:	f8cb 2004 	str.w	r2, [r11, #4]
fffd62ae:	f507 72b4 	add.w	r2, r7, #360	; 0x168
fffd62b2:	f8cb 3000 	str.w	r3, [r11]
fffd62b6:	5511      	strb	r1, [r2, r4]
fffd62b8:	d102      	bne.n	fffd62c0 <__ssvfscanf_r+0x754>
fffd62ba:	6833      	ldr	r3, [r6, #0]
fffd62bc:	2b04      	cmp	r3, #4
fffd62be:	d004      	beq.n	fffd62ca <__ssvfscanf_r+0x75e>
fffd62c0:	2208      	movs	r2, #8
fffd62c2:	2100      	movs	r1, #0
fffd62c4:	4630      	mov	r0, r6
fffd62c6:	f7ff fbd5 	bl	fffd5a74 <memset>
fffd62ca:	4649      	mov	r1, r9
fffd62cc:	9600      	str	r6, [sp, #0]
fffd62ce:	4643      	mov	r3, r8
fffd62d0:	f507 72b4 	add.w	r2, r7, #360	; 0x168
fffd62d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd62d6:	f001 fa93 	bl	fffd7800 <_mbrtowc_r>
fffd62da:	1c41      	adds	r1, r0, #1
fffd62dc:	4605      	mov	r5, r0
fffd62de:	f43f acfc 	beq.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd62e2:	2800      	cmp	r0, #0
fffd62e4:	f43f af7c 	beq.w	fffd61e0 <__ssvfscanf_r+0x674>
fffd62e8:	1c82      	adds	r2, r0, #2
fffd62ea:	bf08      	it	eq
fffd62ec:	4644      	moveq	r4, r8
fffd62ee:	d0c1      	beq.n	fffd6274 <__ssvfscanf_r+0x708>
fffd62f0:	f8d9 a000 	ldr.w	r10, [r9]
fffd62f4:	f1ba 3fff 	cmp.w	r10, #4294967295
fffd62f8:	d095      	beq.n	fffd6226 <__ssvfscanf_r+0x6ba>
fffd62fa:	e774      	b.n	fffd61e6 <__ssvfscanf_r+0x67a>
fffd62fc:	69bb      	ldr	r3, [r7, #24]
fffd62fe:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
fffd6302:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
fffd6306:	7030      	strb	r0, [r6, #0]
fffd6308:	3601      	adds	r6, #1
fffd630a:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd630e:	3b01      	subs	r3, #1
fffd6310:	f8cb 3004 	str.w	r3, [r11, #4]
fffd6314:	2b00      	cmp	r3, #0
fffd6316:	f340 8136 	ble.w	fffd6586 <__ssvfscanf_r+0xa1a>
fffd631a:	3101      	adds	r1, #1
fffd631c:	f8cb 1000 	str.w	r1, [r11]
fffd6320:	3d01      	subs	r5, #1
fffd6322:	f47f ad90 	bne.w	fffd5e46 <__ssvfscanf_r+0x2da>
fffd6326:	05e0      	lsls	r0, r4, #23
fffd6328:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
fffd632c:	d507      	bpl.n	fffd633e <__ssvfscanf_r+0x7d2>
fffd632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd6330:	429e      	cmp	r6, r3
fffd6332:	f200 84f1 	bhi.w	fffd6d18 <__ssvfscanf_r+0x11ac>
fffd6336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd6338:	429e      	cmp	r6, r3
fffd633a:	f43f acd7 	beq.w	fffd5cec <__ssvfscanf_r+0x180>
fffd633e:	f014 0510 	ands.w	r5, r4, #16
fffd6342:	f040 82a6 	bne.w	fffd6892 <__ssvfscanf_r+0xd26>
fffd6346:	462a      	mov	r2, r5
fffd6348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
fffd634a:	6b39      	ldr	r1, [r7, #48]	; 0x30
fffd634c:	7035      	strb	r5, [r6, #0]
fffd634e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6350:	6afd      	ldr	r5, [r7, #44]	; 0x2c
fffd6352:	47a8      	blx	r5
fffd6354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd6356:	06a1      	lsls	r1, r4, #26
fffd6358:	f103 0504 	add.w	r5, r3, #4
fffd635c:	f100 8293 	bmi.w	fffd6886 <__ssvfscanf_r+0xd1a>
fffd6360:	0722      	lsls	r2, r4, #28
fffd6362:	f100 847b 	bmi.w	fffd6c5c <__ssvfscanf_r+0x10f0>
fffd6366:	0763      	lsls	r3, r4, #29
fffd6368:	f140 8288 	bpl.w	fffd687c <__ssvfscanf_r+0xd10>
fffd636c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd636e:	681b      	ldr	r3, [r3, #0]
fffd6370:	8018      	strh	r0, [r3, #0]
fffd6372:	e28a      	b.n	fffd688a <__ssvfscanf_r+0xd1e>
fffd6374:	f1b9 0f0a 	cmp.w	r9, #10
fffd6378:	ddd5      	ble.n	fffd6326 <__ssvfscanf_r+0x7ba>
fffd637a:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
fffd637e:	e7c2      	b.n	fffd6306 <__ssvfscanf_r+0x79a>
fffd6380:	0623      	lsls	r3, r4, #24
fffd6382:	d5d0      	bpl.n	fffd6326 <__ssvfscanf_r+0x7ba>
fffd6384:	f024 0480 	bic.w	r4, r4, #128	; 0x80
fffd6388:	e7bd      	b.n	fffd6306 <__ssvfscanf_r+0x79a>
fffd638a:	0523      	lsls	r3, r4, #20
fffd638c:	d5bb      	bpl.n	fffd6306 <__ssvfscanf_r+0x79a>
fffd638e:	f1b9 0f00 	cmp.w	r9, #0
fffd6392:	d103      	bne.n	fffd639c <__ssvfscanf_r+0x830>
fffd6394:	f444 7400 	orr.w	r4, r4, #512	; 0x200
fffd6398:	f04f 0908 	mov.w	r9, #8
fffd639c:	0562      	lsls	r2, r4, #21
fffd639e:	bf48      	it	mi
fffd63a0:	f424 64b0 	bicmi.w	r4, r4, #1408	; 0x580
fffd63a4:	d4af      	bmi.n	fffd6306 <__ssvfscanf_r+0x79a>
fffd63a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd63a8:	f424 7460 	bic.w	r4, r4, #896	; 0x380
fffd63ac:	b113      	cbz	r3, fffd63b4 <__ssvfscanf_r+0x848>
fffd63ae:	3501      	adds	r5, #1
fffd63b0:	3b01      	subs	r3, #1
fffd63b2:	63fb      	str	r3, [r7, #60]	; 0x3c
fffd63b4:	f108 0801 	add.w	r8, r8, #1
fffd63b8:	e7a7      	b.n	fffd630a <__ssvfscanf_r+0x79e>
fffd63ba:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
fffd63be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
fffd63c2:	d1b0      	bne.n	fffd6326 <__ssvfscanf_r+0x7ba>
fffd63c4:	f424 7400 	bic.w	r4, r4, #512	; 0x200
fffd63c8:	f04f 0910 	mov.w	r9, #16
fffd63cc:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
fffd63d0:	e799      	b.n	fffd6306 <__ssvfscanf_r+0x79a>
fffd63d2:	69bb      	ldr	r3, [r7, #24]
fffd63d4:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
fffd63d8:	f1b9 0f08 	cmp.w	r9, #8
fffd63dc:	dccd      	bgt.n	fffd637a <__ssvfscanf_r+0x80e>
fffd63de:	e7a2      	b.n	fffd6326 <__ssvfscanf_r+0x7ba>
fffd63e0:	64b8      	str	r0, [r7, #72]	; 0x48
fffd63e2:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd63e6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
fffd63ea:	f04f 0800 	mov.w	r8, #0
fffd63ee:	2b00      	cmp	r3, #0
fffd63f0:	f73f ace5 	bgt.w	fffd5dbe <__ssvfscanf_r+0x252>
fffd63f4:	4659      	mov	r1, r11
fffd63f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd63f8:	f002 ffa6 	bl	fffd9348 <__ssrefill_r>
fffd63fc:	2800      	cmp	r0, #0
fffd63fe:	f43f acde 	beq.w	fffd5dbe <__ssvfscanf_r+0x252>
fffd6402:	e46a      	b.n	fffd5cda <__ssvfscanf_r+0x16e>
fffd6404:	f648 5395 	movw	r3, #36245	; 0x8d95
fffd6408:	2200      	movs	r2, #0
fffd640a:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd640e:	64b8      	str	r0, [r7, #72]	; 0x48
fffd6410:	63ba      	str	r2, [r7, #56]	; 0x38
fffd6412:	f04f 0803 	mov.w	r8, #3
fffd6416:	62fb      	str	r3, [r7, #44]	; 0x2c
fffd6418:	e4cc      	b.n	fffd5db4 <__ssvfscanf_r+0x248>
fffd641a:	0723      	lsls	r3, r4, #28
fffd641c:	f47f ac66 	bne.w	fffd5cec <__ssvfscanf_r+0x180>
fffd6420:	f898 2001 	ldrb.w	r2, [r8, #1]
fffd6424:	2a68      	cmp	r2, #104	; 0x68
fffd6426:	bf0b      	itete	eq
fffd6428:	f044 0408 	orreq.w	r4, r4, #8
fffd642c:	f044 0404 	orrne.w	r4, r4, #4
fffd6430:	f898 2002 	ldrbeq.w	r2, [r8, #2]
fffd6434:	4680      	movne	r8, r0
fffd6436:	bf08      	it	eq
fffd6438:	f108 0802 	addeq.w	r8, r8, #2
fffd643c:	f7ff bbe4 	b.w	fffd5c08 <__ssvfscanf_r+0x9c>
fffd6440:	64b8      	str	r0, [r7, #72]	; 0x48
fffd6442:	f044 0401 	orr.w	r4, r4, #1
fffd6446:	e7cc      	b.n	fffd63e2 <__ssvfscanf_r+0x876>
fffd6448:	64b8      	str	r0, [r7, #72]	; 0x48
fffd644a:	f04f 0804 	mov.w	r8, #4
fffd644e:	e4b1      	b.n	fffd5db4 <__ssvfscanf_r+0x248>
fffd6450:	f014 0f8f 	tst.w	r4, #143	; 0x8f
fffd6454:	f47f ac4a 	bne.w	fffd5cec <__ssvfscanf_r+0x180>
fffd6458:	fb0c 2505 	mla	r5, r12, r5, r2
fffd645c:	f898 2001 	ldrb.w	r2, [r8, #1]
fffd6460:	4680      	mov	r8, r0
fffd6462:	3d30      	subs	r5, #48	; 0x30
fffd6464:	f7ff bbd0 	b.w	fffd5c08 <__ssvfscanf_r+0x9c>
fffd6468:	4325      	orrs	r5, r4
fffd646a:	f47f ac3f 	bne.w	fffd5cec <__ssvfscanf_r+0x180>
fffd646e:	f898 2001 	ldrb.w	r2, [r8, #1]
fffd6472:	2410      	movs	r4, #16
fffd6474:	4680      	mov	r8, r0
fffd6476:	f7ff bbc7 	b.w	fffd5c08 <__ssvfscanf_r+0x9c>
fffd647a:	4601      	mov	r1, r0
fffd647c:	f107 0068 	add.w	r0, r7, #104	; 0x68
fffd6480:	f001 fbd8 	bl	fffd7c34 <__sccl>
fffd6484:	f044 0440 	orr.w	r4, r4, #64	; 0x40
fffd6488:	f04f 0801 	mov.w	r8, #1
fffd648c:	64b8      	str	r0, [r7, #72]	; 0x48
fffd648e:	e491      	b.n	fffd5db4 <__ssvfscanf_r+0x248>
fffd6490:	f444 7400 	orr.w	r4, r4, #512	; 0x200
fffd6494:	64b8      	str	r0, [r7, #72]	; 0x48
fffd6496:	69fb      	ldr	r3, [r7, #28]
fffd6498:	f04f 0803 	mov.w	r8, #3
fffd649c:	62fb      	str	r3, [r7, #44]	; 0x2c
fffd649e:	2310      	movs	r3, #16
fffd64a0:	63bb      	str	r3, [r7, #56]	; 0x38
fffd64a2:	e487      	b.n	fffd5db4 <__ssvfscanf_r+0x248>
fffd64a4:	64b8      	str	r0, [r7, #72]	; 0x48
fffd64a6:	f044 0401 	orr.w	r4, r4, #1
fffd64aa:	f04f 0802 	mov.w	r8, #2
fffd64ae:	e481      	b.n	fffd5db4 <__ssvfscanf_r+0x248>
fffd64b0:	f044 0401 	orr.w	r4, r4, #1
fffd64b4:	64b8      	str	r0, [r7, #72]	; 0x48
fffd64b6:	69fb      	ldr	r3, [r7, #28]
fffd64b8:	f04f 0803 	mov.w	r8, #3
fffd64bc:	62fb      	str	r3, [r7, #44]	; 0x2c
fffd64be:	2308      	movs	r3, #8
fffd64c0:	63bb      	str	r3, [r7, #56]	; 0x38
fffd64c2:	e477      	b.n	fffd5db4 <__ssvfscanf_r+0x248>
fffd64c4:	f648 5395 	movw	r3, #36245	; 0x8d95
fffd64c8:	220a      	movs	r2, #10
fffd64ca:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd64ce:	64b8      	str	r0, [r7, #72]	; 0x48
fffd64d0:	f044 0401 	orr.w	r4, r4, #1
fffd64d4:	63ba      	str	r2, [r7, #56]	; 0x38
fffd64d6:	62fb      	str	r3, [r7, #44]	; 0x2c
fffd64d8:	f04f 0803 	mov.w	r8, #3
fffd64dc:	e46a      	b.n	fffd5db4 <__ssvfscanf_r+0x248>
fffd64de:	69fb      	ldr	r3, [r7, #28]
fffd64e0:	f04f 0803 	mov.w	r8, #3
fffd64e4:	64b8      	str	r0, [r7, #72]	; 0x48
fffd64e6:	62fb      	str	r3, [r7, #44]	; 0x2c
fffd64e8:	230a      	movs	r3, #10
fffd64ea:	63bb      	str	r3, [r7, #56]	; 0x38
fffd64ec:	e462      	b.n	fffd5db4 <__ssvfscanf_r+0x248>
fffd64ee:	64b8      	str	r0, [r7, #72]	; 0x48
fffd64f0:	f04f 0802 	mov.w	r8, #2
fffd64f4:	e45e      	b.n	fffd5db4 <__ssvfscanf_r+0x248>
fffd64f6:	64b8      	str	r0, [r7, #72]	; 0x48
fffd64f8:	f444 7408 	orr.w	r4, r4, #544	; 0x220
fffd64fc:	e7cb      	b.n	fffd6496 <__ssvfscanf_r+0x92a>
fffd64fe:	64b8      	str	r0, [r7, #72]	; 0x48
fffd6500:	e7d9      	b.n	fffd64b6 <__ssvfscanf_r+0x94a>
fffd6502:	06e3      	lsls	r3, r4, #27
fffd6504:	64b8      	str	r0, [r7, #72]	; 0x48
fffd6506:	f53f ab65 	bmi.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd650a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
fffd650c:	0726      	lsls	r6, r4, #28
fffd650e:	f852 3b04 	ldr.w	r3, [r2], #4
fffd6512:	643a      	str	r2, [r7, #64]	; 0x40
fffd6514:	bf48      	it	mi
fffd6516:	f883 a000 	strbmi.w	r10, [r3]
fffd651a:	f53f ab5b 	bmi.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd651e:	0765      	lsls	r5, r4, #29
fffd6520:	bf48      	it	mi
fffd6522:	f8a3 a000 	strhmi.w	r10, [r3]
fffd6526:	f53f ab55 	bmi.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd652a:	07e0      	lsls	r0, r4, #31
fffd652c:	f100 85c8 	bmi.w	fffd70c0 <__ssvfscanf_r+0x1554>
fffd6530:	07a1      	lsls	r1, r4, #30
fffd6532:	f140 85c5 	bpl.w	fffd70c0 <__ssvfscanf_r+0x1554>
fffd6536:	4650      	mov	r0, r10
fffd6538:	17c1      	asrs	r1, r0, #31
fffd653a:	e9c3 0100 	strd	r0, r1, [r3]
fffd653e:	f7ff bb49 	b.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd6542:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
fffd6546:	f47f abd1 	bne.w	fffd5cec <__ssvfscanf_r+0x180>
fffd654a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd654c:	2a00      	cmp	r2, #0
fffd654e:	f000 840a 	beq.w	fffd6d66 <__ssvfscanf_r+0x11fa>
fffd6552:	f898 2001 	ldrb.w	r2, [r8, #1]
fffd6556:	f044 0480 	orr.w	r4, r4, #128	; 0x80
fffd655a:	4680      	mov	r8, r0
fffd655c:	f7ff bb54 	b.w	fffd5c08 <__ssvfscanf_r+0x9c>
fffd6560:	0722      	lsls	r2, r4, #28
fffd6562:	f47f abc3 	bne.w	fffd5cec <__ssvfscanf_r+0x180>
fffd6566:	f898 2001 	ldrb.w	r2, [r8, #1]
fffd656a:	2a6c      	cmp	r2, #108	; 0x6c
fffd656c:	bf0b      	itete	eq
fffd656e:	f044 0402 	orreq.w	r4, r4, #2
fffd6572:	f044 0401 	orrne.w	r4, r4, #1
fffd6576:	f898 2002 	ldrbeq.w	r2, [r8, #2]
fffd657a:	4680      	movne	r8, r0
fffd657c:	bf08      	it	eq
fffd657e:	f108 0802 	addeq.w	r8, r8, #2
fffd6582:	f7ff bb41 	b.w	fffd5c08 <__ssvfscanf_r+0x9c>
fffd6586:	4659      	mov	r1, r11
fffd6588:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd658a:	f002 fedd 	bl	fffd9348 <__ssrefill_r>
fffd658e:	2800      	cmp	r0, #0
fffd6590:	f43f aec6 	beq.w	fffd6320 <__ssvfscanf_r+0x7b4>
fffd6594:	e6c7      	b.n	fffd6326 <__ssvfscanf_r+0x7ba>
fffd6596:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6598:	f04f 0800 	mov.w	r8, #0
fffd659c:	f000 fe50 	bl	fffd7240 <_localeconv_r>
fffd65a0:	1e6b      	subs	r3, r5, #1
fffd65a2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
fffd65a6:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
fffd65aa:	607e      	str	r6, [r7, #4]
fffd65ac:	bf9c      	itt	ls
fffd65ae:	2300      	movls	r3, #0
fffd65b0:	617b      	strls	r3, [r7, #20]
fffd65b2:	e9c7 8803 	strd	r8, r8, [r7, #12]
fffd65b6:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
fffd65ba:	6802      	ldr	r2, [r0, #0]
fffd65bc:	627a      	str	r2, [r7, #36]	; 0x24
fffd65be:	bf82      	ittt	hi
fffd65c0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
fffd65c4:	18ab      	addhi	r3, r5, r2
fffd65c6:	617b      	strhi	r3, [r7, #20]
fffd65c8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
fffd65cc:	4642      	mov	r2, r8
fffd65ce:	bf88      	it	hi
fffd65d0:	f240 155d 	movwhi	r5, #349	; 0x15d
fffd65d4:	4616      	mov	r6, r2
fffd65d6:	4699      	mov	r9, r3
fffd65d8:	633b      	str	r3, [r7, #48]	; 0x30
fffd65da:	f8db 0000 	ldr.w	r0, [r11]
fffd65de:	7801      	ldrb	r1, [r0, #0]
fffd65e0:	f1a1 0c2b 	sub.w	r12, r1, #43	; 0x2b
fffd65e4:	f1bc 0f4e 	cmp.w	r12, #78	; 0x4e
fffd65e8:	f200 8121 	bhi.w	fffd682e <__ssvfscanf_r+0xcc2>
fffd65ec:	e8df f01c 	tbh	[pc, r12, lsl #1]
fffd65f0:	011f0119 	.word	0x011f0119
fffd65f4:	011f0119 	.word	0x011f0119
fffd65f8:	006f011f 	.word	0x006f011f
fffd65fc:	004f004f 	.word	0x004f004f
fffd6600:	004f004f 	.word	0x004f004f
fffd6604:	004f004f 	.word	0x004f004f
fffd6608:	004f004f 	.word	0x004f004f
fffd660c:	011f004f 	.word	0x011f004f
fffd6610:	011f011f 	.word	0x011f011f
fffd6614:	011f011f 	.word	0x011f011f
fffd6618:	011f011f 	.word	0x011f011f
fffd661c:	011f0106 	.word	0x011f0106
fffd6620:	011f011f 	.word	0x011f011f
fffd6624:	010b00ed 	.word	0x010b00ed
fffd6628:	011f011f 	.word	0x011f011f
fffd662c:	011f009b 	.word	0x011f009b
fffd6630:	011f011f 	.word	0x011f011f
fffd6634:	0081011f 	.word	0x0081011f
fffd6638:	011f011f 	.word	0x011f011f
fffd663c:	011f011f 	.word	0x011f011f
fffd6640:	007b011f 	.word	0x007b011f
fffd6644:	011f011f 	.word	0x011f011f
fffd6648:	011f011f 	.word	0x011f011f
fffd664c:	011f0112 	.word	0x011f0112
fffd6650:	011f011f 	.word	0x011f011f
fffd6654:	011f011f 	.word	0x011f011f
fffd6658:	011f011f 	.word	0x011f011f
fffd665c:	011f0106 	.word	0x011f0106
fffd6660:	011f011f 	.word	0x011f011f
fffd6664:	010b00ed 	.word	0x010b00ed
fffd6668:	011f011f 	.word	0x011f011f
fffd666c:	011f009b 	.word	0x011f009b
fffd6670:	011f011f 	.word	0x011f011f
fffd6674:	0081011f 	.word	0x0081011f
fffd6678:	011f011f 	.word	0x011f011f
fffd667c:	011f011f 	.word	0x011f011f
fffd6680:	007b011f 	.word	0x007b011f
fffd6684:	011f011f 	.word	0x011f011f
fffd6688:	011f011f 	.word	0x011f011f
fffd668c:	0112      	.short	0x0112
fffd668e:	eb12 0f08 	cmn.w	r2, r8
fffd6692:	d115      	bne.n	fffd66c0 <__ssvfscanf_r+0xb54>
fffd6694:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
fffd6698:	f889 1000 	strb.w	r1, [r9]
fffd669c:	f109 0901 	add.w	r9, r9, #1
fffd66a0:	f8db 1004 	ldr.w	r1, [r11, #4]
fffd66a4:	3d01      	subs	r5, #1
fffd66a6:	f10a 0a01 	add.w	r10, r10, #1
fffd66aa:	3901      	subs	r1, #1
fffd66ac:	f8cb 1004 	str.w	r1, [r11, #4]
fffd66b0:	2900      	cmp	r1, #0
fffd66b2:	f340 80c9 	ble.w	fffd6848 <__ssvfscanf_r+0xcdc>
fffd66b6:	3001      	adds	r0, #1
fffd66b8:	f8cb 0000 	str.w	r0, [r11]
fffd66bc:	2d00      	cmp	r5, #0
fffd66be:	d18c      	bne.n	fffd65da <__ssvfscanf_r+0xa6e>
fffd66c0:	4633      	mov	r3, r6
fffd66c2:	4646      	mov	r6, r8
fffd66c4:	2b00      	cmp	r3, #0
fffd66c6:	d03c      	beq.n	fffd6742 <__ssvfscanf_r+0xbd6>
fffd66c8:	f424 7480 	bic.w	r4, r4, #256	; 0x100
fffd66cc:	e039      	b.n	fffd6742 <__ssvfscanf_r+0xbd6>
fffd66ce:	05e3      	lsls	r3, r4, #23
fffd66d0:	d5dd      	bpl.n	fffd668e <__ssvfscanf_r+0xb22>
fffd66d2:	697b      	ldr	r3, [r7, #20]
fffd66d4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
fffd66d8:	3601      	adds	r6, #1
fffd66da:	2b00      	cmp	r3, #0
fffd66dc:	d0e0      	beq.n	fffd66a0 <__ssvfscanf_r+0xb34>
fffd66de:	3b01      	subs	r3, #1
fffd66e0:	3501      	adds	r5, #1
fffd66e2:	617b      	str	r3, [r7, #20]
fffd66e4:	e7dc      	b.n	fffd66a0 <__ssvfscanf_r+0xb34>
fffd66e6:	f1b8 0f06 	cmp.w	r8, #6
fffd66ea:	d1e9      	bne.n	fffd66c0 <__ssvfscanf_r+0xb54>
fffd66ec:	f04f 0807 	mov.w	r8, #7
fffd66f0:	e7d2      	b.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd66f2:	2a00      	cmp	r2, #0
fffd66f4:	bf08      	it	eq
fffd66f6:	2e00      	cmpeq	r6, #0
fffd66f8:	f040 80b3 	bne.w	fffd6862 <__ssvfscanf_r+0xcf6>
fffd66fc:	f404 6ce0 	and.w	r12, r4, #1792	; 0x700
fffd6700:	f5bc 6fe0 	cmp.w	r12, #1792	; 0x700
fffd6704:	bf02      	ittt	eq
fffd6706:	f424 64f0 	biceq.w	r4, r4, #1920	; 0x780
fffd670a:	2201      	moveq	r2, #1
fffd670c:	2600      	moveq	r6, #0
fffd670e:	d0c3      	beq.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd6710:	f1b8 0f04 	cmp.w	r8, #4
fffd6714:	bf18      	it	ne
fffd6716:	f1b8 0f01 	cmpne.w	r8, #1
fffd671a:	d1d1      	bne.n	fffd66c0 <__ssvfscanf_r+0xb54>
fffd671c:	f108 0801 	add.w	r8, r8, #1
fffd6720:	fa5f f888 	uxtb.w	r8, r8
fffd6724:	e7b8      	b.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd6726:	f1b8 0f00 	cmp.w	r8, #0
fffd672a:	bf08      	it	eq
fffd672c:	2e00      	cmpeq	r6, #0
fffd672e:	f040 809e 	bne.w	fffd686e <__ssvfscanf_r+0xd02>
fffd6732:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
fffd6736:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
fffd673a:	f000 8380 	beq.w	fffd6e3e <__ssvfscanf_r+0x12d2>
fffd673e:	687e      	ldr	r6, [r7, #4]
fffd6740:	2300      	movs	r3, #0
fffd6742:	3a01      	subs	r2, #1
fffd6744:	2a01      	cmp	r2, #1
fffd6746:	f240 84dc 	bls.w	fffd7102 <__ssvfscanf_r+0x1596>
fffd674a:	1e72      	subs	r2, r6, #1
fffd674c:	2a06      	cmp	r2, #6
fffd674e:	f240 837c 	bls.w	fffd6e4a <__ssvfscanf_r+0x12de>
fffd6752:	05e0      	lsls	r0, r4, #23
fffd6754:	d513      	bpl.n	fffd677e <__ssvfscanf_r+0xc12>
fffd6756:	0561      	lsls	r1, r4, #21
fffd6758:	f100 84f5 	bmi.w	fffd7146 <__ssvfscanf_r+0x15da>
fffd675c:	f819 1c01 	ldrb.w	r1, [r9, #-1]
fffd6760:	f001 02df 	and.w	r2, r1, #223	; 0xdf
fffd6764:	2a45      	cmp	r2, #69	; 0x45
fffd6766:	f040 82f1 	bne.w	fffd6d4c <__ssvfscanf_r+0x11e0>
fffd676a:	f109 39ff 	add.w	r9, r9, #4294967295
fffd676e:	f10a 3aff 	add.w	r10, r10, #4294967295
fffd6772:	465a      	mov	r2, r11
fffd6774:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6776:	63fb      	str	r3, [r7, #60]	; 0x3c
fffd6778:	f002 fda8 	bl	fffd92cc <_sungetc_r>
fffd677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd677e:	f014 0210 	ands.w	r2, r4, #16
fffd6782:	f47f aa27 	bne.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd6786:	f404 61c0 	and.w	r1, r4, #1536	; 0x600
fffd678a:	f889 2000 	strb.w	r2, [r9]
fffd678e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
fffd6792:	f000 82ca 	beq.w	fffd6d2a <__ssvfscanf_r+0x11be>
fffd6796:	693b      	ldr	r3, [r7, #16]
fffd6798:	2b00      	cmp	r3, #0
fffd679a:	f040 840a 	bne.w	fffd6fb2 <__ssvfscanf_r+0x1446>
fffd679e:	2200      	movs	r2, #0
fffd67a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
fffd67a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd67a4:	6c3e      	ldr	r6, [r7, #64]	; 0x40
fffd67a6:	f002 fa51 	bl	fffd8c4c <_strtod_r>
fffd67aa:	07e2      	lsls	r2, r4, #31
fffd67ac:	f106 0504 	add.w	r5, r6, #4
fffd67b0:	4680      	mov	r8, r0
fffd67b2:	4689      	mov	r9, r1
fffd67b4:	f140 837f 	bpl.w	fffd6eb6 <__ssvfscanf_r+0x134a>
fffd67b8:	6833      	ldr	r3, [r6, #0]
fffd67ba:	e9c3 8900 	strd	r8, r9, [r3]
fffd67be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
fffd67c0:	3301      	adds	r3, #1
fffd67c2:	e9c7 5310 	strd	r5, r3, [r7, #64]	; 0x40
fffd67c6:	f7ff ba05 	b.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd67ca:	f404 6ca0 	and.w	r12, r4, #1280	; 0x500
fffd67ce:	f5bc 6f80 	cmp.w	r12, #1024	; 0x400
fffd67d2:	d005      	beq.n	fffd67e0 <__ssvfscanf_r+0xc74>
fffd67d4:	0563      	lsls	r3, r4, #21
fffd67d6:	f57f af73 	bpl.w	fffd66c0 <__ssvfscanf_r+0xb54>
fffd67da:	2e00      	cmp	r6, #0
fffd67dc:	f000 8485 	beq.w	fffd70ea <__ssvfscanf_r+0x157e>
fffd67e0:	05a3      	lsls	r3, r4, #22
fffd67e2:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
fffd67e6:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
fffd67ea:	bf5c      	itt	pl
fffd67ec:	6abb      	ldrpl	r3, [r7, #40]	; 0x28
fffd67ee:	1af3      	subpl	r3, r6, r3
fffd67f0:	f04f 0600 	mov.w	r6, #0
fffd67f4:	bf58      	it	pl
fffd67f6:	e9c7 9303 	strdpl	r9, r3, [r7, #12]
fffd67fa:	e74d      	b.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd67fc:	2a01      	cmp	r2, #1
fffd67fe:	f47f af5f 	bne.w	fffd66c0 <__ssvfscanf_r+0xb54>
fffd6802:	2202      	movs	r2, #2
fffd6804:	e748      	b.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd6806:	f1b8 0f02 	cmp.w	r8, #2
fffd680a:	f47f af59 	bne.w	fffd66c0 <__ssvfscanf_r+0xb54>
fffd680e:	f04f 0803 	mov.w	r8, #3
fffd6812:	e741      	b.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd6814:	f1b8 0f07 	cmp.w	r8, #7
fffd6818:	f47f af52 	bne.w	fffd66c0 <__ssvfscanf_r+0xb54>
fffd681c:	f04f 0808 	mov.w	r8, #8
fffd6820:	e73a      	b.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd6822:	0623      	lsls	r3, r4, #24
fffd6824:	f57f af4c 	bpl.w	fffd66c0 <__ssvfscanf_r+0xb54>
fffd6828:	f024 0480 	bic.w	r4, r4, #128	; 0x80
fffd682c:	e734      	b.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
fffd6830:	f893 c000 	ldrb.w	r12, [r3]
fffd6834:	458c      	cmp	r12, r1
fffd6836:	f47f af43 	bne.w	fffd66c0 <__ssvfscanf_r+0xb54>
fffd683a:	05a3      	lsls	r3, r4, #22
fffd683c:	f57f af40 	bpl.w	fffd66c0 <__ssvfscanf_r+0xb54>
fffd6840:	f424 7420 	bic.w	r4, r4, #640	; 0x280
fffd6844:	62be      	str	r6, [r7, #40]	; 0x28
fffd6846:	e727      	b.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd6848:	4659      	mov	r1, r11
fffd684a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd684c:	63fa      	str	r2, [r7, #60]	; 0x3c
fffd684e:	f002 fd7b 	bl	fffd9348 <__ssrefill_r>
fffd6852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
fffd6854:	2800      	cmp	r0, #0
fffd6856:	f47f af33 	bne.w	fffd66c0 <__ssvfscanf_r+0xb54>
fffd685a:	2d00      	cmp	r5, #0
fffd685c:	f47f aebd 	bne.w	fffd65da <__ssvfscanf_r+0xa6e>
fffd6860:	e72e      	b.n	fffd66c0 <__ssvfscanf_r+0xb54>
fffd6862:	2a02      	cmp	r2, #2
fffd6864:	bf08      	it	eq
fffd6866:	2203      	moveq	r2, #3
fffd6868:	f43f af16 	beq.w	fffd6698 <__ssvfscanf_r+0xb2c>
fffd686c:	e750      	b.n	fffd6710 <__ssvfscanf_r+0xba4>
fffd686e:	f1a8 0c03 	sub.w	r12, r8, #3
fffd6872:	f01c 0ffd 	tst.w	r12, #253	; 0xfd
fffd6876:	f43f af51 	beq.w	fffd671c <__ssvfscanf_r+0xbb0>
fffd687a:	e721      	b.n	fffd66c0 <__ssvfscanf_r+0xb54>
fffd687c:	f014 0201 	ands.w	r2, r4, #1
fffd6880:	f000 83b8 	beq.w	fffd6ff4 <__ssvfscanf_r+0x1488>
fffd6884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd6886:	681b      	ldr	r3, [r3, #0]
fffd6888:	6018      	str	r0, [r3, #0]
fffd688a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
fffd688c:	3301      	adds	r3, #1
fffd688e:	e9c7 5310 	strd	r5, r3, [r7, #64]	; 0x40
fffd6892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd6894:	1af6      	subs	r6, r6, r3
fffd6896:	44b0      	add	r8, r6
fffd6898:	44c2      	add	r10, r8
fffd689a:	f7ff b99b 	b.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd689e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
fffd68a0:	2a00      	cmp	r2, #0
fffd68a2:	f040 821c 	bne.w	fffd6cde <__ssvfscanf_r+0x1172>
fffd68a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd68a8:	0624      	lsls	r4, r4, #24
fffd68aa:	f853 6b04 	ldr.w	r6, [r3], #4
fffd68ae:	643b      	str	r3, [r7, #64]	; 0x40
fffd68b0:	f140 8309 	bpl.w	fffd6ec6 <__ssvfscanf_r+0x135a>
fffd68b4:	2e00      	cmp	r6, #0
fffd68b6:	f43f aa19 	beq.w	fffd5cec <__ssvfscanf_r+0x180>
fffd68ba:	4628      	mov	r0, r5
fffd68bc:	f000 fcd0 	bl	fffd7260 <malloc>
fffd68c0:	4603      	mov	r3, r0
fffd68c2:	2800      	cmp	r0, #0
fffd68c4:	f000 83f6 	beq.w	fffd70b4 <__ssvfscanf_r+0x1548>
fffd68c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd68ca:	6030      	str	r0, [r6, #0]
fffd68cc:	88d4      	ldrh	r4, [r2, #6]
fffd68ce:	f8b2 9004 	ldrh.w	r9, [r2, #4]
fffd68d2:	f8d2 8000 	ldr.w	r8, [r2]
fffd68d6:	454c      	cmp	r4, r9
fffd68d8:	d315      	bcc.n	fffd6906 <__ssvfscanf_r+0xd9a>
fffd68da:	f64f 72f6 	movw	r2, #65526	; 0xfff6
fffd68de:	4591      	cmp	r9, r2
fffd68e0:	63f8      	str	r0, [r7, #60]	; 0x3c
fffd68e2:	f200 842e 	bhi.w	fffd7142 <__ssvfscanf_r+0x15d6>
fffd68e6:	f109 0908 	add.w	r9, r9, #8
fffd68ea:	4640      	mov	r0, r8
fffd68ec:	ea4f 0189 	mov.w	r1, r9, lsl #2
fffd68f0:	f000 ffd4 	bl	fffd789c <realloc>
fffd68f4:	2800      	cmp	r0, #0
fffd68f6:	f000 8424 	beq.w	fffd7142 <__ssvfscanf_r+0x15d6>
fffd68fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd68fc:	4680      	mov	r8, r0
fffd68fe:	6018      	str	r0, [r3, #0]
fffd6900:	f8a3 9004 	strh.w	r9, [r3, #4]
fffd6904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6906:	4619      	mov	r1, r3
fffd6908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd690a:	f848 6024 	str.w	r6, [r8, r4, lsl #2]
fffd690e:	2201      	movs	r2, #1
fffd6910:	3401      	adds	r4, #1
fffd6912:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6914:	80dc      	strh	r4, [r3, #6]
fffd6916:	462b      	mov	r3, r5
fffd6918:	f8cd b000 	str.w	r11, [sp]
fffd691c:	f002 fd32 	bl	fffd9384 <_sfread_r>
fffd6920:	4604      	mov	r4, r0
fffd6922:	2800      	cmp	r0, #0
fffd6924:	f000 843f 	beq.w	fffd71a6 <__ssvfscanf_r+0x163a>
fffd6928:	4285      	cmp	r5, r0
fffd692a:	d905      	bls.n	fffd6938 <__ssvfscanf_r+0xdcc>
fffd692c:	4601      	mov	r1, r0
fffd692e:	6830      	ldr	r0, [r6, #0]
fffd6930:	f000 ffb4 	bl	fffd789c <realloc>
fffd6934:	b100      	cbz	r0, fffd6938 <__ssvfscanf_r+0xdcc>
fffd6936:	6030      	str	r0, [r6, #0]
fffd6938:	44a2      	add	r10, r4
fffd693a:	f7ff bb42 	b.w	fffd5fc2 <__ssvfscanf_r+0x456>
fffd693e:	2e00      	cmp	r6, #0
fffd6940:	f040 808a 	bne.w	fffd6a58 <__ssvfscanf_r+0xeec>
fffd6944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd6946:	f014 0480 	ands.w	r4, r4, #128	; 0x80
fffd694a:	f853 6b04 	ldr.w	r6, [r3], #4
fffd694e:	643b      	str	r3, [r7, #64]	; 0x40
fffd6950:	f000 82df 	beq.w	fffd6f12 <__ssvfscanf_r+0x13a6>
fffd6954:	2e00      	cmp	r6, #0
fffd6956:	f43f a9c9 	beq.w	fffd5cec <__ssvfscanf_r+0x180>
fffd695a:	2020      	movs	r0, #32
fffd695c:	f000 fc80 	bl	fffd7260 <malloc>
fffd6960:	4603      	mov	r3, r0
fffd6962:	2800      	cmp	r0, #0
fffd6964:	f000 83a6 	beq.w	fffd70b4 <__ssvfscanf_r+0x1548>
fffd6968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd696a:	6030      	str	r0, [r6, #0]
fffd696c:	88d4      	ldrh	r4, [r2, #6]
fffd696e:	f8b2 9004 	ldrh.w	r9, [r2, #4]
fffd6972:	f8d2 8000 	ldr.w	r8, [r2]
fffd6976:	454c      	cmp	r4, r9
fffd6978:	d315      	bcc.n	fffd69a6 <__ssvfscanf_r+0xe3a>
fffd697a:	f64f 72f6 	movw	r2, #65526	; 0xfff6
fffd697e:	4591      	cmp	r9, r2
fffd6980:	63f8      	str	r0, [r7, #60]	; 0x3c
fffd6982:	f200 83de 	bhi.w	fffd7142 <__ssvfscanf_r+0x15d6>
fffd6986:	f109 0908 	add.w	r9, r9, #8
fffd698a:	4640      	mov	r0, r8
fffd698c:	ea4f 0189 	mov.w	r1, r9, lsl #2
fffd6990:	f000 ff84 	bl	fffd789c <realloc>
fffd6994:	2800      	cmp	r0, #0
fffd6996:	f000 83d4 	beq.w	fffd7142 <__ssvfscanf_r+0x15d6>
fffd699a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd699c:	4680      	mov	r8, r0
fffd699e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd69a0:	6010      	str	r0, [r2, #0]
fffd69a2:	f8a2 9004 	strh.w	r9, [r2, #4]
fffd69a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd69a8:	f848 6024 	str.w	r6, [r8, r4, lsl #2]
fffd69ac:	f04f 0820 	mov.w	r8, #32
fffd69b0:	3401      	adds	r4, #1
fffd69b2:	633e      	str	r6, [r7, #48]	; 0x30
fffd69b4:	80d4      	strh	r4, [r2, #6]
fffd69b6:	461e      	mov	r6, r3
fffd69b8:	2301      	movs	r3, #1
fffd69ba:	63fb      	str	r3, [r7, #60]	; 0x3c
fffd69bc:	4634      	mov	r4, r6
fffd69be:	f000 fc2d 	bl	fffd721c <__locale_ctype_ptr>
fffd69c2:	f8db 1000 	ldr.w	r1, [r11]
fffd69c6:	f106 0901 	add.w	r9, r6, #1
fffd69ca:	f101 0c01 	add.w	r12, r1, #1
fffd69ce:	eba9 0204 	sub.w	r2, r9, r4
fffd69d2:	780b      	ldrb	r3, [r1, #0]
fffd69d4:	4418      	add	r0, r3
fffd69d6:	7843      	ldrb	r3, [r0, #1]
fffd69d8:	0718      	lsls	r0, r3, #28
fffd69da:	d41f      	bmi.n	fffd6a1c <__ssvfscanf_r+0xeb0>
fffd69dc:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd69e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
fffd69e2:	f8cb c000 	str.w	r12, [r11]
fffd69e6:	3b01      	subs	r3, #1
fffd69e8:	f8cb 3004 	str.w	r3, [r11, #4]
fffd69ec:	4542      	cmp	r2, r8
fffd69ee:	bf34      	ite	cc
fffd69f0:	2000      	movcc	r0, #0
fffd69f2:	f000 0001 	andcs.w	r0, r0, #1
fffd69f6:	780b      	ldrb	r3, [r1, #0]
fffd69f8:	7033      	strb	r3, [r6, #0]
fffd69fa:	2800      	cmp	r0, #0
fffd69fc:	f040 8278 	bne.w	fffd6ef0 <__ssvfscanf_r+0x1384>
fffd6a00:	3d01      	subs	r5, #1
fffd6a02:	464e      	mov	r6, r9
fffd6a04:	d009      	beq.n	fffd6a1a <__ssvfscanf_r+0xeae>
fffd6a06:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd6a0a:	2b00      	cmp	r3, #0
fffd6a0c:	dcd7      	bgt.n	fffd69be <__ssvfscanf_r+0xe52>
fffd6a0e:	4659      	mov	r1, r11
fffd6a10:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6a12:	f002 fc99 	bl	fffd9348 <__ssrefill_r>
fffd6a16:	2800      	cmp	r0, #0
fffd6a18:	d0d1      	beq.n	fffd69be <__ssvfscanf_r+0xe52>
fffd6a1a:	464e      	mov	r6, r9
fffd6a1c:	2300      	movs	r3, #0
fffd6a1e:	1b34      	subs	r4, r6, r4
fffd6a20:	7033      	strb	r3, [r6, #0]
fffd6a22:	1c61      	adds	r1, r4, #1
fffd6a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6a26:	4588      	cmp	r8, r1
fffd6a28:	bf94      	ite	ls
fffd6a2a:	2300      	movls	r3, #0
fffd6a2c:	f003 0301 	andhi.w	r3, r3, #1
fffd6a30:	2b00      	cmp	r3, #0
fffd6a32:	d081      	beq.n	fffd6938 <__ssvfscanf_r+0xdcc>
fffd6a34:	6b3d      	ldr	r5, [r7, #48]	; 0x30
fffd6a36:	6828      	ldr	r0, [r5, #0]
fffd6a38:	f000 ff30 	bl	fffd789c <realloc>
fffd6a3c:	2800      	cmp	r0, #0
fffd6a3e:	f43f af7b 	beq.w	fffd6938 <__ssvfscanf_r+0xdcc>
fffd6a42:	6028      	str	r0, [r5, #0]
fffd6a44:	44a2      	add	r10, r4
fffd6a46:	f7ff babc 	b.w	fffd5fc2 <__ssvfscanf_r+0x456>
fffd6a4a:	4659      	mov	r1, r11
fffd6a4c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6a4e:	f002 fc7b 	bl	fffd9348 <__ssrefill_r>
fffd6a52:	2800      	cmp	r0, #0
fffd6a54:	f47f af20 	bne.w	fffd6898 <__ssvfscanf_r+0xd2c>
fffd6a58:	f000 fbe0 	bl	fffd721c <__locale_ctype_ptr>
fffd6a5c:	f8db 3000 	ldr.w	r3, [r11]
fffd6a60:	1c5a      	adds	r2, r3, #1
fffd6a62:	781b      	ldrb	r3, [r3, #0]
fffd6a64:	4418      	add	r0, r3
fffd6a66:	7843      	ldrb	r3, [r0, #1]
fffd6a68:	071c      	lsls	r4, r3, #28
fffd6a6a:	f53f af15 	bmi.w	fffd6898 <__ssvfscanf_r+0xd2c>
fffd6a6e:	f108 0801 	add.w	r8, r8, #1
fffd6a72:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd6a76:	4545      	cmp	r5, r8
fffd6a78:	f8cb 2000 	str.w	r2, [r11]
fffd6a7c:	f103 33ff 	add.w	r3, r3, #4294967295
fffd6a80:	f8cb 3004 	str.w	r3, [r11, #4]
fffd6a84:	f43f af08 	beq.w	fffd6898 <__ssvfscanf_r+0xd2c>
fffd6a88:	2b00      	cmp	r3, #0
fffd6a8a:	dce5      	bgt.n	fffd6a58 <__ssvfscanf_r+0xeec>
fffd6a8c:	e7dd      	b.n	fffd6a4a <__ssvfscanf_r+0xede>
fffd6a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
fffd6a90:	2b00      	cmp	r3, #0
fffd6a92:	f040 80e7 	bne.w	fffd6c64 <__ssvfscanf_r+0x10f8>
fffd6a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd6a98:	f014 0480 	ands.w	r4, r4, #128	; 0x80
fffd6a9c:	f853 6b04 	ldr.w	r6, [r3], #4
fffd6aa0:	643b      	str	r3, [r7, #64]	; 0x40
fffd6aa2:	f000 8267 	beq.w	fffd6f74 <__ssvfscanf_r+0x1408>
fffd6aa6:	2e00      	cmp	r6, #0
fffd6aa8:	f43f a920 	beq.w	fffd5cec <__ssvfscanf_r+0x180>
fffd6aac:	2020      	movs	r0, #32
fffd6aae:	f000 fbd7 	bl	fffd7260 <malloc>
fffd6ab2:	4681      	mov	r9, r0
fffd6ab4:	2800      	cmp	r0, #0
fffd6ab6:	f000 82fd 	beq.w	fffd70b4 <__ssvfscanf_r+0x1548>
fffd6aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd6abc:	6030      	str	r0, [r6, #0]
fffd6abe:	88d4      	ldrh	r4, [r2, #6]
fffd6ac0:	8893      	ldrh	r3, [r2, #4]
fffd6ac2:	429c      	cmp	r4, r3
fffd6ac4:	d313      	bcc.n	fffd6aee <__ssvfscanf_r+0xf82>
fffd6ac6:	f8d2 8000 	ldr.w	r8, [r2]
fffd6aca:	f64f 72f6 	movw	r2, #65526	; 0xfff6
fffd6ace:	4293      	cmp	r3, r2
fffd6ad0:	f200 8337 	bhi.w	fffd7142 <__ssvfscanf_r+0x15d6>
fffd6ad4:	3308      	adds	r3, #8
fffd6ad6:	4640      	mov	r0, r8
fffd6ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
fffd6ada:	0099      	lsls	r1, r3, #2
fffd6adc:	f000 fede 	bl	fffd789c <realloc>
fffd6ae0:	2800      	cmp	r0, #0
fffd6ae2:	f000 832e 	beq.w	fffd7142 <__ssvfscanf_r+0x15d6>
fffd6ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
fffd6ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6aea:	6010      	str	r0, [r2, #0]
fffd6aec:	8093      	strh	r3, [r2, #4]
fffd6aee:	6b79      	ldr	r1, [r7, #52]	; 0x34
fffd6af0:	1c62      	adds	r2, r4, #1
fffd6af2:	680b      	ldr	r3, [r1, #0]
fffd6af4:	80ca      	strh	r2, [r1, #6]
fffd6af6:	4632      	mov	r2, r6
fffd6af8:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
fffd6afc:	2420      	movs	r4, #32
fffd6afe:	464e      	mov	r6, r9
fffd6b00:	f8c7 a024 	str.w	r10, [r7, #36]	; 0x24
fffd6b04:	46a2      	mov	r10, r4
fffd6b06:	4634      	mov	r4, r6
fffd6b08:	f107 0368 	add.w	r3, r7, #104	; 0x68
fffd6b0c:	63fd      	str	r5, [r7, #60]	; 0x3c
fffd6b0e:	633b      	str	r3, [r7, #48]	; 0x30
fffd6b10:	f8db 3000 	ldr.w	r3, [r11]
fffd6b14:	f106 0801 	add.w	r8, r6, #1
fffd6b18:	6b3d      	ldr	r5, [r7, #48]	; 0x30
fffd6b1a:	eba8 0904 	sub.w	r9, r8, r4
fffd6b1e:	45d1      	cmp	r9, r10
fffd6b20:	f103 0e01 	add.w	lr, r3, #1
fffd6b24:	7818      	ldrb	r0, [r3, #0]
fffd6b26:	bf34      	ite	cc
fffd6b28:	2100      	movcc	r1, #0
fffd6b2a:	2101      	movcs	r1, #1
fffd6b2c:	2a00      	cmp	r2, #0
fffd6b2e:	bf08      	it	eq
fffd6b30:	2100      	moveq	r1, #0
fffd6b32:	5c28      	ldrb	r0, [r5, r0]
fffd6b34:	2800      	cmp	r0, #0
fffd6b36:	f000 81a7 	beq.w	fffd6e88 <__ssvfscanf_r+0x131c>
fffd6b3a:	f8db 0004 	ldr.w	r0, [r11, #4]
fffd6b3e:	f8cb e000 	str.w	lr, [r11]
fffd6b42:	3801      	subs	r0, #1
fffd6b44:	f8cb 0004 	str.w	r0, [r11, #4]
fffd6b48:	7818      	ldrb	r0, [r3, #0]
fffd6b4a:	7030      	strb	r0, [r6, #0]
fffd6b4c:	2900      	cmp	r1, #0
fffd6b4e:	f040 813d 	bne.w	fffd6dcc <__ssvfscanf_r+0x1260>
fffd6b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6b54:	4646      	mov	r6, r8
fffd6b56:	3b01      	subs	r3, #1
fffd6b58:	63fb      	str	r3, [r7, #60]	; 0x3c
fffd6b5a:	f000 8195 	beq.w	fffd6e88 <__ssvfscanf_r+0x131c>
fffd6b5e:	f8db 1004 	ldr.w	r1, [r11, #4]
fffd6b62:	2900      	cmp	r1, #0
fffd6b64:	dcd4      	bgt.n	fffd6b10 <__ssvfscanf_r+0xfa4>
fffd6b66:	4659      	mov	r1, r11
fffd6b68:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6b6a:	62ba      	str	r2, [r7, #40]	; 0x28
fffd6b6c:	f002 fbec 	bl	fffd9348 <__ssrefill_r>
fffd6b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
fffd6b72:	2800      	cmp	r0, #0
fffd6b74:	d0cc      	beq.n	fffd6b10 <__ssvfscanf_r+0xfa4>
fffd6b76:	46a1      	mov	r9, r4
fffd6b78:	45c8      	cmp	r8, r9
fffd6b7a:	4654      	mov	r4, r10
fffd6b7c:	f8d7 a024 	ldr.w	r10, [r7, #36]	; 0x24
fffd6b80:	f040 8186 	bne.w	fffd6e90 <__ssvfscanf_r+0x1324>
fffd6b84:	f7ff b8a9 	b.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd6b88:	4659      	mov	r1, r11
fffd6b8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6b8c:	f002 fbdc 	bl	fffd9348 <__ssrefill_r>
fffd6b90:	2800      	cmp	r0, #0
fffd6b92:	f43f a8e3 	beq.w	fffd5d5c <__ssvfscanf_r+0x1f0>
fffd6b96:	f7ff b8a0 	b.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd6b9a:	4659      	mov	r1, r11
fffd6b9c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6b9e:	f002 fbd3 	bl	fffd9348 <__ssrefill_r>
fffd6ba2:	2800      	cmp	r0, #0
fffd6ba4:	f43f aab1 	beq.w	fffd610a <__ssvfscanf_r+0x59e>
fffd6ba8:	f8c7 a000 	str.w	r10, [r7]
fffd6bac:	f8d7 a030 	ldr.w	r10, [r7, #48]	; 0x30
fffd6bb0:	2c00      	cmp	r4, #0
fffd6bb2:	f43f aab0 	beq.w	fffd6116 <__ssvfscanf_r+0x5aa>
fffd6bb6:	f7ff b890 	b.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd6bba:	f000 fb1b 	bl	fffd71f4 <__locale_mb_cur_max>
fffd6bbe:	42a0      	cmp	r0, r4
fffd6bc0:	f43f a88b 	beq.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd6bc4:	f8db 3000 	ldr.w	r3, [r11]
fffd6bc8:	1c62      	adds	r2, r4, #1
fffd6bca:	63fa      	str	r2, [r7, #60]	; 0x3c
fffd6bcc:	f8db 2004 	ldr.w	r2, [r11, #4]
fffd6bd0:	f813 1b01 	ldrb.w	r1, [r3], #1
fffd6bd4:	3a01      	subs	r2, #1
fffd6bd6:	f8cb 2004 	str.w	r2, [r11, #4]
fffd6bda:	f507 72b4 	add.w	r2, r7, #360	; 0x168
fffd6bde:	f8cb 3000 	str.w	r3, [r11]
fffd6be2:	683b      	ldr	r3, [r7, #0]
fffd6be4:	5511      	strb	r1, [r2, r4]
fffd6be6:	f107 0460 	add.w	r4, r7, #96	; 0x60
fffd6bea:	2b03      	cmp	r3, #3
fffd6bec:	d102      	bne.n	fffd6bf4 <__ssvfscanf_r+0x1088>
fffd6bee:	6823      	ldr	r3, [r4, #0]
fffd6bf0:	2b04      	cmp	r3, #4
fffd6bf2:	d004      	beq.n	fffd6bfe <__ssvfscanf_r+0x1092>
fffd6bf4:	2208      	movs	r2, #8
fffd6bf6:	2100      	movs	r1, #0
fffd6bf8:	4620      	mov	r0, r4
fffd6bfa:	f7fe ff3b 	bl	fffd5a74 <memset>
fffd6bfe:	f507 72b4 	add.w	r2, r7, #360	; 0x168
fffd6c02:	9400      	str	r4, [sp, #0]
fffd6c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6c06:	4641      	mov	r1, r8
fffd6c08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6c0a:	f000 fdf9 	bl	fffd7800 <_mbrtowc_r>
fffd6c0e:	1c42      	adds	r2, r0, #1
fffd6c10:	6038      	str	r0, [r7, #0]
fffd6c12:	f43f a862 	beq.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd6c16:	2800      	cmp	r0, #0
fffd6c18:	f040 81bf 	bne.w	fffd6f9a <__ssvfscanf_r+0x142e>
fffd6c1c:	f8c8 0000 	str.w	r0, [r8]
fffd6c20:	f000 fada 	bl	fffd71d8 <iswspace>
fffd6c24:	2800      	cmp	r0, #0
fffd6c26:	f040 81cf 	bne.w	fffd6fc8 <__ssvfscanf_r+0x145c>
fffd6c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6c2c:	449a      	add	r10, r3
fffd6c2e:	3d01      	subs	r5, #1
fffd6c30:	2e00      	cmp	r6, #0
fffd6c32:	f040 8249 	bne.w	fffd70c8 <__ssvfscanf_r+0x155c>
fffd6c36:	f108 0804 	add.w	r8, r8, #4
fffd6c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
fffd6c3c:	eba8 0409 	sub.w	r4, r8, r9
fffd6c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
fffd6c42:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
fffd6c46:	bf94      	ite	ls
fffd6c48:	2301      	movls	r3, #1
fffd6c4a:	2300      	movhi	r3, #0
fffd6c4c:	2a00      	cmp	r2, #0
fffd6c4e:	bf08      	it	eq
fffd6c50:	2300      	moveq	r3, #0
fffd6c52:	2b00      	cmp	r3, #0
fffd6c54:	f040 8264 	bne.w	fffd7120 <__ssvfscanf_r+0x15b4>
fffd6c58:	63fe      	str	r6, [r7, #60]	; 0x3c
fffd6c5a:	e1a2      	b.n	fffd6fa2 <__ssvfscanf_r+0x1436>
fffd6c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd6c5e:	681b      	ldr	r3, [r3, #0]
fffd6c60:	7018      	strb	r0, [r3, #0]
fffd6c62:	e612      	b.n	fffd688a <__ssvfscanf_r+0xd1e>
fffd6c64:	f8db 1000 	ldr.w	r1, [r11]
fffd6c68:	f107 0368 	add.w	r3, r7, #104	; 0x68
fffd6c6c:	633b      	str	r3, [r7, #48]	; 0x30
fffd6c6e:	780b      	ldrb	r3, [r1, #0]
fffd6c70:	3101      	adds	r1, #1
fffd6c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
fffd6c74:	5cd3      	ldrb	r3, [r2, r3]
fffd6c76:	2b00      	cmp	r3, #0
fffd6c78:	f000 8134 	beq.w	fffd6ee4 <__ssvfscanf_r+0x1378>
fffd6c7c:	3601      	adds	r6, #1
fffd6c7e:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd6c82:	42b5      	cmp	r5, r6
fffd6c84:	f8cb 1000 	str.w	r1, [r11]
fffd6c88:	f103 33ff 	add.w	r3, r3, #4294967295
fffd6c8c:	f8cb 3004 	str.w	r3, [r11, #4]
fffd6c90:	f000 812b 	beq.w	fffd6eea <__ssvfscanf_r+0x137e>
fffd6c94:	2b00      	cmp	r3, #0
fffd6c96:	dcea      	bgt.n	fffd6c6e <__ssvfscanf_r+0x1102>
fffd6c98:	4659      	mov	r1, r11
fffd6c9a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6c9c:	f002 fb54 	bl	fffd9348 <__ssrefill_r>
fffd6ca0:	2800      	cmp	r0, #0
fffd6ca2:	f040 8122 	bne.w	fffd6eea <__ssvfscanf_r+0x137e>
fffd6ca6:	f8db 1000 	ldr.w	r1, [r11]
fffd6caa:	e7e0      	b.n	fffd6c6e <__ssvfscanf_r+0x1102>
fffd6cac:	f107 0254 	add.w	r2, r7, #84	; 0x54
fffd6cb0:	2300      	movs	r3, #0
fffd6cb2:	4699      	mov	r9, r3
fffd6cb4:	62bb      	str	r3, [r7, #40]	; 0x28
fffd6cb6:	4690      	mov	r8, r2
fffd6cb8:	633b      	str	r3, [r7, #48]	; 0x30
fffd6cba:	f7ff b961 	b.w	fffd5f80 <__ssvfscanf_r+0x414>
fffd6cbe:	2300      	movs	r3, #0
fffd6cc0:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
fffd6cc4:	617b      	str	r3, [r7, #20]
fffd6cc6:	4698      	mov	r8, r3
fffd6cc8:	f7ff b9c3 	b.w	fffd6052 <__ssvfscanf_r+0x4e6>
fffd6ccc:	f107 0254 	add.w	r2, r7, #84	; 0x54
fffd6cd0:	2300      	movs	r3, #0
fffd6cd2:	60fb      	str	r3, [r7, #12]
fffd6cd4:	4691      	mov	r9, r2
fffd6cd6:	617b      	str	r3, [r7, #20]
fffd6cd8:	607b      	str	r3, [r7, #4]
fffd6cda:	f7ff ba76 	b.w	fffd61ca <__ssvfscanf_r+0x65e>
fffd6cde:	461c      	mov	r4, r3
fffd6ce0:	f8d7 804c 	ldr.w	r8, [r7, #76]	; 0x4c
fffd6ce4:	e008      	b.n	fffd6cf8 <__ssvfscanf_r+0x118c>
fffd6ce6:	f8cb 6000 	str.w	r6, [r11]
fffd6cea:	441c      	add	r4, r3
fffd6cec:	1aed      	subs	r5, r5, r3
fffd6cee:	f002 fb2b 	bl	fffd9348 <__ssrefill_r>
fffd6cf2:	2800      	cmp	r0, #0
fffd6cf4:	f040 81b8 	bne.w	fffd7068 <__ssvfscanf_r+0x14fc>
fffd6cf8:	e9db 2300 	ldrd	r2, r3, [r11]
fffd6cfc:	4659      	mov	r1, r11
fffd6cfe:	4640      	mov	r0, r8
fffd6d00:	429d      	cmp	r5, r3
fffd6d02:	eb02 0603 	add.w	r6, r2, r3
fffd6d06:	dcee      	bgt.n	fffd6ce6 <__ssvfscanf_r+0x117a>
fffd6d08:	442c      	add	r4, r5
fffd6d0a:	1b5b      	subs	r3, r3, r5
fffd6d0c:	442a      	add	r2, r5
fffd6d0e:	44a2      	add	r10, r4
fffd6d10:	e9cb 2300 	strd	r2, r3, [r11]
fffd6d14:	f7fe bf5e 	b.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd6d18:	f816 1c01 	ldrb.w	r1, [r6, #-1]
fffd6d1c:	465a      	mov	r2, r11
fffd6d1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6d20:	3e01      	subs	r6, #1
fffd6d22:	f002 fad3 	bl	fffd92cc <_sungetc_r>
fffd6d26:	f7ff bb06 	b.w	fffd6336 <__ssvfscanf_r+0x7ca>
fffd6d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
fffd6d2c:	1a9b      	subs	r3, r3, r2
fffd6d2e:	425a      	negs	r2, r3
fffd6d30:	2b00      	cmp	r3, #0
fffd6d32:	f43f ad34 	beq.w	fffd679e <__ssvfscanf_r+0xc32>
fffd6d36:	f207 23bb 	addw	r3, r7, #699	; 0x2bb
fffd6d3a:	68b9      	ldr	r1, [r7, #8]
fffd6d3c:	4599      	cmp	r9, r3
fffd6d3e:	bf28      	it	cs
fffd6d40:	f207 29ba 	addwcs	r9, r7, #698	; 0x2ba
fffd6d44:	4648      	mov	r0, r9
fffd6d46:	f7fd ec5c 	blx	fffd4600 <sprintf>
fffd6d4a:	e528      	b.n	fffd679e <__ssvfscanf_r+0xc32>
fffd6d4c:	465a      	mov	r2, r11
fffd6d4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6d50:	63fb      	str	r3, [r7, #60]	; 0x3c
fffd6d52:	f1aa 0a02 	sub.w	r10, r10, #2
fffd6d56:	f002 fab9 	bl	fffd92cc <_sungetc_r>
fffd6d5a:	f1a9 0902 	sub.w	r9, r9, #2
fffd6d5e:	f899 1000 	ldrb.w	r1, [r9]
fffd6d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6d64:	e505      	b.n	fffd6772 <__ssvfscanf_r+0xc06>
fffd6d66:	b084      	sub	sp, #16
fffd6d68:	aa02      	add	r2, sp, #8
fffd6d6a:	637a      	str	r2, [r7, #52]	; 0x34
fffd6d6c:	6013      	str	r3, [r2, #0]
fffd6d6e:	9303      	str	r3, [sp, #12]
fffd6d70:	f7ff bbef 	b.w	fffd6552 <__ssvfscanf_r+0x9e6>
fffd6d74:	f110 0f02 	cmn.w	r0, #2
fffd6d78:	bf08      	it	eq
fffd6d7a:	4634      	moveq	r4, r6
fffd6d7c:	f43f a9c0 	beq.w	fffd6100 <__ssvfscanf_r+0x594>
fffd6d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd6d82:	2803      	cmp	r0, #3
fffd6d84:	4433      	add	r3, r6
fffd6d86:	633b      	str	r3, [r7, #48]	; 0x30
fffd6d88:	f47f a9a2 	bne.w	fffd60d0 <__ssvfscanf_r+0x564>
fffd6d8c:	6822      	ldr	r2, [r4, #0]
fffd6d8e:	2a04      	cmp	r2, #4
fffd6d90:	f47f a99e 	bne.w	fffd60d0 <__ssvfscanf_r+0x564>
fffd6d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6d96:	2b00      	cmp	r3, #0
fffd6d98:	f43f a99f 	beq.w	fffd60da <__ssvfscanf_r+0x56e>
fffd6d9c:	2400      	movs	r4, #0
fffd6d9e:	f7ff b9af 	b.w	fffd6100 <__ssvfscanf_r+0x594>
fffd6da2:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd6da6:	2400      	movs	r4, #0
fffd6da8:	2b00      	cmp	r3, #0
fffd6daa:	f73f aa68 	bgt.w	fffd627e <__ssvfscanf_r+0x712>
fffd6dae:	4659      	mov	r1, r11
fffd6db0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6db2:	f002 fac9 	bl	fffd9348 <__ssrefill_r>
fffd6db6:	2800      	cmp	r0, #0
fffd6db8:	f43f aa61 	beq.w	fffd627e <__ssvfscanf_r+0x712>
fffd6dbc:	f8d7 a030 	ldr.w	r10, [r7, #48]	; 0x30
fffd6dc0:	603d      	str	r5, [r7, #0]
fffd6dc2:	2c00      	cmp	r4, #0
fffd6dc4:	f000 80ac 	beq.w	fffd6f20 <__ssvfscanf_r+0x13b4>
fffd6dc8:	f7fe bf87 	b.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd6dcc:	ea4f 0a4a 	mov.w	r10, r10, lsl #1
fffd6dd0:	4620      	mov	r0, r4
fffd6dd2:	62ba      	str	r2, [r7, #40]	; 0x28
fffd6dd4:	4651      	mov	r1, r10
fffd6dd6:	f000 fd61 	bl	fffd789c <realloc>
fffd6dda:	4604      	mov	r4, r0
fffd6ddc:	eb00 0809 	add.w	r8, r0, r9
fffd6de0:	2800      	cmp	r0, #0
fffd6de2:	f000 8167 	beq.w	fffd70b4 <__ssvfscanf_r+0x1548>
fffd6de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
fffd6de8:	6010      	str	r0, [r2, #0]
fffd6dea:	e6b2      	b.n	fffd6b52 <__ssvfscanf_r+0xfe6>
fffd6dec:	6833      	ldr	r3, [r6, #0]
fffd6dee:	2b04      	cmp	r3, #4
fffd6df0:	f47f aa26 	bne.w	fffd6240 <__ssvfscanf_r+0x6d4>
fffd6df4:	f7ff ba27 	b.w	fffd6246 <__ssvfscanf_r+0x6da>
fffd6df8:	e9d7 6009 	ldrd	r6, r0, [r7, #36]	; 0x24
fffd6dfc:	00f1      	lsls	r1, r6, #3
fffd6dfe:	f000 fd4d 	bl	fffd789c <realloc>
fffd6e02:	62b8      	str	r0, [r7, #40]	; 0x28
fffd6e04:	2800      	cmp	r0, #0
fffd6e06:	f000 8162 	beq.w	fffd70ce <__ssvfscanf_r+0x1562>
fffd6e0a:	0072      	lsls	r2, r6, #1
fffd6e0c:	627a      	str	r2, [r7, #36]	; 0x24
fffd6e0e:	697a      	ldr	r2, [r7, #20]
fffd6e10:	eb00 0804 	add.w	r8, r0, r4
fffd6e14:	6010      	str	r0, [r2, #0]
fffd6e16:	f7ff b970 	b.w	fffd60fa <__ssvfscanf_r+0x58e>
fffd6e1a:	68fe      	ldr	r6, [r7, #12]
fffd6e1c:	6978      	ldr	r0, [r7, #20]
fffd6e1e:	00f1      	lsls	r1, r6, #3
fffd6e20:	f000 fd3c 	bl	fffd789c <realloc>
fffd6e24:	6178      	str	r0, [r7, #20]
fffd6e26:	2800      	cmp	r0, #0
fffd6e28:	f000 8151 	beq.w	fffd70ce <__ssvfscanf_r+0x1562>
fffd6e2c:	687a      	ldr	r2, [r7, #4]
fffd6e2e:	eb00 0904 	add.w	r9, r0, r4
fffd6e32:	0073      	lsls	r3, r6, #1
fffd6e34:	6abc      	ldr	r4, [r7, #40]	; 0x28
fffd6e36:	60fb      	str	r3, [r7, #12]
fffd6e38:	6010      	str	r0, [r2, #0]
fffd6e3a:	f7ff ba1b 	b.w	fffd6274 <__ssvfscanf_r+0x708>
fffd6e3e:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
fffd6e42:	f04f 0801 	mov.w	r8, #1
fffd6e46:	2600      	movs	r6, #0
fffd6e48:	e426      	b.n	fffd6698 <__ssvfscanf_r+0xb2c>
fffd6e4a:	2e02      	cmp	r6, #2
fffd6e4c:	f240 8191 	bls.w	fffd7172 <__ssvfscanf_r+0x1606>
fffd6e50:	2e03      	cmp	r6, #3
fffd6e52:	f43f ac7e 	beq.w	fffd6752 <__ssvfscanf_r+0xbe6>
fffd6e56:	1f35      	subs	r5, r6, #4
fffd6e58:	f8d7 804c 	ldr.w	r8, [r7, #76]	; 0x4c
fffd6e5c:	63fc      	str	r4, [r7, #60]	; 0x3c
fffd6e5e:	464c      	mov	r4, r9
fffd6e60:	b2ed      	uxtb	r5, r5
fffd6e62:	43ee      	mvns	r6, r5
fffd6e64:	444e      	add	r6, r9
fffd6e66:	4699      	mov	r9, r3
fffd6e68:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
fffd6e6c:	465a      	mov	r2, r11
fffd6e6e:	4640      	mov	r0, r8
fffd6e70:	f002 fa2c 	bl	fffd92cc <_sungetc_r>
fffd6e74:	42a6      	cmp	r6, r4
fffd6e76:	d1f7      	bne.n	fffd6e68 <__ssvfscanf_r+0x12fc>
fffd6e78:	f10a 3aff 	add.w	r10, r10, #4294967295
fffd6e7c:	464b      	mov	r3, r9
fffd6e7e:	ebaa 0a05 	sub.w	r10, r10, r5
fffd6e82:	46a1      	mov	r9, r4
fffd6e84:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
fffd6e86:	e464      	b.n	fffd6752 <__ssvfscanf_r+0xbe6>
fffd6e88:	46a1      	mov	r9, r4
fffd6e8a:	4654      	mov	r4, r10
fffd6e8c:	f8d7 a024 	ldr.w	r10, [r7, #36]	; 0x24
fffd6e90:	ebb6 0909 	subs.w	r9, r6, r9
fffd6e94:	f43e af2a 	beq.w	fffd5cec <__ssvfscanf_r+0x180>
fffd6e98:	f109 0101 	add.w	r1, r9, #1
fffd6e9c:	2300      	movs	r3, #0
fffd6e9e:	429a      	cmp	r2, r3
fffd6ea0:	bf18      	it	ne
fffd6ea2:	428c      	cmpne	r4, r1
fffd6ea4:	7033      	strb	r3, [r6, #0]
fffd6ea6:	f200 80d5 	bhi.w	fffd7054 <__ssvfscanf_r+0x14e8>
fffd6eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
fffd6eac:	44ca      	add	r10, r9
fffd6eae:	3301      	adds	r3, #1
fffd6eb0:	647b      	str	r3, [r7, #68]	; 0x44
fffd6eb2:	f7fe be8f 	b.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd6eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd6eb8:	f014 0402 	ands.w	r4, r4, #2
fffd6ebc:	681e      	ldr	r6, [r3, #0]
fffd6ebe:	d04c      	beq.n	fffd6f5a <__ssvfscanf_r+0x13ee>
fffd6ec0:	e9c6 8900 	strd	r8, r9, [r6]
fffd6ec4:	e47b      	b.n	fffd67be <__ssvfscanf_r+0xc52>
fffd6ec6:	f8cd b000 	str.w	r11, [sp]
fffd6eca:	462b      	mov	r3, r5
fffd6ecc:	4631      	mov	r1, r6
fffd6ece:	2201      	movs	r2, #1
fffd6ed0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6ed2:	f002 fa57 	bl	fffd9384 <_sfread_r>
fffd6ed6:	4604      	mov	r4, r0
fffd6ed8:	2800      	cmp	r0, #0
fffd6eda:	f43e aefe 	beq.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd6ede:	44a2      	add	r10, r4
fffd6ee0:	f7ff b86f 	b.w	fffd5fc2 <__ssvfscanf_r+0x456>
fffd6ee4:	2e00      	cmp	r6, #0
fffd6ee6:	f43e af01 	beq.w	fffd5cec <__ssvfscanf_r+0x180>
fffd6eea:	44b2      	add	r10, r6
fffd6eec:	f7fe be72 	b.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd6ef0:	ea4f 0848 	mov.w	r8, r8, lsl #1
fffd6ef4:	4620      	mov	r0, r4
fffd6ef6:	62ba      	str	r2, [r7, #40]	; 0x28
fffd6ef8:	4641      	mov	r1, r8
fffd6efa:	f000 fccf 	bl	fffd789c <realloc>
fffd6efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
fffd6f00:	4604      	mov	r4, r0
fffd6f02:	eb00 0902 	add.w	r9, r0, r2
fffd6f06:	2800      	cmp	r0, #0
fffd6f08:	f000 80d4 	beq.w	fffd70b4 <__ssvfscanf_r+0x1548>
fffd6f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd6f0e:	6018      	str	r0, [r3, #0]
fffd6f10:	e576      	b.n	fffd6a00 <__ssvfscanf_r+0xe94>
fffd6f12:	63fc      	str	r4, [r7, #60]	; 0x3c
fffd6f14:	46a0      	mov	r8, r4
fffd6f16:	633c      	str	r4, [r7, #48]	; 0x30
fffd6f18:	e550      	b.n	fffd69bc <__ssvfscanf_r+0xe50>
fffd6f1a:	f8d7 a030 	ldr.w	r10, [r7, #48]	; 0x30
fffd6f1e:	603d      	str	r5, [r7, #0]
fffd6f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
fffd6f22:	2b00      	cmp	r3, #0
fffd6f24:	f47e ae56 	bne.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd6f28:	697a      	ldr	r2, [r7, #20]
fffd6f2a:	f8c9 3000 	str.w	r3, [r9]
fffd6f2e:	eba9 0102 	sub.w	r1, r9, r2
fffd6f32:	687b      	ldr	r3, [r7, #4]
fffd6f34:	68fa      	ldr	r2, [r7, #12]
fffd6f36:	1089      	asrs	r1, r1, #2
fffd6f38:	3101      	adds	r1, #1
fffd6f3a:	2b00      	cmp	r3, #0
fffd6f3c:	bf18      	it	ne
fffd6f3e:	428a      	cmpne	r2, r1
fffd6f40:	f67f a83f 	bls.w	fffd5fc2 <__ssvfscanf_r+0x456>
fffd6f44:	0089      	lsls	r1, r1, #2
fffd6f46:	6818      	ldr	r0, [r3, #0]
fffd6f48:	461c      	mov	r4, r3
fffd6f4a:	f000 fca7 	bl	fffd789c <realloc>
fffd6f4e:	2800      	cmp	r0, #0
fffd6f50:	f43f a837 	beq.w	fffd5fc2 <__ssvfscanf_r+0x456>
fffd6f54:	6020      	str	r0, [r4, #0]
fffd6f56:	f7ff b834 	b.w	fffd5fc2 <__ssvfscanf_r+0x456>
fffd6f5a:	4602      	mov	r2, r0
fffd6f5c:	460b      	mov	r3, r1
fffd6f5e:	f004 f9d5 	bl	fffdb30c <__aeabi_dcmpun>
fffd6f62:	2800      	cmp	r0, #0
fffd6f64:	f040 8114 	bne.w	fffd7190 <__ssvfscanf_r+0x1624>
fffd6f68:	4640      	mov	r0, r8
fffd6f6a:	4649      	mov	r1, r9
fffd6f6c:	f004 fa2c 	bl	fffdb3c8 <__aeabi_d2f>
fffd6f70:	6030      	str	r0, [r6, #0]
fffd6f72:	e424      	b.n	fffd67be <__ssvfscanf_r+0xc52>
fffd6f74:	4622      	mov	r2, r4
fffd6f76:	e5c3      	b.n	fffd6b00 <__ssvfscanf_r+0xf94>
fffd6f78:	62be      	str	r6, [r7, #40]	; 0x28
fffd6f7a:	46b1      	mov	r9, r6
fffd6f7c:	633e      	str	r6, [r7, #48]	; 0x30
fffd6f7e:	f7fe bfff 	b.w	fffd5f80 <__ssvfscanf_r+0x414>
fffd6f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
fffd6f84:	60fb      	str	r3, [r7, #12]
fffd6f86:	617b      	str	r3, [r7, #20]
fffd6f88:	607b      	str	r3, [r7, #4]
fffd6f8a:	f7ff b91e 	b.w	fffd61ca <__ssvfscanf_r+0x65e>
fffd6f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6f90:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
fffd6f94:	617b      	str	r3, [r7, #20]
fffd6f96:	f7ff b85c 	b.w	fffd6052 <__ssvfscanf_r+0x4e6>
fffd6f9a:	683b      	ldr	r3, [r7, #0]
fffd6f9c:	3302      	adds	r3, #2
fffd6f9e:	f040 8109 	bne.w	fffd71b4 <__ssvfscanf_r+0x1648>
fffd6fa2:	f8db 3004 	ldr.w	r3, [r11, #4]
fffd6fa6:	2b00      	cmp	r3, #0
fffd6fa8:	f77e ae8c 	ble.w	fffd5cc4 <__ssvfscanf_r+0x158>
fffd6fac:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
fffd6fae:	f7fe bfe8 	b.w	fffd5f82 <__ssvfscanf_r+0x416>
fffd6fb2:	68fd      	ldr	r5, [r7, #12]
fffd6fb4:	230a      	movs	r3, #10
fffd6fb6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd6fb8:	4629      	mov	r1, r5
fffd6fba:	3101      	adds	r1, #1
fffd6fbc:	f001 feea 	bl	fffd8d94 <_strtol_r>
fffd6fc0:	693b      	ldr	r3, [r7, #16]
fffd6fc2:	46a9      	mov	r9, r5
fffd6fc4:	1ac2      	subs	r2, r0, r3
fffd6fc6:	e6b6      	b.n	fffd6d36 <__ssvfscanf_r+0x11ca>
fffd6fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6fca:	2b00      	cmp	r3, #0
fffd6fcc:	f43e afe9 	beq.w	fffd5fa2 <__ssvfscanf_r+0x436>
fffd6fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd6fd2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
fffd6fd6:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
fffd6fd8:	4413      	add	r3, r2
fffd6fda:	461c      	mov	r4, r3
fffd6fdc:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
fffd6fe0:	465a      	mov	r2, r11
fffd6fe2:	4628      	mov	r0, r5
fffd6fe4:	f002 f972 	bl	fffd92cc <_sungetc_r>
fffd6fe8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
fffd6fec:	42a3      	cmp	r3, r4
fffd6fee:	d1f5      	bne.n	fffd6fdc <__ssvfscanf_r+0x1470>
fffd6ff0:	f7fe bfd7 	b.w	fffd5fa2 <__ssvfscanf_r+0x436>
fffd6ff4:	07a1      	lsls	r1, r4, #30
fffd6ff6:	f57f ac45 	bpl.w	fffd6884 <__ssvfscanf_r+0xd18>
fffd6ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
fffd6ffc:	69f9      	ldr	r1, [r7, #28]
fffd6ffe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd7000:	428b      	cmp	r3, r1
fffd7002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
fffd7004:	6b39      	ldr	r1, [r7, #48]	; 0x30
fffd7006:	f000 80cb 	beq.w	fffd71a0 <__ssvfscanf_r+0x1634>
fffd700a:	f001 ffa3 	bl	fffd8f54 <_strtoll_r>
fffd700e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
fffd7010:	681b      	ldr	r3, [r3, #0]
fffd7012:	e9c3 0100 	strd	r0, r1, [r3]
fffd7016:	e438      	b.n	fffd688a <__ssvfscanf_r+0xd1e>
fffd7018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd701a:	2b00      	cmp	r3, #0
fffd701c:	d060      	beq.n	fffd70e0 <__ssvfscanf_r+0x1574>
fffd701e:	f8d3 8000 	ldr.w	r8, [r3]
fffd7022:	88de      	ldrh	r6, [r3, #6]
fffd7024:	b16e      	cbz	r6, fffd7042 <__ssvfscanf_r+0x14d6>
fffd7026:	f1a8 0404 	sub.w	r4, r8, #4
fffd702a:	2500      	movs	r5, #0
fffd702c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
fffd7030:	f854 3f04 	ldr.w	r3, [r4, #4]!
fffd7034:	6818      	ldr	r0, [r3, #0]
fffd7036:	f000 f91b 	bl	fffd7270 <free>
fffd703a:	6823      	ldr	r3, [r4, #0]
fffd703c:	42b4      	cmp	r4, r6
fffd703e:	601d      	str	r5, [r3, #0]
fffd7040:	d1f6      	bne.n	fffd7030 <__ssvfscanf_r+0x14c4>
fffd7042:	f04f 33ff 	mov.w	r3, #4294967295
fffd7046:	647b      	str	r3, [r7, #68]	; 0x44
fffd7048:	f1b8 0f00 	cmp.w	r8, #0
fffd704c:	f47e ae55 	bne.w	fffd5cfa <__ssvfscanf_r+0x18e>
fffd7050:	f7fe be56 	b.w	fffd5d00 <__ssvfscanf_r+0x194>
fffd7054:	6810      	ldr	r0, [r2, #0]
fffd7056:	63fa      	str	r2, [r7, #60]	; 0x3c
fffd7058:	f000 fc20 	bl	fffd789c <realloc>
fffd705c:	2800      	cmp	r0, #0
fffd705e:	f43f af24 	beq.w	fffd6eaa <__ssvfscanf_r+0x133e>
fffd7062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
fffd7064:	6010      	str	r0, [r2, #0]
fffd7066:	e720      	b.n	fffd6eaa <__ssvfscanf_r+0x133e>
fffd7068:	2c00      	cmp	r4, #0
fffd706a:	f43e ae36 	beq.w	fffd5cda <__ssvfscanf_r+0x16e>
fffd706e:	44a2      	add	r10, r4
fffd7070:	f7fe bdb0 	b.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd7074:	f8d7 a030 	ldr.w	r10, [r7, #48]	; 0x30
fffd7078:	603d      	str	r5, [r7, #0]
fffd707a:	f1b8 0f00 	cmp.w	r8, #0
fffd707e:	f43f af4f 	beq.w	fffd6f20 <__ssvfscanf_r+0x13b4>
fffd7082:	f507 73b4 	add.w	r3, r7, #360	; 0x168
fffd7086:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
fffd7088:	4498      	add	r8, r3
fffd708a:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
fffd708e:	465a      	mov	r2, r11
fffd7090:	4620      	mov	r0, r4
fffd7092:	f002 f91b 	bl	fffd92cc <_sungetc_r>
fffd7096:	f507 73b4 	add.w	r3, r7, #360	; 0x168
fffd709a:	4543      	cmp	r3, r8
fffd709c:	d1f5      	bne.n	fffd708a <__ssvfscanf_r+0x151e>
fffd709e:	e73f      	b.n	fffd6f20 <__ssvfscanf_r+0x13b4>
fffd70a0:	6810      	ldr	r0, [r2, #0]
fffd70a2:	4614      	mov	r4, r2
fffd70a4:	f000 fbfa 	bl	fffd789c <realloc>
fffd70a8:	2800      	cmp	r0, #0
fffd70aa:	f43f a844 	beq.w	fffd6136 <__ssvfscanf_r+0x5ca>
fffd70ae:	6020      	str	r0, [r4, #0]
fffd70b0:	f7ff b841 	b.w	fffd6136 <__ssvfscanf_r+0x5ca>
fffd70b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd70b6:	b19b      	cbz	r3, fffd70e0 <__ssvfscanf_r+0x1574>
fffd70b8:	f8d3 8000 	ldr.w	r8, [r3]
fffd70bc:	88de      	ldrh	r6, [r3, #6]
fffd70be:	e7b1      	b.n	fffd7024 <__ssvfscanf_r+0x14b8>
fffd70c0:	f8c3 a000 	str.w	r10, [r3]
fffd70c4:	f7fe bd86 	b.w	fffd5bd4 <__ssvfscanf_r+0x68>
fffd70c8:	2300      	movs	r3, #0
fffd70ca:	63fb      	str	r3, [r7, #60]	; 0x3c
fffd70cc:	e769      	b.n	fffd6fa2 <__ssvfscanf_r+0x1436>
fffd70ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd70d0:	b133      	cbz	r3, fffd70e0 <__ssvfscanf_r+0x1574>
fffd70d2:	88db      	ldrh	r3, [r3, #6]
fffd70d4:	461a      	mov	r2, r3
fffd70d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd70d8:	4616      	mov	r6, r2
fffd70da:	f8d3 8000 	ldr.w	r8, [r3]
fffd70de:	e7a1      	b.n	fffd7024 <__ssvfscanf_r+0x14b8>
fffd70e0:	f04f 33ff 	mov.w	r3, #4294967295
fffd70e4:	647b      	str	r3, [r7, #68]	; 0x44
fffd70e6:	f7fe be0b 	b.w	fffd5d00 <__ssvfscanf_r+0x194>
fffd70ea:	4633      	mov	r3, r6
fffd70ec:	4646      	mov	r6, r8
fffd70ee:	f7ff bb28 	b.w	fffd6742 <__ssvfscanf_r+0xbd6>
fffd70f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd70f4:	2b00      	cmp	r3, #0
fffd70f6:	d0f3      	beq.n	fffd70e0 <__ssvfscanf_r+0x1574>
fffd70f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd70fa:	f8d3 8000 	ldr.w	r8, [r3]
fffd70fe:	88de      	ldrh	r6, [r3, #6]
fffd7100:	e790      	b.n	fffd7024 <__ssvfscanf_r+0x14b8>
fffd7102:	6b3d      	ldr	r5, [r7, #48]	; 0x30
fffd7104:	45a9      	cmp	r9, r5
fffd7106:	f67e adf1 	bls.w	fffd5cec <__ssvfscanf_r+0x180>
fffd710a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
fffd710c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
fffd7110:	465a      	mov	r2, r11
fffd7112:	4620      	mov	r0, r4
fffd7114:	f002 f8da 	bl	fffd92cc <_sungetc_r>
fffd7118:	45a9      	cmp	r9, r5
fffd711a:	d1f7      	bne.n	fffd710c <__ssvfscanf_r+0x15a0>
fffd711c:	f7fe bde6 	b.w	fffd5cec <__ssvfscanf_r+0x180>
fffd7120:	6abb      	ldr	r3, [r7, #40]	; 0x28
fffd7122:	4648      	mov	r0, r9
fffd7124:	00d9      	lsls	r1, r3, #3
fffd7126:	f000 fbb9 	bl	fffd789c <realloc>
fffd712a:	4681      	mov	r9, r0
fffd712c:	2800      	cmp	r0, #0
fffd712e:	d0ce      	beq.n	fffd70ce <__ssvfscanf_r+0x1562>
fffd7130:	6abb      	ldr	r3, [r7, #40]	; 0x28
fffd7132:	eb00 0804 	add.w	r8, r0, r4
fffd7136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
fffd7138:	63fe      	str	r6, [r7, #60]	; 0x3c
fffd713a:	005b      	lsls	r3, r3, #1
fffd713c:	62bb      	str	r3, [r7, #40]	; 0x28
fffd713e:	6010      	str	r0, [r2, #0]
fffd7140:	e72f      	b.n	fffd6fa2 <__ssvfscanf_r+0x1436>
fffd7142:	4626      	mov	r6, r4
fffd7144:	e76e      	b.n	fffd7024 <__ssvfscanf_r+0x14b8>
fffd7146:	6b3d      	ldr	r5, [r7, #48]	; 0x30
fffd7148:	45a9      	cmp	r9, r5
fffd714a:	f67e adcf 	bls.w	fffd5cec <__ssvfscanf_r+0x180>
fffd714e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
fffd7150:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
fffd7154:	465a      	mov	r2, r11
fffd7156:	4620      	mov	r0, r4
fffd7158:	f002 f8b8 	bl	fffd92cc <_sungetc_r>
fffd715c:	45a9      	cmp	r9, r5
fffd715e:	d1f7      	bne.n	fffd7150 <__ssvfscanf_r+0x15e4>
fffd7160:	f7fe bdc4 	b.w	fffd5cec <__ssvfscanf_r+0x180>
fffd7164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd7166:	2b00      	cmp	r3, #0
fffd7168:	f43e adca 	beq.w	fffd5d00 <__ssvfscanf_r+0x194>
fffd716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd716e:	f7fe bdbf 	b.w	fffd5cf0 <__ssvfscanf_r+0x184>
fffd7172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd7174:	4599      	cmp	r9, r3
fffd7176:	f67e adb9 	bls.w	fffd5cec <__ssvfscanf_r+0x180>
fffd717a:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
fffd717e:	465a      	mov	r2, r11
fffd7180:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
fffd7182:	f002 f8a3 	bl	fffd92cc <_sungetc_r>
fffd7186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
fffd7188:	4599      	cmp	r9, r3
fffd718a:	d1f6      	bne.n	fffd717a <__ssvfscanf_r+0x160e>
fffd718c:	f7fe bdae 	b.w	fffd5cec <__ssvfscanf_r+0x180>
fffd7190:	4620      	mov	r0, r4
fffd7192:	f000 fd8b 	bl	fffd7cac <nanf>
fffd7196:	6030      	str	r0, [r6, #0]
fffd7198:	f7ff bb11 	b.w	fffd67be <__ssvfscanf_r+0xc52>
fffd719c:	4622      	mov	r2, r4
fffd719e:	e79a      	b.n	fffd70d6 <__ssvfscanf_r+0x156a>
fffd71a0:	f002 f880 	bl	fffd92a4 <_strtoull_r>
fffd71a4:	e733      	b.n	fffd700e <__ssvfscanf_r+0x14a2>
fffd71a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
fffd71a8:	2b00      	cmp	r3, #0
fffd71aa:	f47e ad9a 	bne.w	fffd5ce2 <__ssvfscanf_r+0x176>
fffd71ae:	e7a3      	b.n	fffd70f8 <__ssvfscanf_r+0x158c>
fffd71b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
fffd71b2:	e78e      	b.n	fffd70d2 <__ssvfscanf_r+0x1566>
fffd71b4:	f8d8 0000 	ldr.w	r0, [r8]
fffd71b8:	f000 f80e 	bl	fffd71d8 <iswspace>
fffd71bc:	2800      	cmp	r0, #0
fffd71be:	f47f af03 	bne.w	fffd6fc8 <__ssvfscanf_r+0x145c>
fffd71c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
fffd71c4:	449a      	add	r10, r3
fffd71c6:	683b      	ldr	r3, [r7, #0]
fffd71c8:	2b03      	cmp	r3, #3
fffd71ca:	f47f ad30 	bne.w	fffd6c2e <__ssvfscanf_r+0x10c2>
fffd71ce:	6823      	ldr	r3, [r4, #0]
fffd71d0:	2b04      	cmp	r3, #4
fffd71d2:	f47f ad2c 	bne.w	fffd6c2e <__ssvfscanf_r+0x10c2>
fffd71d6:	e52b      	b.n	fffd6c30 <__ssvfscanf_r+0x10c4>

fffd71d8 <iswspace>:
fffd71d8:	28ff      	cmp	r0, #255	; 0xff
fffd71da:	d901      	bls.n	fffd71e0 <iswspace+0x8>
fffd71dc:	2000      	movs	r0, #0
fffd71de:	4770      	bx	lr
fffd71e0:	b510      	push	{r4, lr}
fffd71e2:	4604      	mov	r4, r0
fffd71e4:	f000 f81a 	bl	fffd721c <__locale_ctype_ptr>
fffd71e8:	4420      	add	r0, r4
fffd71ea:	7840      	ldrb	r0, [r0, #1]
fffd71ec:	f000 0008 	and.w	r0, r0, #8
fffd71f0:	bd10      	pop	{r4, pc}
fffd71f2:	bf00      	nop

fffd71f4 <__locale_mb_cur_max>:
fffd71f4:	f24d 2388 	movw	r3, #53896	; 0xd288
fffd71f8:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd71fc:	f24d 62b8 	movw	r2, #54968	; 0xd6b8
fffd7200:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd7204:	681b      	ldr	r3, [r3, #0]
fffd7206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
fffd7208:	2b00      	cmp	r3, #0
fffd720a:	bf08      	it	eq
fffd720c:	4613      	moveq	r3, r2
fffd720e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
fffd7212:	4770      	bx	lr

fffd7214 <__locale_ctype_ptr_l>:
fffd7214:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
fffd7218:	4770      	bx	lr
fffd721a:	bf00      	nop

fffd721c <__locale_ctype_ptr>:
fffd721c:	f24d 2388 	movw	r3, #53896	; 0xd288
fffd7220:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd7224:	f24d 62b8 	movw	r2, #54968	; 0xd6b8
fffd7228:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd722c:	681b      	ldr	r3, [r3, #0]
fffd722e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
fffd7230:	2b00      	cmp	r3, #0
fffd7232:	bf08      	it	eq
fffd7234:	4613      	moveq	r3, r2
fffd7236:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
fffd723a:	4770      	bx	lr

fffd723c <__localeconv_l>:
fffd723c:	30f0      	adds	r0, #240	; 0xf0
fffd723e:	4770      	bx	lr

fffd7240 <_localeconv_r>:
fffd7240:	f24d 2288 	movw	r2, #53896	; 0xd288
fffd7244:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd7248:	f24d 63b8 	movw	r3, #54968	; 0xd6b8
fffd724c:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd7250:	6812      	ldr	r2, [r2, #0]
fffd7252:	6b50      	ldr	r0, [r2, #52]	; 0x34
fffd7254:	2800      	cmp	r0, #0
fffd7256:	bf08      	it	eq
fffd7258:	4618      	moveq	r0, r3
fffd725a:	30f0      	adds	r0, #240	; 0xf0
fffd725c:	4770      	bx	lr
fffd725e:	bf00      	nop

fffd7260 <malloc>:
fffd7260:	f24d 2388 	movw	r3, #53896	; 0xd288
fffd7264:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd7268:	4601      	mov	r1, r0
fffd726a:	6818      	ldr	r0, [r3, #0]
fffd726c:	f000 b808 	b.w	fffd7280 <_malloc_r>

fffd7270 <free>:
fffd7270:	f24d 2388 	movw	r3, #53896	; 0xd288
fffd7274:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd7278:	4601      	mov	r1, r0
fffd727a:	6818      	ldr	r0, [r3, #0]
fffd727c:	f002 b960 	b.w	fffd9540 <_free_r>

fffd7280 <_malloc_r>:
fffd7280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd7284:	f101 050b 	add.w	r5, r1, #11
fffd7288:	2d16      	cmp	r5, #22
fffd728a:	b083      	sub	sp, #12
fffd728c:	4606      	mov	r6, r0
fffd728e:	d827      	bhi.n	fffd72e0 <_malloc_r+0x60>
fffd7290:	2910      	cmp	r1, #16
fffd7292:	f200 8196 	bhi.w	fffd75c2 <_malloc_r+0x342>
fffd7296:	f000 faf5 	bl	fffd7884 <__malloc_lock>
fffd729a:	2510      	movs	r5, #16
fffd729c:	2218      	movs	r2, #24
fffd729e:	2402      	movs	r4, #2
fffd72a0:	f64d 0724 	movw	r7, #55332	; 0xd824
fffd72a4:	f6cf 77fd 	movt	r7, #65533	; 0xfffd
fffd72a8:	443a      	add	r2, r7
fffd72aa:	f1a2 0108 	sub.w	r1, r2, #8
fffd72ae:	6853      	ldr	r3, [r2, #4]
fffd72b0:	428b      	cmp	r3, r1
fffd72b2:	f000 81af 	beq.w	fffd7614 <_malloc_r+0x394>
fffd72b6:	685a      	ldr	r2, [r3, #4]
fffd72b8:	f103 0408 	add.w	r4, r3, #8
fffd72bc:	68d9      	ldr	r1, [r3, #12]
fffd72be:	4630      	mov	r0, r6
fffd72c0:	f022 0203 	bic.w	r2, r2, #3
fffd72c4:	689d      	ldr	r5, [r3, #8]
fffd72c6:	4413      	add	r3, r2
fffd72c8:	685a      	ldr	r2, [r3, #4]
fffd72ca:	60e9      	str	r1, [r5, #12]
fffd72cc:	f042 0201 	orr.w	r2, r2, #1
fffd72d0:	608d      	str	r5, [r1, #8]
fffd72d2:	605a      	str	r2, [r3, #4]
fffd72d4:	f000 fadc 	bl	fffd7890 <__malloc_unlock>
fffd72d8:	4620      	mov	r0, r4
fffd72da:	b003      	add	sp, #12
fffd72dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd72e0:	f025 0507 	bic.w	r5, r5, #7
fffd72e4:	42a9      	cmp	r1, r5
fffd72e6:	bf94      	ite	ls
fffd72e8:	2100      	movls	r1, #0
fffd72ea:	2101      	movhi	r1, #1
fffd72ec:	ea51 73d5 	orrs.w	r3, r1, r5, lsr #31
fffd72f0:	f040 8167 	bne.w	fffd75c2 <_malloc_r+0x342>
fffd72f4:	f000 fac6 	bl	fffd7884 <__malloc_lock>
fffd72f8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
fffd72fc:	f0c0 81a8 	bcc.w	fffd7650 <_malloc_r+0x3d0>
fffd7300:	0a6b      	lsrs	r3, r5, #9
fffd7302:	d00b      	beq.n	fffd731c <_malloc_r+0x9c>
fffd7304:	2b04      	cmp	r3, #4
fffd7306:	f240 8155 	bls.w	fffd75b4 <_malloc_r+0x334>
fffd730a:	2b14      	cmp	r3, #20
fffd730c:	f200 81dd 	bhi.w	fffd76ca <_malloc_r+0x44a>
fffd7310:	f103 045c 	add.w	r4, r3, #92	; 0x5c
fffd7314:	f103 0c5b 	add.w	r12, r3, #91	; 0x5b
fffd7318:	00e3      	lsls	r3, r4, #3
fffd731a:	e004      	b.n	fffd7326 <_malloc_r+0xa6>
fffd731c:	f44f 7300 	mov.w	r3, #512	; 0x200
fffd7320:	2440      	movs	r4, #64	; 0x40
fffd7322:	f04f 0c3f 	mov.w	r12, #63	; 0x3f
fffd7326:	f64d 0724 	movw	r7, #55332	; 0xd824
fffd732a:	f6cf 77fd 	movt	r7, #65533	; 0xfffd
fffd732e:	443b      	add	r3, r7
fffd7330:	f1a3 0008 	sub.w	r0, r3, #8
fffd7334:	685b      	ldr	r3, [r3, #4]
fffd7336:	4298      	cmp	r0, r3
fffd7338:	d106      	bne.n	fffd7348 <_malloc_r+0xc8>
fffd733a:	e00c      	b.n	fffd7356 <_malloc_r+0xd6>
fffd733c:	2900      	cmp	r1, #0
fffd733e:	f280 8147 	bge.w	fffd75d0 <_malloc_r+0x350>
fffd7342:	68db      	ldr	r3, [r3, #12]
fffd7344:	4298      	cmp	r0, r3
fffd7346:	d006      	beq.n	fffd7356 <_malloc_r+0xd6>
fffd7348:	685a      	ldr	r2, [r3, #4]
fffd734a:	f022 0203 	bic.w	r2, r2, #3
fffd734e:	1b51      	subs	r1, r2, r5
fffd7350:	290f      	cmp	r1, #15
fffd7352:	ddf3      	ble.n	fffd733c <_malloc_r+0xbc>
fffd7354:	4664      	mov	r4, r12
fffd7356:	693a      	ldr	r2, [r7, #16]
fffd7358:	f8df c4a0 	ldr.w	r12, [pc, #1184]	; fffd77fc <_malloc_r+0x57c>
fffd735c:	4562      	cmp	r2, r12
fffd735e:	bf08      	it	eq
fffd7360:	687b      	ldreq	r3, [r7, #4]
fffd7362:	d026      	beq.n	fffd73b2 <_malloc_r+0x132>
fffd7364:	6853      	ldr	r3, [r2, #4]
fffd7366:	f023 0303 	bic.w	r3, r3, #3
fffd736a:	1b59      	subs	r1, r3, r5
fffd736c:	290f      	cmp	r1, #15
fffd736e:	f300 8158 	bgt.w	fffd7622 <_malloc_r+0x3a2>
fffd7372:	2900      	cmp	r1, #0
fffd7374:	e9c7 cc04 	strd	r12, r12, [r7, #16]
fffd7378:	f280 810e 	bge.w	fffd7598 <_malloc_r+0x318>
fffd737c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
fffd7380:	f080 8182 	bcs.w	fffd7688 <_malloc_r+0x408>
fffd7384:	08db      	lsrs	r3, r3, #3
fffd7386:	f04f 0e01 	mov.w	lr, #1
fffd738a:	eb03 000e 	add.w	r0, r3, lr
fffd738e:	6879      	ldr	r1, [r7, #4]
fffd7390:	109b      	asrs	r3, r3, #2
fffd7392:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
fffd7396:	fa0e f303 	lsl.w	r3, lr, r3
fffd739a:	eb07 0ec0 	add.w	lr, r7, r0, lsl #3
fffd739e:	430b      	orrs	r3, r1
fffd73a0:	f1ae 0108 	sub.w	r1, lr, #8
fffd73a4:	607b      	str	r3, [r7, #4]
fffd73a6:	e9c2 8102 	strd	r8, r1, [r2, #8]
fffd73aa:	f847 2030 	str.w	r2, [r7, r0, lsl #3]
fffd73ae:	f8c8 200c 	str.w	r2, [r8, #12]
fffd73b2:	10a2      	asrs	r2, r4, #2
fffd73b4:	2001      	movs	r0, #1
fffd73b6:	4090      	lsls	r0, r2
fffd73b8:	4298      	cmp	r0, r3
fffd73ba:	d838      	bhi.n	fffd742e <_malloc_r+0x1ae>
fffd73bc:	4218      	tst	r0, r3
fffd73be:	d105      	bne.n	fffd73cc <_malloc_r+0x14c>
fffd73c0:	f024 0403 	bic.w	r4, r4, #3
fffd73c4:	0040      	lsls	r0, r0, #1
fffd73c6:	3404      	adds	r4, #4
fffd73c8:	4218      	tst	r0, r3
fffd73ca:	d0fb      	beq.n	fffd73c4 <_malloc_r+0x144>
fffd73cc:	eb07 09c4 	add.w	r9, r7, r4, lsl #3
fffd73d0:	46a0      	mov	r8, r4
fffd73d2:	46ce      	mov	lr, r9
fffd73d4:	f8de 300c 	ldr.w	r3, [lr, #12]
fffd73d8:	459e      	cmp	lr, r3
fffd73da:	d107      	bne.n	fffd73ec <_malloc_r+0x16c>
fffd73dc:	e13c      	b.n	fffd7658 <_malloc_r+0x3d8>
fffd73de:	2a00      	cmp	r2, #0
fffd73e0:	f280 8143 	bge.w	fffd766a <_malloc_r+0x3ea>
fffd73e4:	68db      	ldr	r3, [r3, #12]
fffd73e6:	459e      	cmp	lr, r3
fffd73e8:	f000 8136 	beq.w	fffd7658 <_malloc_r+0x3d8>
fffd73ec:	6859      	ldr	r1, [r3, #4]
fffd73ee:	f021 0103 	bic.w	r1, r1, #3
fffd73f2:	1b4a      	subs	r2, r1, r5
fffd73f4:	2a0f      	cmp	r2, #15
fffd73f6:	ddf2      	ble.n	fffd73de <_malloc_r+0x15e>
fffd73f8:	68dc      	ldr	r4, [r3, #12]
fffd73fa:	eb03 0e05 	add.w	lr, r3, r5
fffd73fe:	f8d3 8008 	ldr.w	r8, [r3, #8]
fffd7402:	f045 0501 	orr.w	r5, r5, #1
fffd7406:	4630      	mov	r0, r6
fffd7408:	605d      	str	r5, [r3, #4]
fffd740a:	f042 0501 	orr.w	r5, r2, #1
fffd740e:	f8c8 400c 	str.w	r4, [r8, #12]
fffd7412:	f8c4 8008 	str.w	r8, [r4, #8]
fffd7416:	f103 0408 	add.w	r4, r3, #8
fffd741a:	e9c7 ee04 	strd	lr, lr, [r7, #16]
fffd741e:	e9ce cc02 	strd	r12, r12, [lr, #8]
fffd7422:	f8ce 5004 	str.w	r5, [lr, #4]
fffd7426:	505a      	str	r2, [r3, r1]
fffd7428:	f000 fa32 	bl	fffd7890 <__malloc_unlock>
fffd742c:	e754      	b.n	fffd72d8 <_malloc_r+0x58>
fffd742e:	68bc      	ldr	r4, [r7, #8]
fffd7430:	6863      	ldr	r3, [r4, #4]
fffd7432:	f023 0903 	bic.w	r9, r3, #3
fffd7436:	45a9      	cmp	r9, r5
fffd7438:	eba9 0305 	sub.w	r3, r9, r5
fffd743c:	bf2c      	ite	cs
fffd743e:	2200      	movcs	r2, #0
fffd7440:	2201      	movcc	r2, #1
fffd7442:	2b0f      	cmp	r3, #15
fffd7444:	bfd8      	it	le
fffd7446:	f042 0201 	orrle.w	r2, r2, #1
fffd744a:	2a00      	cmp	r2, #0
fffd744c:	f000 80d2 	beq.w	fffd75f4 <_malloc_r+0x374>
fffd7450:	f64d 536c 	movw	r3, #56684	; 0xdd6c
fffd7454:	f64d 4a2c 	movw	r10, #56364	; 0xdc2c
fffd7458:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd745c:	f6cf 7afd 	movt	r10, #65533	; 0xfffd
fffd7460:	4630      	mov	r0, r6
fffd7462:	681a      	ldr	r2, [r3, #0]
fffd7464:	f8da 3000 	ldr.w	r3, [r10]
fffd7468:	eb05 0802 	add.w	r8, r5, r2
fffd746c:	3301      	adds	r3, #1
fffd746e:	bf17      	itett	ne
fffd7470:	f508 5880 	addne.w	r8, r8, #4096	; 0x1000
fffd7474:	f108 0810 	addeq.w	r8, r8, #16
fffd7478:	f108 080f 	addne.w	r8, r8, #15
fffd747c:	f428 687f 	bicne.w	r8, r8, #4080	; 0xff0
fffd7480:	bf18      	it	ne
fffd7482:	f028 080f 	bicne.w	r8, r8, #15
fffd7486:	4641      	mov	r1, r8
fffd7488:	f000 fbc0 	bl	fffd7c0c <_sbrk_r>
fffd748c:	f1b0 3fff 	cmp.w	r0, #4294967295
fffd7490:	4683      	mov	r11, r0
fffd7492:	f000 8128 	beq.w	fffd76e6 <_malloc_r+0x466>
fffd7496:	eb04 0009 	add.w	r0, r4, r9
fffd749a:	4558      	cmp	r0, r11
fffd749c:	f200 8121 	bhi.w	fffd76e2 <_malloc_r+0x462>
fffd74a0:	f64d 523c 	movw	r2, #56636	; 0xdd3c
fffd74a4:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd74a8:	6813      	ldr	r3, [r2, #0]
fffd74aa:	4443      	add	r3, r8
fffd74ac:	6013      	str	r3, [r2, #0]
fffd74ae:	f000 815d 	beq.w	fffd776c <_malloc_r+0x4ec>
fffd74b2:	f8da 1000 	ldr.w	r1, [r10]
fffd74b6:	9201      	str	r2, [sp, #4]
fffd74b8:	3101      	adds	r1, #1
fffd74ba:	bf0f      	iteee	eq
fffd74bc:	f8ca b000 	streq.w	r11, [r10]
fffd74c0:	ebab 0000 	subne.w	r0, r11, r0
fffd74c4:	181b      	addne	r3, r3, r0
fffd74c6:	6013      	strne	r3, [r2, #0]
fffd74c8:	f01b 0307 	ands.w	r3, r11, #7
fffd74cc:	4630      	mov	r0, r6
fffd74ce:	bf1f      	itttt	ne
fffd74d0:	f1c3 0108 	rsbne	r1, r3, #8
fffd74d4:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
fffd74d8:	448b      	addne	r11, r1
fffd74da:	3308      	addne	r3, #8
fffd74dc:	44d8      	add	r8, r11
fffd74de:	bf08      	it	eq
fffd74e0:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
fffd74e4:	f3c8 080b 	ubfx	r8, r8, #0, #12
fffd74e8:	eba3 0808 	sub.w	r8, r3, r8
fffd74ec:	4641      	mov	r1, r8
fffd74ee:	f000 fb8d 	bl	fffd7c0c <_sbrk_r>
fffd74f2:	9a01      	ldr	r2, [sp, #4]
fffd74f4:	f8c7 b008 	str.w	r11, [r7, #8]
fffd74f8:	1c43      	adds	r3, r0, #1
fffd74fa:	6813      	ldr	r3, [r2, #0]
fffd74fc:	bf1b      	ittet	ne
fffd74fe:	eba0 010b 	subne.w	r1, r0, r11
fffd7502:	4441      	addne	r1, r8
fffd7504:	2101      	moveq	r1, #1
fffd7506:	f041 0101 	orrne.w	r1, r1, #1
fffd750a:	bf08      	it	eq
fffd750c:	f04f 0800 	moveq.w	r8, #0
fffd7510:	42bc      	cmp	r4, r7
fffd7512:	4443      	add	r3, r8
fffd7514:	f8cb 1004 	str.w	r1, [r11, #4]
fffd7518:	6013      	str	r3, [r2, #0]
fffd751a:	d019      	beq.n	fffd7550 <_malloc_r+0x2d0>
fffd751c:	f1b9 0f0f 	cmp.w	r9, #15
fffd7520:	bf9c      	itt	ls
fffd7522:	2301      	movls	r3, #1
fffd7524:	f8cb 3004 	strls.w	r3, [r11, #4]
fffd7528:	d931      	bls.n	fffd758e <_malloc_r+0x30e>
fffd752a:	f1a9 010c 	sub.w	r1, r9, #12
fffd752e:	6860      	ldr	r0, [r4, #4]
fffd7530:	f021 0107 	bic.w	r1, r1, #7
fffd7534:	f04f 0e05 	mov.w	lr, #5
fffd7538:	eb04 0c01 	add.w	r12, r4, r1
fffd753c:	290f      	cmp	r1, #15
fffd753e:	f000 0001 	and.w	r0, r0, #1
fffd7542:	ea40 0001 	orr.w	r0, r0, r1
fffd7546:	6060      	str	r0, [r4, #4]
fffd7548:	e9cc ee01 	strd	lr, lr, [r12, #4]
fffd754c:	f200 813c 	bhi.w	fffd77c8 <_malloc_r+0x548>
fffd7550:	f64d 5264 	movw	r2, #56676	; 0xdd64
fffd7554:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd7558:	68bc      	ldr	r4, [r7, #8]
fffd755a:	f64d 5068 	movw	r0, #56680	; 0xdd68
fffd755e:	6811      	ldr	r1, [r2, #0]
fffd7560:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
fffd7564:	428b      	cmp	r3, r1
fffd7566:	bf88      	it	hi
fffd7568:	6013      	strhi	r3, [r2, #0]
fffd756a:	6862      	ldr	r2, [r4, #4]
fffd756c:	6801      	ldr	r1, [r0, #0]
fffd756e:	f022 0203 	bic.w	r2, r2, #3
fffd7572:	428b      	cmp	r3, r1
fffd7574:	bf88      	it	hi
fffd7576:	6003      	strhi	r3, [r0, #0]
fffd7578:	4295      	cmp	r5, r2
fffd757a:	eba2 0305 	sub.w	r3, r2, r5
fffd757e:	bf94      	ite	ls
fffd7580:	2200      	movls	r2, #0
fffd7582:	2201      	movhi	r2, #1
fffd7584:	2b0f      	cmp	r3, #15
fffd7586:	bfd8      	it	le
fffd7588:	f042 0201 	orrle.w	r2, r2, #1
fffd758c:	b392      	cbz	r2, fffd75f4 <_malloc_r+0x374>
fffd758e:	4630      	mov	r0, r6
fffd7590:	2400      	movs	r4, #0
fffd7592:	f000 f97d 	bl	fffd7890 <__malloc_unlock>
fffd7596:	e69f      	b.n	fffd72d8 <_malloc_r+0x58>
fffd7598:	4413      	add	r3, r2
fffd759a:	f102 0408 	add.w	r4, r2, #8
fffd759e:	4630      	mov	r0, r6
fffd75a0:	685a      	ldr	r2, [r3, #4]
fffd75a2:	f042 0201 	orr.w	r2, r2, #1
fffd75a6:	605a      	str	r2, [r3, #4]
fffd75a8:	f000 f972 	bl	fffd7890 <__malloc_unlock>
fffd75ac:	4620      	mov	r0, r4
fffd75ae:	b003      	add	sp, #12
fffd75b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd75b4:	09ab      	lsrs	r3, r5, #6
fffd75b6:	f103 0439 	add.w	r4, r3, #57	; 0x39
fffd75ba:	f103 0c38 	add.w	r12, r3, #56	; 0x38
fffd75be:	00e3      	lsls	r3, r4, #3
fffd75c0:	e6b1      	b.n	fffd7326 <_malloc_r+0xa6>
fffd75c2:	2400      	movs	r4, #0
fffd75c4:	230c      	movs	r3, #12
fffd75c6:	4620      	mov	r0, r4
fffd75c8:	6033      	str	r3, [r6, #0]
fffd75ca:	b003      	add	sp, #12
fffd75cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd75d0:	441a      	add	r2, r3
fffd75d2:	e9d3 7502 	ldrd	r7, r5, [r3, #8]
fffd75d6:	4630      	mov	r0, r6
fffd75d8:	f103 0408 	add.w	r4, r3, #8
fffd75dc:	6851      	ldr	r1, [r2, #4]
fffd75de:	60fd      	str	r5, [r7, #12]
fffd75e0:	f041 0101 	orr.w	r1, r1, #1
fffd75e4:	60af      	str	r7, [r5, #8]
fffd75e6:	6051      	str	r1, [r2, #4]
fffd75e8:	f000 f952 	bl	fffd7890 <__malloc_unlock>
fffd75ec:	4620      	mov	r0, r4
fffd75ee:	b003      	add	sp, #12
fffd75f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd75f4:	1962      	adds	r2, r4, r5
fffd75f6:	f043 0301 	orr.w	r3, r3, #1
fffd75fa:	4630      	mov	r0, r6
fffd75fc:	f045 0501 	orr.w	r5, r5, #1
fffd7600:	6065      	str	r5, [r4, #4]
fffd7602:	3408      	adds	r4, #8
fffd7604:	60ba      	str	r2, [r7, #8]
fffd7606:	6053      	str	r3, [r2, #4]
fffd7608:	f000 f942 	bl	fffd7890 <__malloc_unlock>
fffd760c:	4620      	mov	r0, r4
fffd760e:	b003      	add	sp, #12
fffd7610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd7614:	68d3      	ldr	r3, [r2, #12]
fffd7616:	429a      	cmp	r2, r3
fffd7618:	bf08      	it	eq
fffd761a:	3402      	addeq	r4, #2
fffd761c:	f43f ae9b 	beq.w	fffd7356 <_malloc_r+0xd6>
fffd7620:	e649      	b.n	fffd72b6 <_malloc_r+0x36>
fffd7622:	eb02 0e05 	add.w	lr, r2, r5
fffd7626:	4630      	mov	r0, r6
fffd7628:	f045 0501 	orr.w	r5, r5, #1
fffd762c:	6055      	str	r5, [r2, #4]
fffd762e:	e9c7 ee04 	strd	lr, lr, [r7, #16]
fffd7632:	f041 0501 	orr.w	r5, r1, #1
fffd7636:	e9ce cc02 	strd	r12, r12, [lr, #8]
fffd763a:	f102 0408 	add.w	r4, r2, #8
fffd763e:	f8ce 5004 	str.w	r5, [lr, #4]
fffd7642:	50d1      	str	r1, [r2, r3]
fffd7644:	f000 f924 	bl	fffd7890 <__malloc_unlock>
fffd7648:	4620      	mov	r0, r4
fffd764a:	b003      	add	sp, #12
fffd764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd7650:	08ec      	lsrs	r4, r5, #3
fffd7652:	f105 0208 	add.w	r2, r5, #8
fffd7656:	e623      	b.n	fffd72a0 <_malloc_r+0x20>
fffd7658:	f108 0801 	add.w	r8, r8, #1
fffd765c:	f10e 0e08 	add.w	lr, lr, #8
fffd7660:	f018 0f03 	tst.w	r8, #3
fffd7664:	f47f aeb6 	bne.w	fffd73d4 <_malloc_r+0x154>
fffd7668:	e053      	b.n	fffd7712 <_malloc_r+0x492>
fffd766a:	4419      	add	r1, r3
fffd766c:	461c      	mov	r4, r3
fffd766e:	68da      	ldr	r2, [r3, #12]
fffd7670:	4630      	mov	r0, r6
fffd7672:	f854 5f08 	ldr.w	r5, [r4, #8]!
fffd7676:	684b      	ldr	r3, [r1, #4]
fffd7678:	f043 0301 	orr.w	r3, r3, #1
fffd767c:	604b      	str	r3, [r1, #4]
fffd767e:	60ea      	str	r2, [r5, #12]
fffd7680:	6095      	str	r5, [r2, #8]
fffd7682:	f000 f905 	bl	fffd7890 <__malloc_unlock>
fffd7686:	e627      	b.n	fffd72d8 <_malloc_r+0x58>
fffd7688:	0a59      	lsrs	r1, r3, #9
fffd768a:	2904      	cmp	r1, #4
fffd768c:	d930      	bls.n	fffd76f0 <_malloc_r+0x470>
fffd768e:	2914      	cmp	r1, #20
fffd7690:	d864      	bhi.n	fffd775c <_malloc_r+0x4dc>
fffd7692:	f101 005c 	add.w	r0, r1, #92	; 0x5c
fffd7696:	315b      	adds	r1, #91	; 0x5b
fffd7698:	00c0      	lsls	r0, r0, #3
fffd769a:	eb07 0e00 	add.w	lr, r7, r0
fffd769e:	5838      	ldr	r0, [r7, r0]
fffd76a0:	f1ae 0e08 	sub.w	lr, lr, #8
fffd76a4:	4586      	cmp	lr, r0
fffd76a6:	d050      	beq.n	fffd774a <_malloc_r+0x4ca>
fffd76a8:	6841      	ldr	r1, [r0, #4]
fffd76aa:	f021 0103 	bic.w	r1, r1, #3
fffd76ae:	4299      	cmp	r1, r3
fffd76b0:	d902      	bls.n	fffd76b8 <_malloc_r+0x438>
fffd76b2:	6880      	ldr	r0, [r0, #8]
fffd76b4:	4586      	cmp	lr, r0
fffd76b6:	d1f7      	bne.n	fffd76a8 <_malloc_r+0x428>
fffd76b8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
fffd76bc:	687b      	ldr	r3, [r7, #4]
fffd76be:	e9c2 0e02 	strd	r0, lr, [r2, #8]
fffd76c2:	f8ce 2008 	str.w	r2, [lr, #8]
fffd76c6:	60c2      	str	r2, [r0, #12]
fffd76c8:	e673      	b.n	fffd73b2 <_malloc_r+0x132>
fffd76ca:	2b54      	cmp	r3, #84	; 0x54
fffd76cc:	d916      	bls.n	fffd76fc <_malloc_r+0x47c>
fffd76ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
fffd76d2:	d857      	bhi.n	fffd7784 <_malloc_r+0x504>
fffd76d4:	0beb      	lsrs	r3, r5, #15
fffd76d6:	f103 0478 	add.w	r4, r3, #120	; 0x78
fffd76da:	f103 0c77 	add.w	r12, r3, #119	; 0x77
fffd76de:	00e3      	lsls	r3, r4, #3
fffd76e0:	e621      	b.n	fffd7326 <_malloc_r+0xa6>
fffd76e2:	42bc      	cmp	r4, r7
fffd76e4:	d059      	beq.n	fffd779a <_malloc_r+0x51a>
fffd76e6:	68bc      	ldr	r4, [r7, #8]
fffd76e8:	6862      	ldr	r2, [r4, #4]
fffd76ea:	f022 0203 	bic.w	r2, r2, #3
fffd76ee:	e743      	b.n	fffd7578 <_malloc_r+0x2f8>
fffd76f0:	0999      	lsrs	r1, r3, #6
fffd76f2:	f101 0039 	add.w	r0, r1, #57	; 0x39
fffd76f6:	3138      	adds	r1, #56	; 0x38
fffd76f8:	00c0      	lsls	r0, r0, #3
fffd76fa:	e7ce      	b.n	fffd769a <_malloc_r+0x41a>
fffd76fc:	0b2b      	lsrs	r3, r5, #12
fffd76fe:	f103 046f 	add.w	r4, r3, #111	; 0x6f
fffd7702:	f103 0c6e 	add.w	r12, r3, #110	; 0x6e
fffd7706:	00e3      	lsls	r3, r4, #3
fffd7708:	e60d      	b.n	fffd7326 <_malloc_r+0xa6>
fffd770a:	f8d9 9000 	ldr.w	r9, [r9]
fffd770e:	4599      	cmp	r9, r3
fffd7710:	d171      	bne.n	fffd77f6 <_malloc_r+0x576>
fffd7712:	f014 0f03 	tst.w	r4, #3
fffd7716:	f1a9 0308 	sub.w	r3, r9, #8
fffd771a:	f104 34ff 	add.w	r4, r4, #4294967295
fffd771e:	d1f4      	bne.n	fffd770a <_malloc_r+0x48a>
fffd7720:	687b      	ldr	r3, [r7, #4]
fffd7722:	ea23 0300 	bic.w	r3, r3, r0
fffd7726:	607b      	str	r3, [r7, #4]
fffd7728:	0040      	lsls	r0, r0, #1
fffd772a:	4298      	cmp	r0, r3
fffd772c:	bf8c      	ite	hi
fffd772e:	2200      	movhi	r2, #0
fffd7730:	2201      	movls	r2, #1
fffd7732:	2800      	cmp	r0, #0
fffd7734:	bf08      	it	eq
fffd7736:	2200      	moveq	r2, #0
fffd7738:	b91a      	cbnz	r2, fffd7742 <_malloc_r+0x4c2>
fffd773a:	e678      	b.n	fffd742e <_malloc_r+0x1ae>
fffd773c:	0040      	lsls	r0, r0, #1
fffd773e:	f108 0804 	add.w	r8, r8, #4
fffd7742:	4218      	tst	r0, r3
fffd7744:	d0fa      	beq.n	fffd773c <_malloc_r+0x4bc>
fffd7746:	4644      	mov	r4, r8
fffd7748:	e640      	b.n	fffd73cc <_malloc_r+0x14c>
fffd774a:	687b      	ldr	r3, [r7, #4]
fffd774c:	1089      	asrs	r1, r1, #2
fffd774e:	f04f 0801 	mov.w	r8, #1
fffd7752:	fa08 f101 	lsl.w	r1, r8, r1
fffd7756:	430b      	orrs	r3, r1
fffd7758:	607b      	str	r3, [r7, #4]
fffd775a:	e7b0      	b.n	fffd76be <_malloc_r+0x43e>
fffd775c:	2954      	cmp	r1, #84	; 0x54
fffd775e:	d824      	bhi.n	fffd77aa <_malloc_r+0x52a>
fffd7760:	0b19      	lsrs	r1, r3, #12
fffd7762:	f101 006f 	add.w	r0, r1, #111	; 0x6f
fffd7766:	316e      	adds	r1, #110	; 0x6e
fffd7768:	00c0      	lsls	r0, r0, #3
fffd776a:	e796      	b.n	fffd769a <_malloc_r+0x41a>
fffd776c:	f3c0 010b 	ubfx	r1, r0, #0, #12
fffd7770:	2900      	cmp	r1, #0
fffd7772:	f47f ae9e 	bne.w	fffd74b2 <_malloc_r+0x232>
fffd7776:	68b9      	ldr	r1, [r7, #8]
fffd7778:	eb09 0208 	add.w	r2, r9, r8
fffd777c:	f042 0201 	orr.w	r2, r2, #1
fffd7780:	604a      	str	r2, [r1, #4]
fffd7782:	e6e5      	b.n	fffd7550 <_malloc_r+0x2d0>
fffd7784:	f240 5254 	movw	r2, #1364	; 0x554
fffd7788:	4293      	cmp	r3, r2
fffd778a:	d817      	bhi.n	fffd77bc <_malloc_r+0x53c>
fffd778c:	0cab      	lsrs	r3, r5, #18
fffd778e:	f103 047d 	add.w	r4, r3, #125	; 0x7d
fffd7792:	f103 0c7c 	add.w	r12, r3, #124	; 0x7c
fffd7796:	00e3      	lsls	r3, r4, #3
fffd7798:	e5c5      	b.n	fffd7326 <_malloc_r+0xa6>
fffd779a:	f64d 523c 	movw	r2, #56636	; 0xdd3c
fffd779e:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd77a2:	6813      	ldr	r3, [r2, #0]
fffd77a4:	4443      	add	r3, r8
fffd77a6:	6013      	str	r3, [r2, #0]
fffd77a8:	e683      	b.n	fffd74b2 <_malloc_r+0x232>
fffd77aa:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
fffd77ae:	d814      	bhi.n	fffd77da <_malloc_r+0x55a>
fffd77b0:	0bd9      	lsrs	r1, r3, #15
fffd77b2:	f101 0078 	add.w	r0, r1, #120	; 0x78
fffd77b6:	3177      	adds	r1, #119	; 0x77
fffd77b8:	00c0      	lsls	r0, r0, #3
fffd77ba:	e76e      	b.n	fffd769a <_malloc_r+0x41a>
fffd77bc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
fffd77c0:	247f      	movs	r4, #127	; 0x7f
fffd77c2:	f04f 0c7e 	mov.w	r12, #126	; 0x7e
fffd77c6:	e5ae      	b.n	fffd7326 <_malloc_r+0xa6>
fffd77c8:	f104 0108 	add.w	r1, r4, #8
fffd77cc:	4630      	mov	r0, r6
fffd77ce:	9201      	str	r2, [sp, #4]
fffd77d0:	f001 feb6 	bl	fffd9540 <_free_r>
fffd77d4:	9a01      	ldr	r2, [sp, #4]
fffd77d6:	6813      	ldr	r3, [r2, #0]
fffd77d8:	e6ba      	b.n	fffd7550 <_malloc_r+0x2d0>
fffd77da:	f240 5054 	movw	r0, #1364	; 0x554
fffd77de:	4281      	cmp	r1, r0
fffd77e0:	bf9b      	ittet	ls
fffd77e2:	0c99      	lsrls	r1, r3, #18
fffd77e4:	f101 007d 	addls.w	r0, r1, #125	; 0x7d
fffd77e8:	f44f 707e 	movhi.w	r0, #1016	; 0x3f8
fffd77ec:	317c      	addls	r1, #124	; 0x7c
fffd77ee:	bf8c      	ite	hi
fffd77f0:	217e      	movhi	r1, #126	; 0x7e
fffd77f2:	00c0      	lslls	r0, r0, #3
fffd77f4:	e751      	b.n	fffd769a <_malloc_r+0x41a>
fffd77f6:	687b      	ldr	r3, [r7, #4]
fffd77f8:	e796      	b.n	fffd7728 <_malloc_r+0x4a8>
fffd77fa:	bf00      	nop
fffd77fc:	fffdd82c 	.word	0xfffdd82c

fffd7800 <_mbrtowc_r>:
fffd7800:	b5f0      	push	{r4, r5, r6, r7, lr}
fffd7802:	f24d 2488 	movw	r4, #53896	; 0xd288
fffd7806:	f6cf 74fd 	movt	r4, #65533	; 0xfffd
fffd780a:	b083      	sub	sp, #12
fffd780c:	4607      	mov	r7, r0
fffd780e:	6824      	ldr	r4, [r4, #0]
fffd7810:	9d08      	ldr	r5, [sp, #32]
fffd7812:	6b64      	ldr	r4, [r4, #52]	; 0x34
fffd7814:	b192      	cbz	r2, fffd783c <_mbrtowc_r+0x3c>
fffd7816:	f24d 66b8 	movw	r6, #54968	; 0xd6b8
fffd781a:	f6cf 76fd 	movt	r6, #65533	; 0xfffd
fffd781e:	2c00      	cmp	r4, #0
fffd7820:	bf08      	it	eq
fffd7822:	4634      	moveq	r4, r6
fffd7824:	9500      	str	r5, [sp, #0]
fffd7826:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
fffd782a:	47a0      	blx	r4
fffd782c:	1c43      	adds	r3, r0, #1
fffd782e:	bf01      	itttt	eq
fffd7830:	2200      	moveq	r2, #0
fffd7832:	238a      	moveq	r3, #138	; 0x8a
fffd7834:	602a      	streq	r2, [r5, #0]
fffd7836:	603b      	streq	r3, [r7, #0]
fffd7838:	b003      	add	sp, #12
fffd783a:	bdf0      	pop	{r4, r5, r6, r7, pc}
fffd783c:	f24d 63b8 	movw	r3, #54968	; 0xd6b8
fffd7840:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd7844:	2c00      	cmp	r4, #0
fffd7846:	bf08      	it	eq
fffd7848:	461c      	moveq	r4, r3
fffd784a:	9500      	str	r5, [sp, #0]
fffd784c:	4611      	mov	r1, r2
fffd784e:	2301      	movs	r3, #1
fffd7850:	f64c 6288 	movw	r2, #52872	; 0xce88
fffd7854:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
fffd7858:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd785c:	47a0      	blx	r4
fffd785e:	e7e5      	b.n	fffd782c <_mbrtowc_r+0x2c>

fffd7860 <__ascii_mbtowc>:
fffd7860:	b082      	sub	sp, #8
fffd7862:	b151      	cbz	r1, fffd787a <__ascii_mbtowc+0x1a>
fffd7864:	4610      	mov	r0, r2
fffd7866:	b132      	cbz	r2, fffd7876 <__ascii_mbtowc+0x16>
fffd7868:	b14b      	cbz	r3, fffd787e <__ascii_mbtowc+0x1e>
fffd786a:	7813      	ldrb	r3, [r2, #0]
fffd786c:	600b      	str	r3, [r1, #0]
fffd786e:	7812      	ldrb	r2, [r2, #0]
fffd7870:	1c10      	adds	r0, r2, #0
fffd7872:	bf18      	it	ne
fffd7874:	2001      	movne	r0, #1
fffd7876:	b002      	add	sp, #8
fffd7878:	4770      	bx	lr
fffd787a:	a901      	add	r1, sp, #4
fffd787c:	e7f2      	b.n	fffd7864 <__ascii_mbtowc+0x4>
fffd787e:	f06f 0001 	mvn.w	r0, #1
fffd7882:	e7f8      	b.n	fffd7876 <__ascii_mbtowc+0x16>

fffd7884 <__malloc_lock>:
fffd7884:	f64d 50b0 	movw	r0, #56752	; 0xddb0
fffd7888:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
fffd788c:	f002 bb24 	b.w	fffd9ed8 <__retarget_lock_acquire_recursive>

fffd7890 <__malloc_unlock>:
fffd7890:	f64d 50b0 	movw	r0, #56752	; 0xddb0
fffd7894:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
fffd7898:	f002 bb20 	b.w	fffd9edc <__retarget_lock_release_recursive>

fffd789c <realloc>:
fffd789c:	f24d 2388 	movw	r3, #53896	; 0xd288
fffd78a0:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd78a4:	460a      	mov	r2, r1
fffd78a6:	4601      	mov	r1, r0
fffd78a8:	6818      	ldr	r0, [r3, #0]
fffd78aa:	f000 b801 	b.w	fffd78b0 <_realloc_r>
fffd78ae:	bf00      	nop

fffd78b0 <_realloc_r>:
fffd78b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd78b4:	4692      	mov	r10, r2
fffd78b6:	b083      	sub	sp, #12
fffd78b8:	2900      	cmp	r1, #0
fffd78ba:	f000 8082 	beq.w	fffd79c2 <_realloc_r+0x112>
fffd78be:	460c      	mov	r4, r1
fffd78c0:	4680      	mov	r8, r0
fffd78c2:	f7ff ffdf 	bl	fffd7884 <__malloc_lock>
fffd78c6:	f10a 050b 	add.w	r5, r10, #11
fffd78ca:	2d16      	cmp	r5, #22
fffd78cc:	f854 1c04 	ldr.w	r1, [r4, #-4]
fffd78d0:	bf88      	it	hi
fffd78d2:	f025 0507 	bichi.w	r5, r5, #7
fffd78d6:	f1a4 0708 	sub.w	r7, r4, #8
fffd78da:	bf99      	ittee	ls
fffd78dc:	2210      	movls	r2, #16
fffd78de:	2300      	movls	r3, #0
fffd78e0:	0feb      	lsrhi	r3, r5, #31
fffd78e2:	462a      	movhi	r2, r5
fffd78e4:	f021 0603 	bic.w	r6, r1, #3
fffd78e8:	bf98      	it	ls
fffd78ea:	4615      	movls	r5, r2
fffd78ec:	4555      	cmp	r5, r10
fffd78ee:	bf38      	it	cc
fffd78f0:	f043 0301 	orrcc.w	r3, r3, #1
fffd78f4:	2b00      	cmp	r3, #0
fffd78f6:	f040 8139 	bne.w	fffd7b6c <_realloc_r+0x2bc>
fffd78fa:	4296      	cmp	r6, r2
fffd78fc:	eb07 0906 	add.w	r9, r7, r6
fffd7900:	da49      	bge.n	fffd7996 <_realloc_r+0xe6>
fffd7902:	f64d 0b24 	movw	r11, #55332	; 0xd824
fffd7906:	f6cf 7bfd 	movt	r11, #65533	; 0xfffd
fffd790a:	f8db 3008 	ldr.w	r3, [r11, #8]
fffd790e:	454b      	cmp	r3, r9
fffd7910:	d06e      	beq.n	fffd79f0 <_realloc_r+0x140>
fffd7912:	f8d9 0004 	ldr.w	r0, [r9, #4]
fffd7916:	f020 0301 	bic.w	r3, r0, #1
fffd791a:	444b      	add	r3, r9
fffd791c:	685b      	ldr	r3, [r3, #4]
fffd791e:	07db      	lsls	r3, r3, #31
fffd7920:	d52a      	bpl.n	fffd7978 <_realloc_r+0xc8>
fffd7922:	07c8      	lsls	r0, r1, #31
fffd7924:	f140 80e1 	bpl.w	fffd7aea <_realloc_r+0x23a>
fffd7928:	4651      	mov	r1, r10
fffd792a:	4640      	mov	r0, r8
fffd792c:	f7ff fca8 	bl	fffd7280 <_malloc_r>
fffd7930:	4682      	mov	r10, r0
fffd7932:	b1e8      	cbz	r0, fffd7970 <_realloc_r+0xc0>
fffd7934:	f854 3c04 	ldr.w	r3, [r4, #-4]
fffd7938:	f1a0 0208 	sub.w	r2, r0, #8
fffd793c:	f023 0301 	bic.w	r3, r3, #1
fffd7940:	443b      	add	r3, r7
fffd7942:	4293      	cmp	r3, r2
fffd7944:	f000 8123 	beq.w	fffd7b8e <_realloc_r+0x2de>
fffd7948:	1f32      	subs	r2, r6, #4
fffd794a:	2a24      	cmp	r2, #36	; 0x24
fffd794c:	f200 8127 	bhi.w	fffd7b9e <_realloc_r+0x2ee>
fffd7950:	2a13      	cmp	r2, #19
fffd7952:	6821      	ldr	r1, [r4, #0]
fffd7954:	bf9c      	itt	ls
fffd7956:	4603      	movls	r3, r0
fffd7958:	4622      	movls	r2, r4
fffd795a:	f200 810d 	bhi.w	fffd7b78 <_realloc_r+0x2c8>
fffd795e:	6019      	str	r1, [r3, #0]
fffd7960:	6851      	ldr	r1, [r2, #4]
fffd7962:	6059      	str	r1, [r3, #4]
fffd7964:	6892      	ldr	r2, [r2, #8]
fffd7966:	609a      	str	r2, [r3, #8]
fffd7968:	4621      	mov	r1, r4
fffd796a:	4640      	mov	r0, r8
fffd796c:	f001 fde8 	bl	fffd9540 <_free_r>
fffd7970:	4640      	mov	r0, r8
fffd7972:	f7ff ff8d 	bl	fffd7890 <__malloc_unlock>
fffd7976:	e020      	b.n	fffd79ba <_realloc_r+0x10a>
fffd7978:	f020 0003 	bic.w	r0, r0, #3
fffd797c:	1833      	adds	r3, r6, r0
fffd797e:	4293      	cmp	r3, r2
fffd7980:	f2c0 808c 	blt.w	fffd7a9c <_realloc_r+0x1ec>
fffd7984:	f8d9 200c 	ldr.w	r2, [r9, #12]
fffd7988:	461e      	mov	r6, r3
fffd798a:	f8d9 1008 	ldr.w	r1, [r9, #8]
fffd798e:	eb07 0903 	add.w	r9, r7, r3
fffd7992:	60ca      	str	r2, [r1, #12]
fffd7994:	6091      	str	r1, [r2, #8]
fffd7996:	1b72      	subs	r2, r6, r5
fffd7998:	687b      	ldr	r3, [r7, #4]
fffd799a:	2a0f      	cmp	r2, #15
fffd799c:	f003 0301 	and.w	r3, r3, #1
fffd79a0:	d815      	bhi.n	fffd79ce <_realloc_r+0x11e>
fffd79a2:	4333      	orrs	r3, r6
fffd79a4:	607b      	str	r3, [r7, #4]
fffd79a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
fffd79aa:	f043 0301 	orr.w	r3, r3, #1
fffd79ae:	f8c9 3004 	str.w	r3, [r9, #4]
fffd79b2:	4640      	mov	r0, r8
fffd79b4:	46a2      	mov	r10, r4
fffd79b6:	f7ff ff6b 	bl	fffd7890 <__malloc_unlock>
fffd79ba:	4650      	mov	r0, r10
fffd79bc:	b003      	add	sp, #12
fffd79be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd79c2:	4611      	mov	r1, r2
fffd79c4:	b003      	add	sp, #12
fffd79c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd79ca:	f7ff bc59 	b.w	fffd7280 <_malloc_r>
fffd79ce:	1979      	adds	r1, r7, r5
fffd79d0:	432b      	orrs	r3, r5
fffd79d2:	f042 0201 	orr.w	r2, r2, #1
fffd79d6:	607b      	str	r3, [r7, #4]
fffd79d8:	604a      	str	r2, [r1, #4]
fffd79da:	4640      	mov	r0, r8
fffd79dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
fffd79e0:	3108      	adds	r1, #8
fffd79e2:	f043 0301 	orr.w	r3, r3, #1
fffd79e6:	f8c9 3004 	str.w	r3, [r9, #4]
fffd79ea:	f001 fda9 	bl	fffd9540 <_free_r>
fffd79ee:	e7e0      	b.n	fffd79b2 <_realloc_r+0x102>
fffd79f0:	685b      	ldr	r3, [r3, #4]
fffd79f2:	f105 0010 	add.w	r0, r5, #16
fffd79f6:	f023 0903 	bic.w	r9, r3, #3
fffd79fa:	44b1      	add	r9, r6
fffd79fc:	4581      	cmp	r9, r0
fffd79fe:	f280 80d2 	bge.w	fffd7ba6 <_realloc_r+0x2f6>
fffd7a02:	07cb      	lsls	r3, r1, #31
fffd7a04:	d490      	bmi.n	fffd7928 <_realloc_r+0x78>
fffd7a06:	f854 3c08 	ldr.w	r3, [r4, #-8]
fffd7a0a:	1afb      	subs	r3, r7, r3
fffd7a0c:	6859      	ldr	r1, [r3, #4]
fffd7a0e:	f021 0103 	bic.w	r1, r1, #3
fffd7a12:	4489      	add	r9, r1
fffd7a14:	4548      	cmp	r0, r9
fffd7a16:	dc6e      	bgt.n	fffd7af6 <_realloc_r+0x246>
fffd7a18:	469a      	mov	r10, r3
fffd7a1a:	68d9      	ldr	r1, [r3, #12]
fffd7a1c:	f85a 0f08 	ldr.w	r0, [r10, #8]!
fffd7a20:	1f32      	subs	r2, r6, #4
fffd7a22:	2a24      	cmp	r2, #36	; 0x24
fffd7a24:	60c1      	str	r1, [r0, #12]
fffd7a26:	6088      	str	r0, [r1, #8]
fffd7a28:	f200 80e8 	bhi.w	fffd7bfc <_realloc_r+0x34c>
fffd7a2c:	2a13      	cmp	r2, #19
fffd7a2e:	6821      	ldr	r1, [r4, #0]
fffd7a30:	bf98      	it	ls
fffd7a32:	4652      	movls	r2, r10
fffd7a34:	d91c      	bls.n	fffd7a70 <_realloc_r+0x1c0>
fffd7a36:	6099      	str	r1, [r3, #8]
fffd7a38:	2a1b      	cmp	r2, #27
fffd7a3a:	6861      	ldr	r1, [r4, #4]
fffd7a3c:	bf98      	it	ls
fffd7a3e:	f103 0210 	addls.w	r2, r3, #16
fffd7a42:	60d9      	str	r1, [r3, #12]
fffd7a44:	68a1      	ldr	r1, [r4, #8]
fffd7a46:	bf98      	it	ls
fffd7a48:	3408      	addls	r4, #8
fffd7a4a:	d911      	bls.n	fffd7a70 <_realloc_r+0x1c0>
fffd7a4c:	6119      	str	r1, [r3, #16]
fffd7a4e:	2a24      	cmp	r2, #36	; 0x24
fffd7a50:	68e1      	ldr	r1, [r4, #12]
fffd7a52:	bf14      	ite	ne
fffd7a54:	f103 0218 	addne.w	r2, r3, #24
fffd7a58:	f103 0220 	addeq.w	r2, r3, #32
fffd7a5c:	6159      	str	r1, [r3, #20]
fffd7a5e:	6921      	ldr	r1, [r4, #16]
fffd7a60:	bf11      	iteee	ne
fffd7a62:	3410      	addne	r4, #16
fffd7a64:	6199      	streq	r1, [r3, #24]
fffd7a66:	6961      	ldreq	r1, [r4, #20]
fffd7a68:	61d9      	streq	r1, [r3, #28]
fffd7a6a:	bf04      	itt	eq
fffd7a6c:	69a1      	ldreq	r1, [r4, #24]
fffd7a6e:	3418      	addeq	r4, #24
fffd7a70:	6011      	str	r1, [r2, #0]
fffd7a72:	6861      	ldr	r1, [r4, #4]
fffd7a74:	6051      	str	r1, [r2, #4]
fffd7a76:	68a1      	ldr	r1, [r4, #8]
fffd7a78:	6091      	str	r1, [r2, #8]
fffd7a7a:	1959      	adds	r1, r3, r5
fffd7a7c:	eba9 0905 	sub.w	r9, r9, r5
fffd7a80:	f049 0201 	orr.w	r2, r9, #1
fffd7a84:	f8cb 1008 	str.w	r1, [r11, #8]
fffd7a88:	604a      	str	r2, [r1, #4]
fffd7a8a:	4640      	mov	r0, r8
fffd7a8c:	685a      	ldr	r2, [r3, #4]
fffd7a8e:	f002 0201 	and.w	r2, r2, #1
fffd7a92:	4315      	orrs	r5, r2
fffd7a94:	605d      	str	r5, [r3, #4]
fffd7a96:	f7ff fefb 	bl	fffd7890 <__malloc_unlock>
fffd7a9a:	e78e      	b.n	fffd79ba <_realloc_r+0x10a>
fffd7a9c:	07c9      	lsls	r1, r1, #31
fffd7a9e:	f53f af43 	bmi.w	fffd7928 <_realloc_r+0x78>
fffd7aa2:	f854 3c08 	ldr.w	r3, [r4, #-8]
fffd7aa6:	1afb      	subs	r3, r7, r3
fffd7aa8:	6859      	ldr	r1, [r3, #4]
fffd7aaa:	f021 0103 	bic.w	r1, r1, #3
fffd7aae:	4408      	add	r0, r1
fffd7ab0:	eb00 0c06 	add.w	r12, r0, r6
fffd7ab4:	4594      	cmp	r12, r2
fffd7ab6:	db1e      	blt.n	fffd7af6 <_realloc_r+0x246>
fffd7ab8:	f8d9 100c 	ldr.w	r1, [r9, #12]
fffd7abc:	469a      	mov	r10, r3
fffd7abe:	f8d9 0008 	ldr.w	r0, [r9, #8]
fffd7ac2:	1f32      	subs	r2, r6, #4
fffd7ac4:	2a24      	cmp	r2, #36	; 0x24
fffd7ac6:	eb03 090c 	add.w	r9, r3, r12
fffd7aca:	60c1      	str	r1, [r0, #12]
fffd7acc:	6088      	str	r0, [r1, #8]
fffd7ace:	68d9      	ldr	r1, [r3, #12]
fffd7ad0:	f85a 0f08 	ldr.w	r0, [r10, #8]!
fffd7ad4:	60c1      	str	r1, [r0, #12]
fffd7ad6:	6088      	str	r0, [r1, #8]
fffd7ad8:	d91d      	bls.n	fffd7b16 <_realloc_r+0x266>
fffd7ada:	4621      	mov	r1, r4
fffd7adc:	4650      	mov	r0, r10
fffd7ade:	4666      	mov	r6, r12
fffd7ae0:	461f      	mov	r7, r3
fffd7ae2:	4654      	mov	r4, r10
fffd7ae4:	f002 fa72 	bl	fffd9fcc <memmove>
fffd7ae8:	e755      	b.n	fffd7996 <_realloc_r+0xe6>
fffd7aea:	f854 3c08 	ldr.w	r3, [r4, #-8]
fffd7aee:	1afb      	subs	r3, r7, r3
fffd7af0:	6859      	ldr	r1, [r3, #4]
fffd7af2:	f021 0103 	bic.w	r1, r1, #3
fffd7af6:	eb06 0c01 	add.w	r12, r6, r1
fffd7afa:	4594      	cmp	r12, r2
fffd7afc:	f6ff af14 	blt.w	fffd7928 <_realloc_r+0x78>
fffd7b00:	469a      	mov	r10, r3
fffd7b02:	68d9      	ldr	r1, [r3, #12]
fffd7b04:	f85a 0f08 	ldr.w	r0, [r10, #8]!
fffd7b08:	1f32      	subs	r2, r6, #4
fffd7b0a:	2a24      	cmp	r2, #36	; 0x24
fffd7b0c:	eb03 090c 	add.w	r9, r3, r12
fffd7b10:	60c1      	str	r1, [r0, #12]
fffd7b12:	6088      	str	r0, [r1, #8]
fffd7b14:	d8e1      	bhi.n	fffd7ada <_realloc_r+0x22a>
fffd7b16:	2a13      	cmp	r2, #19
fffd7b18:	6821      	ldr	r1, [r4, #0]
fffd7b1a:	bf98      	it	ls
fffd7b1c:	4652      	movls	r2, r10
fffd7b1e:	d91c      	bls.n	fffd7b5a <_realloc_r+0x2aa>
fffd7b20:	6099      	str	r1, [r3, #8]
fffd7b22:	2a1b      	cmp	r2, #27
fffd7b24:	6861      	ldr	r1, [r4, #4]
fffd7b26:	bf98      	it	ls
fffd7b28:	f103 0210 	addls.w	r2, r3, #16
fffd7b2c:	60d9      	str	r1, [r3, #12]
fffd7b2e:	68a1      	ldr	r1, [r4, #8]
fffd7b30:	bf98      	it	ls
fffd7b32:	3408      	addls	r4, #8
fffd7b34:	d911      	bls.n	fffd7b5a <_realloc_r+0x2aa>
fffd7b36:	6119      	str	r1, [r3, #16]
fffd7b38:	2a24      	cmp	r2, #36	; 0x24
fffd7b3a:	68e1      	ldr	r1, [r4, #12]
fffd7b3c:	bf14      	ite	ne
fffd7b3e:	f103 0218 	addne.w	r2, r3, #24
fffd7b42:	f103 0220 	addeq.w	r2, r3, #32
fffd7b46:	6159      	str	r1, [r3, #20]
fffd7b48:	6921      	ldr	r1, [r4, #16]
fffd7b4a:	bf11      	iteee	ne
fffd7b4c:	3410      	addne	r4, #16
fffd7b4e:	6199      	streq	r1, [r3, #24]
fffd7b50:	6961      	ldreq	r1, [r4, #20]
fffd7b52:	61d9      	streq	r1, [r3, #28]
fffd7b54:	bf04      	itt	eq
fffd7b56:	69a1      	ldreq	r1, [r4, #24]
fffd7b58:	3418      	addeq	r4, #24
fffd7b5a:	6011      	str	r1, [r2, #0]
fffd7b5c:	461f      	mov	r7, r3
fffd7b5e:	6861      	ldr	r1, [r4, #4]
fffd7b60:	4666      	mov	r6, r12
fffd7b62:	6051      	str	r1, [r2, #4]
fffd7b64:	68a3      	ldr	r3, [r4, #8]
fffd7b66:	4654      	mov	r4, r10
fffd7b68:	6093      	str	r3, [r2, #8]
fffd7b6a:	e714      	b.n	fffd7996 <_realloc_r+0xe6>
fffd7b6c:	230c      	movs	r3, #12
fffd7b6e:	f04f 0a00 	mov.w	r10, #0
fffd7b72:	f8c8 3000 	str.w	r3, [r8]
fffd7b76:	e720      	b.n	fffd79ba <_realloc_r+0x10a>
fffd7b78:	6001      	str	r1, [r0, #0]
fffd7b7a:	2a1b      	cmp	r2, #27
fffd7b7c:	6863      	ldr	r3, [r4, #4]
fffd7b7e:	6043      	str	r3, [r0, #4]
fffd7b80:	d825      	bhi.n	fffd7bce <_realloc_r+0x31e>
fffd7b82:	f104 0208 	add.w	r2, r4, #8
fffd7b86:	f100 0308 	add.w	r3, r0, #8
fffd7b8a:	68a1      	ldr	r1, [r4, #8]
fffd7b8c:	e6e7      	b.n	fffd795e <_realloc_r+0xae>
fffd7b8e:	f850 3c04 	ldr.w	r3, [r0, #-4]
fffd7b92:	f023 0303 	bic.w	r3, r3, #3
fffd7b96:	441e      	add	r6, r3
fffd7b98:	eb07 0906 	add.w	r9, r7, r6
fffd7b9c:	e6fb      	b.n	fffd7996 <_realloc_r+0xe6>
fffd7b9e:	4621      	mov	r1, r4
fffd7ba0:	f002 fa14 	bl	fffd9fcc <memmove>
fffd7ba4:	e6e0      	b.n	fffd7968 <_realloc_r+0xb8>
fffd7ba6:	442f      	add	r7, r5
fffd7ba8:	eba9 0905 	sub.w	r9, r9, r5
fffd7bac:	f8cb 7008 	str.w	r7, [r11, #8]
fffd7bb0:	f049 0301 	orr.w	r3, r9, #1
fffd7bb4:	607b      	str	r3, [r7, #4]
fffd7bb6:	4640      	mov	r0, r8
fffd7bb8:	f854 3c04 	ldr.w	r3, [r4, #-4]
fffd7bbc:	46a2      	mov	r10, r4
fffd7bbe:	f003 0301 	and.w	r3, r3, #1
fffd7bc2:	431d      	orrs	r5, r3
fffd7bc4:	f844 5c04 	str.w	r5, [r4, #-4]
fffd7bc8:	f7ff fe62 	bl	fffd7890 <__malloc_unlock>
fffd7bcc:	e6f5      	b.n	fffd79ba <_realloc_r+0x10a>
fffd7bce:	68a3      	ldr	r3, [r4, #8]
fffd7bd0:	2a24      	cmp	r2, #36	; 0x24
fffd7bd2:	bf14      	ite	ne
fffd7bd4:	f104 0210 	addne.w	r2, r4, #16
fffd7bd8:	f104 0218 	addeq.w	r2, r4, #24
fffd7bdc:	6083      	str	r3, [r0, #8]
fffd7bde:	68e3      	ldr	r3, [r4, #12]
fffd7be0:	60c3      	str	r3, [r0, #12]
fffd7be2:	bf13      	iteet	ne
fffd7be4:	f100 0310 	addne.w	r3, r0, #16
fffd7be8:	6921      	ldreq	r1, [r4, #16]
fffd7bea:	f100 0318 	addeq.w	r3, r0, #24
fffd7bee:	6921      	ldrne	r1, [r4, #16]
fffd7bf0:	bf01      	itttt	eq
fffd7bf2:	6101      	streq	r1, [r0, #16]
fffd7bf4:	6961      	ldreq	r1, [r4, #20]
fffd7bf6:	6141      	streq	r1, [r0, #20]
fffd7bf8:	69a1      	ldreq	r1, [r4, #24]
fffd7bfa:	e6b0      	b.n	fffd795e <_realloc_r+0xae>
fffd7bfc:	4621      	mov	r1, r4
fffd7bfe:	4650      	mov	r0, r10
fffd7c00:	9301      	str	r3, [sp, #4]
fffd7c02:	f002 f9e3 	bl	fffd9fcc <memmove>
fffd7c06:	9b01      	ldr	r3, [sp, #4]
fffd7c08:	e737      	b.n	fffd7a7a <_realloc_r+0x1ca>
fffd7c0a:	bf00      	nop

fffd7c0c <_sbrk_r>:
fffd7c0c:	b538      	push	{r3, r4, r5, lr}
fffd7c0e:	f64d 549c 	movw	r4, #56732	; 0xdd9c
fffd7c12:	f6cf 74fd 	movt	r4, #65533	; 0xfffd
fffd7c16:	4605      	mov	r5, r0
fffd7c18:	4608      	mov	r0, r1
fffd7c1a:	2300      	movs	r3, #0
fffd7c1c:	6023      	str	r3, [r4, #0]
fffd7c1e:	f7fc ed30 	blx	fffd4680 <_sbrk>
fffd7c22:	1c43      	adds	r3, r0, #1
fffd7c24:	d000      	beq.n	fffd7c28 <_sbrk_r+0x1c>
fffd7c26:	bd38      	pop	{r3, r4, r5, pc}
fffd7c28:	6823      	ldr	r3, [r4, #0]
fffd7c2a:	2b00      	cmp	r3, #0
fffd7c2c:	d0fb      	beq.n	fffd7c26 <_sbrk_r+0x1a>
fffd7c2e:	602b      	str	r3, [r5, #0]
fffd7c30:	bd38      	pop	{r3, r4, r5, pc}
fffd7c32:	bf00      	nop

fffd7c34 <__sccl>:
fffd7c34:	b4f0      	push	{r4, r5, r6, r7}
fffd7c36:	4606      	mov	r6, r0
fffd7c38:	780c      	ldrb	r4, [r1, #0]
fffd7c3a:	1e73      	subs	r3, r6, #1
fffd7c3c:	2c5e      	cmp	r4, #94	; 0x5e
fffd7c3e:	bf15      	itete	ne
fffd7c40:	1c48      	addne	r0, r1, #1
fffd7c42:	1c88      	addeq	r0, r1, #2
fffd7c44:	2200      	movne	r2, #0
fffd7c46:	784c      	ldrbeq	r4, [r1, #1]
fffd7c48:	bf08      	it	eq
fffd7c4a:	2201      	moveq	r2, #1
fffd7c4c:	f106 01ff 	add.w	r1, r6, #255	; 0xff
fffd7c50:	4615      	mov	r5, r2
fffd7c52:	f803 2f01 	strb.w	r2, [r3, #1]!
fffd7c56:	428b      	cmp	r3, r1
fffd7c58:	d1fb      	bne.n	fffd7c52 <__sccl+0x1e>
fffd7c5a:	f085 0301 	eor.w	r3, r5, #1
fffd7c5e:	b174      	cbz	r4, fffd7c7e <__sccl+0x4a>
fffd7c60:	1c41      	adds	r1, r0, #1
fffd7c62:	5533      	strb	r3, [r6, r4]
fffd7c64:	f811 2c01 	ldrb.w	r2, [r1, #-1]
fffd7c68:	2a2d      	cmp	r2, #45	; 0x2d
fffd7c6a:	d00b      	beq.n	fffd7c84 <__sccl+0x50>
fffd7c6c:	2a5d      	cmp	r2, #93	; 0x5d
fffd7c6e:	d003      	beq.n	fffd7c78 <__sccl+0x44>
fffd7c70:	b11a      	cbz	r2, fffd7c7a <__sccl+0x46>
fffd7c72:	4614      	mov	r4, r2
fffd7c74:	4608      	mov	r0, r1
fffd7c76:	e7f3      	b.n	fffd7c60 <__sccl+0x2c>
fffd7c78:	4608      	mov	r0, r1
fffd7c7a:	bcf0      	pop	{r4, r5, r6, r7}
fffd7c7c:	4770      	bx	lr
fffd7c7e:	3801      	subs	r0, #1
fffd7c80:	bcf0      	pop	{r4, r5, r6, r7}
fffd7c82:	4770      	bx	lr
fffd7c84:	7845      	ldrb	r5, [r0, #1]
fffd7c86:	42ac      	cmp	r4, r5
fffd7c88:	bfd4      	ite	le
fffd7c8a:	2700      	movle	r7, #0
fffd7c8c:	2701      	movgt	r7, #1
fffd7c8e:	2d5d      	cmp	r5, #93	; 0x5d
fffd7c90:	bf08      	it	eq
fffd7c92:	f047 0701 	orreq.w	r7, r7, #1
fffd7c96:	2f00      	cmp	r7, #0
fffd7c98:	d1eb      	bne.n	fffd7c72 <__sccl+0x3e>
fffd7c9a:	3002      	adds	r0, #2
fffd7c9c:	1932      	adds	r2, r6, r4
fffd7c9e:	3401      	adds	r4, #1
fffd7ca0:	f802 3f01 	strb.w	r3, [r2, #1]!
fffd7ca4:	42a5      	cmp	r5, r4
fffd7ca6:	dcfa      	bgt.n	fffd7c9e <__sccl+0x6a>
fffd7ca8:	3102      	adds	r1, #2
fffd7caa:	e7db      	b.n	fffd7c64 <__sccl+0x30>

fffd7cac <nanf>:
fffd7cac:	2000      	movs	r0, #0
fffd7cae:	f6c7 70c0 	movt	r0, #32704	; 0x7fc0
fffd7cb2:	4770      	bx	lr

fffd7cb4 <sulp>:
fffd7cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
fffd7cb8:	460f      	mov	r7, r1
fffd7cba:	4690      	mov	r8, r2
fffd7cbc:	f002 fcfa 	bl	fffda6b4 <__ulp>
fffd7cc0:	4604      	mov	r4, r0
fffd7cc2:	460d      	mov	r5, r1
fffd7cc4:	f1b8 0f00 	cmp.w	r8, #0
fffd7cc8:	d011      	beq.n	fffd7cee <sulp+0x3a>
fffd7cca:	f3c7 530a 	ubfx	r3, r7, #20, #11
fffd7cce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
fffd7cd2:	2b00      	cmp	r3, #0
fffd7cd4:	dd0b      	ble.n	fffd7cee <sulp+0x3a>
fffd7cd6:	051b      	lsls	r3, r3, #20
fffd7cd8:	2400      	movs	r4, #0
fffd7cda:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
fffd7cde:	4622      	mov	r2, r4
fffd7ce0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
fffd7ce4:	462b      	mov	r3, r5
fffd7ce6:	f003 f877 	bl	fffdadd8 <__aeabi_dmul>
fffd7cea:	4604      	mov	r4, r0
fffd7cec:	460d      	mov	r5, r1
fffd7cee:	4620      	mov	r0, r4
fffd7cf0:	4629      	mov	r1, r5
fffd7cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

fffd7cf8 <_strtod_l>:
fffd7cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd7cfc:	b0a3      	sub	sp, #140	; 0x8c
fffd7cfe:	460e      	mov	r6, r1
fffd7d00:	461c      	mov	r4, r3
fffd7d02:	9007      	str	r0, [sp, #28]
fffd7d04:	4618      	mov	r0, r3
fffd7d06:	9206      	str	r2, [sp, #24]
fffd7d08:	2300      	movs	r3, #0
fffd7d0a:	931e      	str	r3, [sp, #120]	; 0x78
fffd7d0c:	f7ff fa96 	bl	fffd723c <__localeconv_l>
fffd7d10:	2300      	movs	r3, #0
fffd7d12:	2200      	movs	r2, #0
fffd7d14:	e9cd 2304 	strd	r2, r3, [sp, #16]
fffd7d18:	4680      	mov	r8, r0
fffd7d1a:	6800      	ldr	r0, [r0, #0]
fffd7d1c:	f7fc ec9c 	blx	fffd4658 <strlen>
fffd7d20:	4633      	mov	r3, r6
fffd7d22:	961d      	str	r6, [sp, #116]	; 0x74
fffd7d24:	4682      	mov	r10, r0
fffd7d26:	461a      	mov	r2, r3
fffd7d28:	f813 7b01 	ldrb.w	r7, [r3], #1
fffd7d2c:	2f2d      	cmp	r7, #45	; 0x2d
fffd7d2e:	f200 811b 	bhi.w	fffd7f68 <_strtod_l+0x270>
fffd7d32:	e8df f017 	tbh	[pc, r7, lsl #1]
fffd7d36:	007f      	.short	0x007f
fffd7d38:	01190119 	.word	0x01190119
fffd7d3c:	01190119 	.word	0x01190119
fffd7d40:	01190119 	.word	0x01190119
fffd7d44:	01190119 	.word	0x01190119
fffd7d48:	00db00db 	.word	0x00db00db
fffd7d4c:	00db00db 	.word	0x00db00db
fffd7d50:	011900db 	.word	0x011900db
fffd7d54:	01190119 	.word	0x01190119
fffd7d58:	01190119 	.word	0x01190119
fffd7d5c:	01190119 	.word	0x01190119
fffd7d60:	01190119 	.word	0x01190119
fffd7d64:	01190119 	.word	0x01190119
fffd7d68:	01190119 	.word	0x01190119
fffd7d6c:	01190119 	.word	0x01190119
fffd7d70:	01190119 	.word	0x01190119
fffd7d74:	00db0119 	.word	0x00db0119
fffd7d78:	01190119 	.word	0x01190119
fffd7d7c:	01190119 	.word	0x01190119
fffd7d80:	01190119 	.word	0x01190119
fffd7d84:	01190119 	.word	0x01190119
fffd7d88:	01190119 	.word	0x01190119
fffd7d8c:	0119008c 	.word	0x0119008c
fffd7d90:	00d8      	.short	0x00d8
fffd7d92:	2300      	movs	r3, #0
fffd7d94:	930c      	str	r3, [sp, #48]	; 0x30
fffd7d96:	1cb3      	adds	r3, r6, #2
fffd7d98:	931d      	str	r3, [sp, #116]	; 0x74
fffd7d9a:	78b3      	ldrb	r3, [r6, #2]
fffd7d9c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
fffd7da0:	2809      	cmp	r0, #9
fffd7da2:	f200 81de 	bhi.w	fffd8162 <_strtod_l+0x46a>
fffd7da6:	2b30      	cmp	r3, #48	; 0x30
fffd7da8:	d105      	bne.n	fffd7db6 <_strtod_l+0xbe>
fffd7daa:	981d      	ldr	r0, [sp, #116]	; 0x74
fffd7dac:	3001      	adds	r0, #1
fffd7dae:	901d      	str	r0, [sp, #116]	; 0x74
fffd7db0:	7803      	ldrb	r3, [r0, #0]
fffd7db2:	2b30      	cmp	r3, #48	; 0x30
fffd7db4:	d0fa      	beq.n	fffd7dac <_strtod_l+0xb4>
fffd7db6:	f1a3 0031 	sub.w	r0, r3, #49	; 0x31
fffd7dba:	2808      	cmp	r0, #8
fffd7dbc:	f200 80ed 	bhi.w	fffd7f9a <_strtod_l+0x2a2>
fffd7dc0:	981d      	ldr	r0, [sp, #116]	; 0x74
fffd7dc2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
fffd7dc6:	46ba      	mov	r10, r7
fffd7dc8:	4603      	mov	r3, r0
fffd7dca:	900a      	str	r0, [sp, #40]	; 0x28
fffd7dcc:	3001      	adds	r0, #1
fffd7dce:	901d      	str	r0, [sp, #116]	; 0x74
fffd7dd0:	785b      	ldrb	r3, [r3, #1]
fffd7dd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
fffd7dd6:	f1be 0f09 	cmp.w	lr, #9
fffd7dda:	d80e      	bhi.n	fffd7dfa <_strtod_l+0x102>
fffd7ddc:	f04f 0a0a 	mov.w	r10, #10
fffd7de0:	3001      	adds	r0, #1
fffd7de2:	901d      	str	r0, [sp, #116]	; 0x74
fffd7de4:	fb0a 3707 	mla	r7, r10, r7, r3
fffd7de8:	7803      	ldrb	r3, [r0, #0]
fffd7dea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
fffd7dee:	f1be 0f09 	cmp.w	lr, #9
fffd7df2:	f1a7 0730 	sub.w	r7, r7, #48	; 0x30
fffd7df6:	d9f3      	bls.n	fffd7de0 <_strtod_l+0xe8>
fffd7df8:	46ba      	mov	r10, r7
fffd7dfa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
fffd7dfc:	f644 6e1f 	movw	lr, #19999	; 0x4e1f
fffd7e00:	f8cd a028 	str.w	r10, [sp, #40]	; 0x28
fffd7e04:	1bc0      	subs	r0, r0, r7
fffd7e06:	4607      	mov	r7, r0
fffd7e08:	980c      	ldr	r0, [sp, #48]	; 0x30
fffd7e0a:	45f2      	cmp	r10, lr
fffd7e0c:	bfd8      	it	le
fffd7e0e:	2f08      	cmple	r7, #8
fffd7e10:	4657      	mov	r7, r10
fffd7e12:	bfc8      	it	gt
fffd7e14:	4677      	movgt	r7, lr
fffd7e16:	46ba      	mov	r10, r7
fffd7e18:	b108      	cbz	r0, fffd7e1e <_strtod_l+0x126>
fffd7e1a:	4278      	negs	r0, r7
fffd7e1c:	4682      	mov	r10, r0
fffd7e1e:	2c00      	cmp	r4, #0
fffd7e20:	f040 80c0 	bne.w	fffd7fa4 <_strtod_l+0x2ac>
fffd7e24:	9909      	ldr	r1, [sp, #36]	; 0x24
fffd7e26:	430a      	orrs	r2, r1
fffd7e28:	f040 80fa 	bne.w	fffd8020 <_strtod_l+0x328>
fffd7e2c:	f1bc 0f00 	cmp.w	r12, #0
fffd7e30:	f000 81a9 	beq.w	fffd8186 <_strtod_l+0x48e>
fffd7e34:	9b06      	ldr	r3, [sp, #24]
fffd7e36:	b10b      	cbz	r3, fffd7e3c <_strtod_l+0x144>
fffd7e38:	9b06      	ldr	r3, [sp, #24]
fffd7e3a:	601e      	str	r6, [r3, #0]
fffd7e3c:	f04f 0a00 	mov.w	r10, #0
fffd7e40:	f04f 0b00 	mov.w	r11, #0
fffd7e44:	4650      	mov	r0, r10
fffd7e46:	4659      	mov	r1, r11
fffd7e48:	b023      	add	sp, #140	; 0x8c
fffd7e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd7e4e:	2300      	movs	r3, #0
fffd7e50:	9308      	str	r3, [sp, #32]
fffd7e52:	1c55      	adds	r5, r2, #1
fffd7e54:	951d      	str	r5, [sp, #116]	; 0x74
fffd7e56:	7857      	ldrb	r7, [r2, #1]
fffd7e58:	2f00      	cmp	r7, #0
fffd7e5a:	d0eb      	beq.n	fffd7e34 <_strtod_l+0x13c>
fffd7e5c:	2f30      	cmp	r7, #48	; 0x30
fffd7e5e:	bf1c      	itt	ne
fffd7e60:	2300      	movne	r3, #0
fffd7e62:	9309      	strne	r3, [sp, #36]	; 0x24
fffd7e64:	f000 808a 	beq.w	fffd7f7c <_strtod_l+0x284>
fffd7e68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
fffd7e6c:	f8d8 1000 	ldr.w	r1, [r8]
fffd7e70:	2b09      	cmp	r3, #9
fffd7e72:	f200 8154 	bhi.w	fffd811e <_strtod_l+0x426>
fffd7e76:	f04f 0800 	mov.w	r8, #0
fffd7e7a:	4628      	mov	r0, r5
fffd7e7c:	46c1      	mov	r9, r8
fffd7e7e:	4644      	mov	r4, r8
fffd7e80:	220a      	movs	r2, #10
fffd7e82:	3001      	adds	r0, #1
fffd7e84:	2c08      	cmp	r4, #8
fffd7e86:	901d      	str	r0, [sp, #116]	; 0x74
fffd7e88:	f104 0401 	add.w	r4, r4, #1
fffd7e8c:	7807      	ldrb	r7, [r0, #0]
fffd7e8e:	bfd4      	ite	le
fffd7e90:	fb02 3909 	mlale	r9, r2, r9, r3
fffd7e94:	fb02 3808 	mlagt	r8, r2, r8, r3
fffd7e98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
fffd7e9c:	2b09      	cmp	r3, #9
fffd7e9e:	d9f0      	bls.n	fffd7e82 <_strtod_l+0x18a>
fffd7ea0:	4652      	mov	r2, r10
fffd7ea2:	f002 fd63 	bl	fffda96c <strncmp>
fffd7ea6:	4601      	mov	r1, r0
fffd7ea8:	b310      	cbz	r0, fffd7ef0 <_strtod_l+0x1f8>
fffd7eaa:	2200      	movs	r2, #0
fffd7eac:	463b      	mov	r3, r7
fffd7eae:	4611      	mov	r1, r2
fffd7eb0:	4694      	mov	r12, r2
fffd7eb2:	46a3      	mov	r11, r4
fffd7eb4:	f023 0020 	bic.w	r0, r3, #32
fffd7eb8:	2845      	cmp	r0, #69	; 0x45
fffd7eba:	d16e      	bne.n	fffd7f9a <_strtod_l+0x2a2>
fffd7ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
fffd7ebe:	ea44 0302 	orr.w	r3, r4, r2
fffd7ec2:	4303      	orrs	r3, r0
fffd7ec4:	d0b6      	beq.n	fffd7e34 <_strtod_l+0x13c>
fffd7ec6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
fffd7ec8:	1c73      	adds	r3, r6, #1
fffd7eca:	931d      	str	r3, [sp, #116]	; 0x74
fffd7ecc:	7873      	ldrb	r3, [r6, #1]
fffd7ece:	2b2b      	cmp	r3, #43	; 0x2b
fffd7ed0:	f43f af5f 	beq.w	fffd7d92 <_strtod_l+0x9a>
fffd7ed4:	2b2d      	cmp	r3, #45	; 0x2d
fffd7ed6:	bf15      	itete	ne
fffd7ed8:	2000      	movne	r0, #0
fffd7eda:	2301      	moveq	r3, #1
fffd7edc:	900c      	strne	r0, [sp, #48]	; 0x30
fffd7ede:	930c      	streq	r3, [sp, #48]	; 0x30
fffd7ee0:	f43f af59 	beq.w	fffd7d96 <_strtod_l+0x9e>
fffd7ee4:	e75a      	b.n	fffd7d9c <_strtod_l+0xa4>
fffd7ee6:	2301      	movs	r3, #1
fffd7ee8:	9308      	str	r3, [sp, #32]
fffd7eea:	e7b2      	b.n	fffd7e52 <_strtod_l+0x15a>
fffd7eec:	931d      	str	r3, [sp, #116]	; 0x74
fffd7eee:	e71a      	b.n	fffd7d26 <_strtod_l+0x2e>
fffd7ef0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
fffd7ef2:	46a3      	mov	r11, r4
fffd7ef4:	eb03 020a 	add.w	r2, r3, r10
fffd7ef8:	921d      	str	r2, [sp, #116]	; 0x74
fffd7efa:	f813 300a 	ldrb.w	r3, [r3, r10]
fffd7efe:	4602      	mov	r2, r0
fffd7f00:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
fffd7f04:	2809      	cmp	r0, #9
fffd7f06:	f200 80c2 	bhi.w	fffd808e <_strtod_l+0x396>
fffd7f0a:	1c53      	adds	r3, r2, #1
fffd7f0c:	4686      	mov	lr, r0
fffd7f0e:	f8dd c074 	ldr.w	r12, [sp, #116]	; 0x74
fffd7f12:	2800      	cmp	r0, #0
fffd7f14:	f000 8696 	beq.w	fffd8c44 <_strtod_l+0xf4c>
fffd7f18:	2b01      	cmp	r3, #1
fffd7f1a:	4419      	add	r1, r3
fffd7f1c:	bf04      	itt	eq
fffd7f1e:	4622      	moveq	r2, r4
fffd7f20:	3401      	addeq	r4, #1
fffd7f22:	d010      	beq.n	fffd7f46 <_strtod_l+0x24e>
fffd7f24:	4422      	add	r2, r4
fffd7f26:	270a      	movs	r7, #10
fffd7f28:	2c08      	cmp	r4, #8
fffd7f2a:	f104 0301 	add.w	r3, r4, #1
fffd7f2e:	bfd8      	it	le
fffd7f30:	fb07 f909 	mulle.w	r9, r7, r9
fffd7f34:	dd03      	ble.n	fffd7f3e <_strtod_l+0x246>
fffd7f36:	2b10      	cmp	r3, #16
fffd7f38:	bfd8      	it	le
fffd7f3a:	fb07 f808 	mulle.w	r8, r7, r8
fffd7f3e:	429a      	cmp	r2, r3
fffd7f40:	461c      	mov	r4, r3
fffd7f42:	d1f1      	bne.n	fffd7f28 <_strtod_l+0x230>
fffd7f44:	1c54      	adds	r4, r2, #1
fffd7f46:	2a08      	cmp	r2, #8
fffd7f48:	f340 844e 	ble.w	fffd87e8 <_strtod_l+0xaf0>
fffd7f4c:	2c10      	cmp	r4, #16
fffd7f4e:	bfc8      	it	gt
fffd7f50:	2200      	movgt	r2, #0
fffd7f52:	dc03      	bgt.n	fffd7f5c <_strtod_l+0x264>
fffd7f54:	230a      	movs	r3, #10
fffd7f56:	2200      	movs	r2, #0
fffd7f58:	fb03 0808 	mla	r8, r3, r8, r0
fffd7f5c:	f10c 0301 	add.w	r3, r12, #1
fffd7f60:	931d      	str	r3, [sp, #116]	; 0x74
fffd7f62:	f89c 3001 	ldrb.w	r3, [r12, #1]
fffd7f66:	e7cb      	b.n	fffd7f00 <_strtod_l+0x208>
fffd7f68:	2f30      	cmp	r7, #48	; 0x30
fffd7f6a:	f04f 0300 	mov.w	r3, #0
fffd7f6e:	4615      	mov	r5, r2
fffd7f70:	9308      	str	r3, [sp, #32]
fffd7f72:	bf1c      	itt	ne
fffd7f74:	2300      	movne	r3, #0
fffd7f76:	9309      	strne	r3, [sp, #36]	; 0x24
fffd7f78:	f47f af76 	bne.w	fffd7e68 <_strtod_l+0x170>
fffd7f7c:	786b      	ldrb	r3, [r5, #1]
fffd7f7e:	2b58      	cmp	r3, #88	; 0x58
fffd7f80:	d03b      	beq.n	fffd7ffa <_strtod_l+0x302>
fffd7f82:	2b78      	cmp	r3, #120	; 0x78
fffd7f84:	d039      	beq.n	fffd7ffa <_strtod_l+0x302>
fffd7f86:	3501      	adds	r5, #1
fffd7f88:	951d      	str	r5, [sp, #116]	; 0x74
fffd7f8a:	782f      	ldrb	r7, [r5, #0]
fffd7f8c:	2f30      	cmp	r7, #48	; 0x30
fffd7f8e:	d0fa      	beq.n	fffd7f86 <_strtod_l+0x28e>
fffd7f90:	2f00      	cmp	r7, #0
fffd7f92:	d045      	beq.n	fffd8020 <_strtod_l+0x328>
fffd7f94:	2301      	movs	r3, #1
fffd7f96:	9309      	str	r3, [sp, #36]	; 0x24
fffd7f98:	e766      	b.n	fffd7e68 <_strtod_l+0x170>
fffd7f9a:	2000      	movs	r0, #0
fffd7f9c:	4682      	mov	r10, r0
fffd7f9e:	2c00      	cmp	r4, #0
fffd7fa0:	f43f af40 	beq.w	fffd7e24 <_strtod_l+0x12c>
fffd7fa4:	4648      	mov	r0, r9
fffd7fa6:	4653      	mov	r3, r10
fffd7fa8:	1a5b      	subs	r3, r3, r1
fffd7faa:	930d      	str	r3, [sp, #52]	; 0x34
fffd7fac:	f002 fe9a 	bl	fffdace4 <__aeabi_ui2d>
fffd7fb0:	f1bb 0f00 	cmp.w	r11, #0
fffd7fb4:	bf08      	it	eq
fffd7fb6:	46a3      	moveq	r11, r4
fffd7fb8:	2c10      	cmp	r4, #16
fffd7fba:	46a2      	mov	r10, r4
fffd7fbc:	bfa8      	it	ge
fffd7fbe:	f04f 0a10 	movge.w	r10, #16
fffd7fc2:	2c09      	cmp	r4, #9
fffd7fc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
fffd7fc8:	dc64      	bgt.n	fffd8094 <_strtod_l+0x39c>
fffd7fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
fffd7fcc:	2b00      	cmp	r3, #0
fffd7fce:	d05b      	beq.n	fffd8088 <_strtod_l+0x390>
fffd7fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
fffd7fd2:	f340 8463 	ble.w	fffd889c <_strtod_l+0xba4>
fffd7fd6:	2a16      	cmp	r2, #22
fffd7fd8:	f300 8474 	bgt.w	fffd88c4 <_strtod_l+0xbcc>
fffd7fdc:	f24d 1350 	movw	r3, #53584	; 0xd150
fffd7fe0:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd7fe4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
fffd7fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
fffd7fec:	e9d1 0100 	ldrd	r0, r1, [r1]
fffd7ff0:	f002 fef2 	bl	fffdadd8 <__aeabi_dmul>
fffd7ff4:	4682      	mov	r10, r0
fffd7ff6:	468b      	mov	r11, r1
fffd7ff8:	e016      	b.n	fffd8028 <_strtod_l+0x330>
fffd7ffa:	9a08      	ldr	r2, [sp, #32]
fffd7ffc:	ab1e      	add	r3, sp, #120	; 0x78
fffd7ffe:	9402      	str	r4, [sp, #8]
fffd8000:	a91d      	add	r1, sp, #116	; 0x74
fffd8002:	9300      	str	r3, [sp, #0]
fffd8004:	ab1f      	add	r3, sp, #124	; 0x7c
fffd8006:	9201      	str	r2, [sp, #4]
fffd8008:	f64c 62d0 	movw	r2, #52944	; 0xced0
fffd800c:	9807      	ldr	r0, [sp, #28]
fffd800e:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
fffd8012:	f001 fbe3 	bl	fffd97dc <__gethex>
fffd8016:	f010 0607 	ands.w	r6, r0, #7
fffd801a:	4604      	mov	r4, r0
fffd801c:	f040 80a5 	bne.w	fffd816a <_strtod_l+0x472>
fffd8020:	f04f 0a00 	mov.w	r10, #0
fffd8024:	f04f 0b00 	mov.w	r11, #0
fffd8028:	9a06      	ldr	r2, [sp, #24]
fffd802a:	b10a      	cbz	r2, fffd8030 <_strtod_l+0x338>
fffd802c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
fffd802e:	6013      	str	r3, [r2, #0]
fffd8030:	9b08      	ldr	r3, [sp, #32]
fffd8032:	2b00      	cmp	r3, #0
fffd8034:	f43f af06 	beq.w	fffd7e44 <_strtod_l+0x14c>
fffd8038:	f10b 4300 	add.w	r3, r11, #2147483648	; 0x80000000
fffd803c:	4651      	mov	r1, r10
fffd803e:	468a      	mov	r10, r1
fffd8040:	469b      	mov	r11, r3
fffd8042:	4650      	mov	r0, r10
fffd8044:	4659      	mov	r1, r11
fffd8046:	b023      	add	sp, #140	; 0x8c
fffd8048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd804c:	f64c 61c0 	movw	r1, #52928	; 0xcec0
fffd8050:	a81d      	add	r0, sp, #116	; 0x74
fffd8052:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
fffd8056:	f001 fe5f 	bl	fffd9d18 <__match>
fffd805a:	2800      	cmp	r0, #0
fffd805c:	f43f aeea 	beq.w	fffd7e34 <_strtod_l+0x13c>
fffd8060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
fffd8062:	f64c 61c4 	movw	r1, #52932	; 0xcec4
fffd8066:	a81d      	add	r0, sp, #116	; 0x74
fffd8068:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
fffd806c:	3b01      	subs	r3, #1
fffd806e:	931d      	str	r3, [sp, #116]	; 0x74
fffd8070:	f001 fe52 	bl	fffd9d18 <__match>
fffd8074:	b910      	cbnz	r0, fffd807c <_strtod_l+0x384>
fffd8076:	9b1d      	ldr	r3, [sp, #116]	; 0x74
fffd8078:	3301      	adds	r3, #1
fffd807a:	931d      	str	r3, [sp, #116]	; 0x74
fffd807c:	2300      	movs	r3, #0
fffd807e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd8082:	9305      	str	r3, [sp, #20]
fffd8084:	2300      	movs	r3, #0
fffd8086:	9304      	str	r3, [sp, #16]
fffd8088:	e9dd ab04 	ldrd	r10, r11, [sp, #16]
fffd808c:	e7cc      	b.n	fffd8028 <_strtod_l+0x330>
fffd808e:	f04f 0c01 	mov.w	r12, #1
fffd8092:	e70f      	b.n	fffd7eb4 <_strtod_l+0x1bc>
fffd8094:	f24d 1350 	movw	r3, #53584	; 0xd150
fffd8098:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd809c:	eb03 03ca 	add.w	r3, r3, r10, lsl #3
fffd80a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
fffd80a4:	f002 fe98 	bl	fffdadd8 <__aeabi_dmul>
fffd80a8:	4606      	mov	r6, r0
fffd80aa:	4640      	mov	r0, r8
fffd80ac:	460f      	mov	r7, r1
fffd80ae:	f002 fe19 	bl	fffdace4 <__aeabi_ui2d>
fffd80b2:	4602      	mov	r2, r0
fffd80b4:	460b      	mov	r3, r1
fffd80b6:	4630      	mov	r0, r6
fffd80b8:	4639      	mov	r1, r7
fffd80ba:	f002 fcd7 	bl	fffdaa6c <__adddf3>
fffd80be:	2c0f      	cmp	r4, #15
fffd80c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
fffd80c4:	dd81      	ble.n	fffd7fca <_strtod_l+0x2d2>
fffd80c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
fffd80c8:	eba4 060a 	sub.w	r6, r4, r10
fffd80cc:	441e      	add	r6, r3
fffd80ce:	2e00      	cmp	r6, #0
fffd80d0:	f340 80b6 	ble.w	fffd8240 <_strtod_l+0x548>
fffd80d4:	f016 010f 	ands.w	r1, r6, #15
fffd80d8:	d00d      	beq.n	fffd80f6 <_strtod_l+0x3fe>
fffd80da:	f24d 1350 	movw	r3, #53584	; 0xd150
fffd80de:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd80e2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
fffd80e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
fffd80ea:	e9d1 0100 	ldrd	r0, r1, [r1]
fffd80ee:	f002 fe73 	bl	fffdadd8 <__aeabi_dmul>
fffd80f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
fffd80f6:	f036 060f 	bics.w	r6, r6, #15
fffd80fa:	f000 80a3 	beq.w	fffd8244 <_strtod_l+0x54c>
fffd80fe:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
fffd8102:	f340 8377 	ble.w	fffd87f4 <_strtod_l+0xafc>
fffd8106:	9a07      	ldr	r2, [sp, #28]
fffd8108:	2300      	movs	r3, #0
fffd810a:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd810e:	9305      	str	r3, [sp, #20]
fffd8110:	2322      	movs	r3, #34	; 0x22
fffd8112:	6013      	str	r3, [r2, #0]
fffd8114:	2300      	movs	r3, #0
fffd8116:	9304      	str	r3, [sp, #16]
fffd8118:	e9dd ab04 	ldrd	r10, r11, [sp, #16]
fffd811c:	e784      	b.n	fffd8028 <_strtod_l+0x330>
fffd811e:	4652      	mov	r2, r10
fffd8120:	4628      	mov	r0, r5
fffd8122:	f002 fc23 	bl	fffda96c <strncmp>
fffd8126:	4683      	mov	r11, r0
fffd8128:	2800      	cmp	r0, #0
fffd812a:	d17f      	bne.n	fffd822c <_strtod_l+0x534>
fffd812c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
fffd812e:	465a      	mov	r2, r11
fffd8130:	eb03 010a 	add.w	r1, r3, r10
fffd8134:	911d      	str	r1, [sp, #116]	; 0x74
fffd8136:	f813 300a 	ldrb.w	r3, [r3, r10]
fffd813a:	2b30      	cmp	r3, #48	; 0x30
fffd813c:	d105      	bne.n	fffd814a <_strtod_l+0x452>
fffd813e:	3101      	adds	r1, #1
fffd8140:	911d      	str	r1, [sp, #116]	; 0x74
fffd8142:	3201      	adds	r2, #1
fffd8144:	780b      	ldrb	r3, [r1, #0]
fffd8146:	2b30      	cmp	r3, #48	; 0x30
fffd8148:	d0f9      	beq.n	fffd813e <_strtod_l+0x446>
fffd814a:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
fffd814e:	2908      	cmp	r1, #8
fffd8150:	f240 8341 	bls.w	fffd87d6 <_strtod_l+0xade>
fffd8154:	2100      	movs	r1, #0
fffd8156:	f04f 0c01 	mov.w	r12, #1
fffd815a:	460c      	mov	r4, r1
fffd815c:	4688      	mov	r8, r1
fffd815e:	4689      	mov	r9, r1
fffd8160:	e6a8      	b.n	fffd7eb4 <_strtod_l+0x1bc>
fffd8162:	2000      	movs	r0, #0
fffd8164:	961d      	str	r6, [sp, #116]	; 0x74
fffd8166:	4682      	mov	r10, r0
fffd8168:	e659      	b.n	fffd7e1e <_strtod_l+0x126>
fffd816a:	2e06      	cmp	r6, #6
fffd816c:	f040 82e6 	bne.w	fffd873c <_strtod_l+0xa44>
fffd8170:	9b06      	ldr	r3, [sp, #24]
fffd8172:	3501      	adds	r5, #1
fffd8174:	2b00      	cmp	r3, #0
fffd8176:	f43f ae61 	beq.w	fffd7e3c <_strtod_l+0x144>
fffd817a:	601d      	str	r5, [r3, #0]
fffd817c:	f04f 0a00 	mov.w	r10, #0
fffd8180:	f04f 0b00 	mov.w	r11, #0
fffd8184:	e65e      	b.n	fffd7e44 <_strtod_l+0x14c>
fffd8186:	3b49      	subs	r3, #73	; 0x49
fffd8188:	2b25      	cmp	r3, #37	; 0x25
fffd818a:	f63f ae53 	bhi.w	fffd7e34 <_strtod_l+0x13c>
fffd818e:	a201      	add	r2, pc, #4	; (adr r2, fffd8194 <_strtod_l+0x49c>)
fffd8190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
fffd8194:	fffd804d 	.word	0xfffd804d
fffd8198:	fffd7e35 	.word	0xfffd7e35
fffd819c:	fffd7e35 	.word	0xfffd7e35
fffd81a0:	fffd7e35 	.word	0xfffd7e35
fffd81a4:	fffd7e35 	.word	0xfffd7e35
fffd81a8:	fffd84c3 	.word	0xfffd84c3
fffd81ac:	fffd7e35 	.word	0xfffd7e35
fffd81b0:	fffd7e35 	.word	0xfffd7e35
fffd81b4:	fffd7e35 	.word	0xfffd7e35
fffd81b8:	fffd7e35 	.word	0xfffd7e35
fffd81bc:	fffd7e35 	.word	0xfffd7e35
fffd81c0:	fffd7e35 	.word	0xfffd7e35
fffd81c4:	fffd7e35 	.word	0xfffd7e35
fffd81c8:	fffd7e35 	.word	0xfffd7e35
fffd81cc:	fffd7e35 	.word	0xfffd7e35
fffd81d0:	fffd7e35 	.word	0xfffd7e35
fffd81d4:	fffd7e35 	.word	0xfffd7e35
fffd81d8:	fffd7e35 	.word	0xfffd7e35
fffd81dc:	fffd7e35 	.word	0xfffd7e35
fffd81e0:	fffd7e35 	.word	0xfffd7e35
fffd81e4:	fffd7e35 	.word	0xfffd7e35
fffd81e8:	fffd7e35 	.word	0xfffd7e35
fffd81ec:	fffd7e35 	.word	0xfffd7e35
fffd81f0:	fffd7e35 	.word	0xfffd7e35
fffd81f4:	fffd7e35 	.word	0xfffd7e35
fffd81f8:	fffd7e35 	.word	0xfffd7e35
fffd81fc:	fffd7e35 	.word	0xfffd7e35
fffd8200:	fffd7e35 	.word	0xfffd7e35
fffd8204:	fffd7e35 	.word	0xfffd7e35
fffd8208:	fffd7e35 	.word	0xfffd7e35
fffd820c:	fffd7e35 	.word	0xfffd7e35
fffd8210:	fffd7e35 	.word	0xfffd7e35
fffd8214:	fffd804d 	.word	0xfffd804d
fffd8218:	fffd7e35 	.word	0xfffd7e35
fffd821c:	fffd7e35 	.word	0xfffd7e35
fffd8220:	fffd7e35 	.word	0xfffd7e35
fffd8224:	fffd7e35 	.word	0xfffd7e35
fffd8228:	fffd84c3 	.word	0xfffd84c3
fffd822c:	f04f 0b00 	mov.w	r11, #0
fffd8230:	463b      	mov	r3, r7
fffd8232:	46d8      	mov	r8, r11
fffd8234:	46d9      	mov	r9, r11
fffd8236:	465a      	mov	r2, r11
fffd8238:	4659      	mov	r1, r11
fffd823a:	465c      	mov	r4, r11
fffd823c:	46dc      	mov	r12, r11
fffd823e:	e639      	b.n	fffd7eb4 <_strtod_l+0x1bc>
fffd8240:	f040 836e 	bne.w	fffd8920 <_strtod_l+0xc28>
fffd8244:	2300      	movs	r3, #0
fffd8246:	930c      	str	r3, [sp, #48]	; 0x30
fffd8248:	4623      	mov	r3, r4
fffd824a:	9c07      	ldr	r4, [sp, #28]
fffd824c:	f8cd 9000 	str.w	r9, [sp]
fffd8250:	465a      	mov	r2, r11
fffd8252:	4629      	mov	r1, r5
fffd8254:	4620      	mov	r0, r4
fffd8256:	f001 ff91 	bl	fffda17c <__s2b>
fffd825a:	9012      	str	r0, [sp, #72]	; 0x48
fffd825c:	2800      	cmp	r0, #0
fffd825e:	f000 82b0 	beq.w	fffd87c2 <_strtod_l+0xaca>
fffd8262:	9a0d      	ldr	r2, [sp, #52]	; 0x34
fffd8264:	2a00      	cmp	r2, #0
fffd8266:	f1c2 0300 	rsb	r3, r2, #0
fffd826a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
fffd826e:	9213      	str	r2, [sp, #76]	; 0x4c
fffd8270:	bfa8      	it	ge
fffd8272:	2300      	movge	r3, #0
fffd8274:	9310      	str	r3, [sp, #64]	; 0x40
fffd8276:	2300      	movs	r3, #0
fffd8278:	9309      	str	r3, [sp, #36]	; 0x24
fffd827a:	4699      	mov	r9, r3
fffd827c:	e0db      	b.n	fffd8436 <_strtod_l+0x73e>
fffd827e:	eba8 0803 	sub.w	r8, r8, r3
fffd8282:	f1b8 0f1f 	cmp.w	r8, #31
fffd8286:	eba5 0508 	sub.w	r5, r5, r8
fffd828a:	bfc1      	itttt	gt
fffd828c:	f64f 32e2 	movwgt	r2, #64482	; 0xfbe2
fffd8290:	f6cf 72ff 	movtgt	r2, #65535	; 0xffff
fffd8294:	1ad3      	subgt	r3, r2, r3
fffd8296:	f04f 0801 	movgt.w	r8, #1
fffd829a:	bfd7      	itett	le
fffd829c:	2301      	movle	r3, #1
fffd829e:	fa08 f303 	lslgt.w	r3, r8, r3
fffd82a2:	2200      	movle	r2, #0
fffd82a4:	fa03 f808 	lslle.w	r8, r3, r8
fffd82a8:	bfd4      	ite	le
fffd82aa:	4692      	movle	r10, r2
fffd82ac:	469a      	movgt	r10, r3
fffd82ae:	442e      	add	r6, r5
fffd82b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
fffd82b2:	443d      	add	r5, r7
fffd82b4:	42af      	cmp	r7, r5
fffd82b6:	441e      	add	r6, r3
fffd82b8:	463b      	mov	r3, r7
fffd82ba:	bfa8      	it	ge
fffd82bc:	462b      	movge	r3, r5
fffd82be:	42b3      	cmp	r3, r6
fffd82c0:	bfa8      	it	ge
fffd82c2:	4633      	movge	r3, r6
fffd82c4:	2b00      	cmp	r3, #0
fffd82c6:	bfc2      	ittt	gt
fffd82c8:	1aed      	subgt	r5, r5, r3
fffd82ca:	1af6      	subgt	r6, r6, r3
fffd82cc:	1aff      	subgt	r7, r7, r3
fffd82ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
fffd82d0:	2b00      	cmp	r3, #0
fffd82d2:	f040 810c 	bne.w	fffd84ee <_strtod_l+0x7f6>
fffd82d6:	2d00      	cmp	r5, #0
fffd82d8:	f300 8120 	bgt.w	fffd851c <_strtod_l+0x824>
fffd82dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
fffd82de:	2b00      	cmp	r3, #0
fffd82e0:	f300 8147 	bgt.w	fffd8572 <_strtod_l+0x87a>
fffd82e4:	2e00      	cmp	r6, #0
fffd82e6:	f300 8150 	bgt.w	fffd858a <_strtod_l+0x892>
fffd82ea:	2f00      	cmp	r7, #0
fffd82ec:	dd08      	ble.n	fffd8300 <_strtod_l+0x608>
fffd82ee:	4649      	mov	r1, r9
fffd82f0:	463a      	mov	r2, r7
fffd82f2:	4620      	mov	r0, r4
fffd82f4:	f002 f8e2 	bl	fffda4bc <__lshift>
fffd82f8:	4681      	mov	r9, r0
fffd82fa:	2800      	cmp	r0, #0
fffd82fc:	f000 8142 	beq.w	fffd8584 <_strtod_l+0x88c>
fffd8300:	465a      	mov	r2, r11
fffd8302:	991e      	ldr	r1, [sp, #120]	; 0x78
fffd8304:	4620      	mov	r0, r4
fffd8306:	f002 f951 	bl	fffda5ac <__mdiff>
fffd830a:	9009      	str	r0, [sp, #36]	; 0x24
fffd830c:	2800      	cmp	r0, #0
fffd830e:	f000 8139 	beq.w	fffd8584 <_strtod_l+0x88c>
fffd8312:	9b09      	ldr	r3, [sp, #36]	; 0x24
fffd8314:	2500      	movs	r5, #0
fffd8316:	4649      	mov	r1, r9
fffd8318:	68da      	ldr	r2, [r3, #12]
fffd831a:	60dd      	str	r5, [r3, #12]
fffd831c:	9211      	str	r2, [sp, #68]	; 0x44
fffd831e:	f002 f929 	bl	fffda574 <__mcmp>
fffd8322:	42a8      	cmp	r0, r5
fffd8324:	f2c0 8385 	blt.w	fffd8a32 <_strtod_l+0xd3a>
fffd8328:	9f05      	ldr	r7, [sp, #20]
fffd832a:	f000 83d6 	beq.w	fffd8ada <_strtod_l+0xde2>
fffd832e:	4649      	mov	r1, r9
fffd8330:	9809      	ldr	r0, [sp, #36]	; 0x24
fffd8332:	f002 fa97 	bl	fffda864 <__ratio>
fffd8336:	2200      	movs	r2, #0
fffd8338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
fffd833c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
fffd8340:	f002 ffc6 	bl	fffdb2d0 <__aeabi_dcmple>
fffd8344:	2800      	cmp	r0, #0
fffd8346:	f000 812a 	beq.w	fffd859e <_strtod_l+0x8a6>
fffd834a:	9b11      	ldr	r3, [sp, #68]	; 0x44
fffd834c:	2b00      	cmp	r3, #0
fffd834e:	f000 813c 	beq.w	fffd85ca <_strtod_l+0x8d2>
fffd8352:	46aa      	mov	r10, r5
fffd8354:	2500      	movs	r5, #0
fffd8356:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
fffd835a:	2200      	movs	r2, #0
fffd835c:	2300      	movs	r3, #0
fffd835e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
fffd8362:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
fffd8366:	2600      	movs	r6, #0
fffd8368:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
fffd836c:	ea07 0806 	and.w	r8, r7, r6
fffd8370:	2300      	movs	r3, #0
fffd8372:	f6c7 73e0 	movt	r3, #32736	; 0x7fe0
fffd8376:	4598      	cmp	r8, r3
fffd8378:	f000 815a 	beq.w	fffd8630 <_strtod_l+0x938>
fffd837c:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
fffd8380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
fffd8382:	bf8c      	ite	hi
fffd8384:	2300      	movhi	r3, #0
fffd8386:	2301      	movls	r3, #1
fffd8388:	2a00      	cmp	r2, #0
fffd838a:	bf08      	it	eq
fffd838c:	2300      	moveq	r3, #0
fffd838e:	b32b      	cbz	r3, fffd83dc <_strtod_l+0x6e4>
fffd8390:	4650      	mov	r0, r10
fffd8392:	a3a5      	add	r3, pc, #660	; (adr r3, fffd8628 <_strtod_l+0x930>)
fffd8394:	e9d3 2300 	ldrd	r2, r3, [r3]
fffd8398:	4629      	mov	r1, r5
fffd839a:	f002 ff99 	bl	fffdb2d0 <__aeabi_dcmple>
fffd839e:	b1b8      	cbz	r0, fffd83d0 <_strtod_l+0x6d8>
fffd83a0:	4650      	mov	r0, r10
fffd83a2:	4629      	mov	r1, r5
fffd83a4:	f002 fff0 	bl	fffdb388 <__aeabi_d2uiz>
fffd83a8:	2800      	cmp	r0, #0
fffd83aa:	f000 8205 	beq.w	fffd87b8 <_strtod_l+0xac0>
fffd83ae:	f002 fc99 	bl	fffdace4 <__aeabi_ui2d>
fffd83b2:	4682      	mov	r10, r0
fffd83b4:	460d      	mov	r5, r1
fffd83b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
fffd83b8:	2b00      	cmp	r3, #0
fffd83ba:	f040 81f8 	bne.w	fffd87ae <_strtod_l+0xab6>
fffd83be:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
fffd83c2:	f8cd a058 	str.w	r10, [sp, #88]	; 0x58
fffd83c6:	9317      	str	r3, [sp, #92]	; 0x5c
fffd83c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
fffd83cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
fffd83d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
fffd83d2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
fffd83d6:	eba3 0308 	sub.w	r3, r3, r8
fffd83da:	930f      	str	r3, [sp, #60]	; 0x3c
fffd83dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
fffd83e0:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
fffd83e4:	f002 f966 	bl	fffda6b4 <__ulp>
fffd83e8:	4602      	mov	r2, r0
fffd83ea:	460b      	mov	r3, r1
fffd83ec:	4630      	mov	r0, r6
fffd83ee:	4639      	mov	r1, r7
fffd83f0:	f002 fcf2 	bl	fffdadd8 <__aeabi_dmul>
fffd83f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
fffd83f8:	f002 fb38 	bl	fffdaa6c <__adddf3>
fffd83fc:	460e      	mov	r6, r1
fffd83fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
fffd8402:	2300      	movs	r3, #0
fffd8404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
fffd8406:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd840a:	4033      	ands	r3, r6
fffd840c:	4543      	cmp	r3, r8
fffd840e:	bf08      	it	eq
fffd8410:	2a00      	cmpeq	r2, #0
fffd8412:	f000 814e 	beq.w	fffd86b2 <_strtod_l+0x9ba>
fffd8416:	991e      	ldr	r1, [sp, #120]	; 0x78
fffd8418:	4620      	mov	r0, r4
fffd841a:	f001 fe61 	bl	fffda0e0 <_Bfree>
fffd841e:	4659      	mov	r1, r11
fffd8420:	4620      	mov	r0, r4
fffd8422:	f001 fe5d 	bl	fffda0e0 <_Bfree>
fffd8426:	4649      	mov	r1, r9
fffd8428:	4620      	mov	r0, r4
fffd842a:	f001 fe59 	bl	fffda0e0 <_Bfree>
fffd842e:	9909      	ldr	r1, [sp, #36]	; 0x24
fffd8430:	4620      	mov	r0, r4
fffd8432:	f001 fe55 	bl	fffda0e0 <_Bfree>
fffd8436:	9d12      	ldr	r5, [sp, #72]	; 0x48
fffd8438:	4620      	mov	r0, r4
fffd843a:	6869      	ldr	r1, [r5, #4]
fffd843c:	f001 fe2a 	bl	fffda094 <_Balloc>
fffd8440:	4683      	mov	r11, r0
fffd8442:	2800      	cmp	r0, #0
fffd8444:	f000 809e 	beq.w	fffd8584 <_strtod_l+0x88c>
fffd8448:	692a      	ldr	r2, [r5, #16]
fffd844a:	f105 010c 	add.w	r1, r5, #12
fffd844e:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
fffd8452:	300c      	adds	r0, #12
fffd8454:	3202      	adds	r2, #2
fffd8456:	0092      	lsls	r2, r2, #2
fffd8458:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
fffd845c:	f001 fd40 	bl	fffd9ee0 <memcpy>
fffd8460:	a920      	add	r1, sp, #128	; 0x80
fffd8462:	462a      	mov	r2, r5
fffd8464:	9101      	str	r1, [sp, #4]
fffd8466:	4633      	mov	r3, r6
fffd8468:	a91f      	add	r1, sp, #124	; 0x7c
fffd846a:	4620      	mov	r0, r4
fffd846c:	9100      	str	r1, [sp, #0]
fffd846e:	f002 f9a3 	bl	fffda7b8 <__d2b>
fffd8472:	901e      	str	r0, [sp, #120]	; 0x78
fffd8474:	2800      	cmp	r0, #0
fffd8476:	d05a      	beq.n	fffd852e <_strtod_l+0x836>
fffd8478:	2101      	movs	r1, #1
fffd847a:	4620      	mov	r0, r4
fffd847c:	f001 ff16 	bl	fffda2ac <__i2b>
fffd8480:	4681      	mov	r9, r0
fffd8482:	2800      	cmp	r0, #0
fffd8484:	d07e      	beq.n	fffd8584 <_strtod_l+0x88c>
fffd8486:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
fffd8488:	f64f 4802 	movw	r8, #64514	; 0xfc02
fffd848c:	9d20      	ldr	r5, [sp, #128]	; 0x80
fffd848e:	f6cf 78ff 	movt	r8, #65535	; 0xffff
fffd8492:	2b00      	cmp	r3, #0
fffd8494:	bfa9      	itett	ge
fffd8496:	9a10      	ldrge	r2, [sp, #64]	; 0x40
fffd8498:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
fffd849a:	189f      	addge	r7, r3, r2
fffd849c:	9e13      	ldrge	r6, [sp, #76]	; 0x4c
fffd849e:	bfb8      	it	lt
fffd84a0:	1ad6      	sublt	r6, r2, r3
fffd84a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
fffd84a4:	bfb8      	it	lt
fffd84a6:	9f10      	ldrlt	r7, [sp, #64]	; 0x40
fffd84a8:	1a9b      	subs	r3, r3, r2
fffd84aa:	442b      	add	r3, r5
fffd84ac:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
fffd84b0:	3b01      	subs	r3, #1
fffd84b2:	4543      	cmp	r3, r8
fffd84b4:	f6ff aee3 	blt.w	fffd827e <_strtod_l+0x586>
fffd84b8:	2300      	movs	r3, #0
fffd84ba:	f04f 0801 	mov.w	r8, #1
fffd84be:	469a      	mov	r10, r3
fffd84c0:	e6f5      	b.n	fffd82ae <_strtod_l+0x5b6>
fffd84c2:	f64c 61cc 	movw	r1, #52940	; 0xcecc
fffd84c6:	a81d      	add	r0, sp, #116	; 0x74
fffd84c8:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
fffd84cc:	f001 fc24 	bl	fffd9d18 <__match>
fffd84d0:	2800      	cmp	r0, #0
fffd84d2:	f43f acaf 	beq.w	fffd7e34 <_strtod_l+0x13c>
fffd84d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
fffd84d8:	781b      	ldrb	r3, [r3, #0]
fffd84da:	2b28      	cmp	r3, #40	; 0x28
fffd84dc:	f000 835f 	beq.w	fffd8b9e <_strtod_l+0xea6>
fffd84e0:	2300      	movs	r3, #0
fffd84e2:	f6cf 73f8 	movt	r3, #65528	; 0xfff8
fffd84e6:	9305      	str	r3, [sp, #20]
fffd84e8:	2300      	movs	r3, #0
fffd84ea:	9304      	str	r3, [sp, #16]
fffd84ec:	e5cc      	b.n	fffd8088 <_strtod_l+0x390>
fffd84ee:	4649      	mov	r1, r9
fffd84f0:	461a      	mov	r2, r3
fffd84f2:	4620      	mov	r0, r4
fffd84f4:	f001 ff90 	bl	fffda418 <__pow5mult>
fffd84f8:	4681      	mov	r9, r0
fffd84fa:	2800      	cmp	r0, #0
fffd84fc:	d042      	beq.n	fffd8584 <_strtod_l+0x88c>
fffd84fe:	4601      	mov	r1, r0
fffd8500:	9a1e      	ldr	r2, [sp, #120]	; 0x78
fffd8502:	4620      	mov	r0, r4
fffd8504:	f001 fedc 	bl	fffda2c0 <__multiply>
fffd8508:	2800      	cmp	r0, #0
fffd850a:	d03b      	beq.n	fffd8584 <_strtod_l+0x88c>
fffd850c:	900e      	str	r0, [sp, #56]	; 0x38
fffd850e:	4620      	mov	r0, r4
fffd8510:	991e      	ldr	r1, [sp, #120]	; 0x78
fffd8512:	f001 fde5 	bl	fffda0e0 <_Bfree>
fffd8516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
fffd8518:	931e      	str	r3, [sp, #120]	; 0x78
fffd851a:	e6dc      	b.n	fffd82d6 <_strtod_l+0x5de>
fffd851c:	462a      	mov	r2, r5
fffd851e:	991e      	ldr	r1, [sp, #120]	; 0x78
fffd8520:	4620      	mov	r0, r4
fffd8522:	f001 ffcb 	bl	fffda4bc <__lshift>
fffd8526:	901e      	str	r0, [sp, #120]	; 0x78
fffd8528:	2800      	cmp	r0, #0
fffd852a:	f47f aed7 	bne.w	fffd82dc <_strtod_l+0x5e4>
fffd852e:	465d      	mov	r5, r11
fffd8530:	9a07      	ldr	r2, [sp, #28]
fffd8532:	2300      	movs	r3, #0
fffd8534:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd8538:	9305      	str	r3, [sp, #20]
fffd853a:	2322      	movs	r3, #34	; 0x22
fffd853c:	6013      	str	r3, [r2, #0]
fffd853e:	2300      	movs	r3, #0
fffd8540:	9304      	str	r3, [sp, #16]
fffd8542:	e9dd ab04 	ldrd	r10, r11, [sp, #16]
fffd8546:	9c07      	ldr	r4, [sp, #28]
fffd8548:	4601      	mov	r1, r0
fffd854a:	4620      	mov	r0, r4
fffd854c:	f001 fdc8 	bl	fffda0e0 <_Bfree>
fffd8550:	4629      	mov	r1, r5
fffd8552:	4620      	mov	r0, r4
fffd8554:	f001 fdc4 	bl	fffda0e0 <_Bfree>
fffd8558:	4649      	mov	r1, r9
fffd855a:	4620      	mov	r0, r4
fffd855c:	f001 fdc0 	bl	fffda0e0 <_Bfree>
fffd8560:	9912      	ldr	r1, [sp, #72]	; 0x48
fffd8562:	4620      	mov	r0, r4
fffd8564:	f001 fdbc 	bl	fffda0e0 <_Bfree>
fffd8568:	9909      	ldr	r1, [sp, #36]	; 0x24
fffd856a:	4620      	mov	r0, r4
fffd856c:	f001 fdb8 	bl	fffda0e0 <_Bfree>
fffd8570:	e55a      	b.n	fffd8028 <_strtod_l+0x330>
fffd8572:	4659      	mov	r1, r11
fffd8574:	9a13      	ldr	r2, [sp, #76]	; 0x4c
fffd8576:	4620      	mov	r0, r4
fffd8578:	f001 ff4e 	bl	fffda418 <__pow5mult>
fffd857c:	4683      	mov	r11, r0
fffd857e:	2800      	cmp	r0, #0
fffd8580:	f47f aeb0 	bne.w	fffd82e4 <_strtod_l+0x5ec>
fffd8584:	465d      	mov	r5, r11
fffd8586:	981e      	ldr	r0, [sp, #120]	; 0x78
fffd8588:	e7d2      	b.n	fffd8530 <_strtod_l+0x838>
fffd858a:	4659      	mov	r1, r11
fffd858c:	4632      	mov	r2, r6
fffd858e:	4620      	mov	r0, r4
fffd8590:	f001 ff94 	bl	fffda4bc <__lshift>
fffd8594:	4683      	mov	r11, r0
fffd8596:	2800      	cmp	r0, #0
fffd8598:	f47f aea7 	bne.w	fffd82ea <_strtod_l+0x5f2>
fffd859c:	e7f2      	b.n	fffd8584 <_strtod_l+0x88c>
fffd859e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
fffd85a2:	2200      	movs	r2, #0
fffd85a4:	2300      	movs	r3, #0
fffd85a6:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
fffd85aa:	f002 fc15 	bl	fffdadd8 <__aeabi_dmul>
fffd85ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
fffd85b0:	4682      	mov	r10, r0
fffd85b2:	460d      	mov	r5, r1
fffd85b4:	2b00      	cmp	r3, #0
fffd85b6:	d130      	bne.n	fffd861a <_strtod_l+0x922>
fffd85b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
fffd85bc:	9014      	str	r0, [sp, #80]	; 0x50
fffd85be:	9315      	str	r3, [sp, #84]	; 0x54
fffd85c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
fffd85c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
fffd85c8:	e6cd      	b.n	fffd8366 <_strtod_l+0x66e>
fffd85ca:	9b04      	ldr	r3, [sp, #16]
fffd85cc:	2b00      	cmp	r3, #0
fffd85ce:	f040 80a6 	bne.w	fffd871e <_strtod_l+0xa26>
fffd85d2:	f3c7 0313 	ubfx	r3, r7, #0, #20
fffd85d6:	2b00      	cmp	r3, #0
fffd85d8:	d15f      	bne.n	fffd869a <_strtod_l+0x9a2>
fffd85da:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
fffd85de:	2300      	movs	r3, #0
fffd85e0:	2200      	movs	r2, #0
fffd85e2:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
fffd85e6:	4628      	mov	r0, r5
fffd85e8:	4631      	mov	r1, r6
fffd85ea:	f002 fe67 	bl	fffdb2bc <__aeabi_dcmplt>
fffd85ee:	2800      	cmp	r0, #0
fffd85f0:	f040 8213 	bne.w	fffd8a1a <_strtod_l+0xd22>
fffd85f4:	4628      	mov	r0, r5
fffd85f6:	4631      	mov	r1, r6
fffd85f8:	2200      	movs	r2, #0
fffd85fa:	2300      	movs	r3, #0
fffd85fc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
fffd8600:	f002 fbea 	bl	fffdadd8 <__aeabi_dmul>
fffd8604:	4682      	mov	r10, r0
fffd8606:	460d      	mov	r5, r1
fffd8608:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
fffd860c:	901a      	str	r0, [sp, #104]	; 0x68
fffd860e:	931b      	str	r3, [sp, #108]	; 0x6c
fffd8610:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
fffd8614:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
fffd8618:	e6a5      	b.n	fffd8366 <_strtod_l+0x66e>
fffd861a:	4602      	mov	r2, r0
fffd861c:	460b      	mov	r3, r1
fffd861e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
fffd8622:	e7cd      	b.n	fffd85c0 <_strtod_l+0x8c8>
fffd8624:	f3af 8000 	nop.w
fffd8628:	ffc00000 	.word	0xffc00000
fffd862c:	41dfffff 	.word	0x41dfffff
fffd8630:	f1a7 7354 	sub.w	r3, r7, #55574528	; 0x3500000
fffd8634:	9305      	str	r3, [sp, #20]
fffd8636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
fffd863a:	4610      	mov	r0, r2
fffd863c:	4619      	mov	r1, r3
fffd863e:	f002 f839 	bl	fffda6b4 <__ulp>
fffd8642:	4602      	mov	r2, r0
fffd8644:	460b      	mov	r3, r1
fffd8646:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
fffd864a:	f002 fbc5 	bl	fffdadd8 <__aeabi_dmul>
fffd864e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
fffd8652:	f002 fa0b 	bl	fffdaa6c <__adddf3>
fffd8656:	f64f 72ff 	movw	r2, #65535	; 0xffff
fffd865a:	f6c7 429f 	movt	r2, #31903	; 0x7c9f
fffd865e:	ea01 0306 	and.w	r3, r1, r6
fffd8662:	468c      	mov	r12, r1
fffd8664:	e9cd 0104 	strd	r0, r1, [sp, #16]
fffd8668:	4293      	cmp	r3, r2
fffd866a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
fffd866e:	4606      	mov	r6, r0
fffd8670:	460f      	mov	r7, r1
fffd8672:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
fffd8676:	f240 8096 	bls.w	fffd87a6 <_strtod_l+0xaae>
fffd867a:	f64f 73ff 	movw	r3, #65535	; 0xffff
fffd867e:	f6c7 73ef 	movt	r3, #32751	; 0x7fef
fffd8682:	4299      	cmp	r1, r3
fffd8684:	f000 81b8 	beq.w	fffd89f8 <_strtod_l+0xd00>
fffd8688:	f64f 73ff 	movw	r3, #65535	; 0xffff
fffd868c:	f6c7 73ef 	movt	r3, #32751	; 0x7fef
fffd8690:	9305      	str	r3, [sp, #20]
fffd8692:	f04f 33ff 	mov.w	r3, #4294967295
fffd8696:	9304      	str	r3, [sp, #16]
fffd8698:	e6bd      	b.n	fffd8416 <_strtod_l+0x71e>
fffd869a:	2200      	movs	r2, #0
fffd869c:	2300      	movs	r3, #0
fffd869e:	f6cb 73f0 	movt	r3, #49136	; 0xbff0
fffd86a2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
fffd86a6:	2300      	movs	r3, #0
fffd86a8:	2500      	movs	r5, #0
fffd86aa:	469a      	mov	r10, r3
fffd86ac:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
fffd86b0:	e659      	b.n	fffd8366 <_strtod_l+0x66e>
fffd86b2:	4629      	mov	r1, r5
fffd86b4:	4650      	mov	r0, r10
fffd86b6:	f002 fe3f 	bl	fffdb338 <__aeabi_d2iz>
fffd86ba:	f002 fb23 	bl	fffdad04 <__aeabi_i2d>
fffd86be:	460b      	mov	r3, r1
fffd86c0:	4602      	mov	r2, r0
fffd86c2:	4629      	mov	r1, r5
fffd86c4:	4650      	mov	r0, r10
fffd86c6:	f002 f9cf 	bl	fffdaa68 <__aeabi_dsub>
fffd86ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
fffd86cc:	4607      	mov	r7, r0
fffd86ce:	4688      	mov	r8, r1
fffd86d0:	b98b      	cbnz	r3, fffd86f6 <_strtod_l+0x9fe>
fffd86d2:	9b04      	ldr	r3, [sp, #16]
fffd86d4:	b97b      	cbnz	r3, fffd86f6 <_strtod_l+0x9fe>
fffd86d6:	f3c6 0613 	ubfx	r6, r6, #0, #20
fffd86da:	b966      	cbnz	r6, fffd86f6 <_strtod_l+0x9fe>
fffd86dc:	a38a      	add	r3, pc, #552	; (adr r3, fffd8908 <_strtod_l+0xc10>)
fffd86de:	e9d3 2300 	ldrd	r2, r3, [r3]
fffd86e2:	f002 fdeb 	bl	fffdb2bc <__aeabi_dcmplt>
fffd86e6:	2800      	cmp	r0, #0
fffd86e8:	f43f ae95 	beq.w	fffd8416 <_strtod_l+0x71e>
fffd86ec:	465d      	mov	r5, r11
fffd86ee:	981e      	ldr	r0, [sp, #120]	; 0x78
fffd86f0:	e9dd ab04 	ldrd	r10, r11, [sp, #16]
fffd86f4:	e727      	b.n	fffd8546 <_strtod_l+0x84e>
fffd86f6:	a386      	add	r3, pc, #536	; (adr r3, fffd8910 <_strtod_l+0xc18>)
fffd86f8:	e9d3 2300 	ldrd	r2, r3, [r3]
fffd86fc:	4638      	mov	r0, r7
fffd86fe:	4641      	mov	r1, r8
fffd8700:	f002 fddc 	bl	fffdb2bc <__aeabi_dcmplt>
fffd8704:	2800      	cmp	r0, #0
fffd8706:	d1f1      	bne.n	fffd86ec <_strtod_l+0x9f4>
fffd8708:	4638      	mov	r0, r7
fffd870a:	4641      	mov	r1, r8
fffd870c:	a382      	add	r3, pc, #520	; (adr r3, fffd8918 <_strtod_l+0xc20>)
fffd870e:	e9d3 2300 	ldrd	r2, r3, [r3]
fffd8712:	f002 fdf1 	bl	fffdb2f8 <__aeabi_dcmpgt>
fffd8716:	2800      	cmp	r0, #0
fffd8718:	f43f ae7d 	beq.w	fffd8416 <_strtod_l+0x71e>
fffd871c:	e7e6      	b.n	fffd86ec <_strtod_l+0x9f4>
fffd871e:	9b04      	ldr	r3, [sp, #16]
fffd8720:	2b01      	cmp	r3, #1
fffd8722:	d1ba      	bne.n	fffd869a <_strtod_l+0x9a2>
fffd8724:	2f00      	cmp	r7, #0
fffd8726:	d1b8      	bne.n	fffd869a <_strtod_l+0x9a2>
fffd8728:	465d      	mov	r5, r11
fffd872a:	9a07      	ldr	r2, [sp, #28]
fffd872c:	2322      	movs	r3, #34	; 0x22
fffd872e:	981e      	ldr	r0, [sp, #120]	; 0x78
fffd8730:	f04f 0a00 	mov.w	r10, #0
fffd8734:	f04f 0b00 	mov.w	r11, #0
fffd8738:	6013      	str	r3, [r2, #0]
fffd873a:	e704      	b.n	fffd8546 <_strtod_l+0x84e>
fffd873c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
fffd873e:	b13a      	cbz	r2, fffd8750 <_strtod_l+0xa58>
fffd8740:	2135      	movs	r1, #53	; 0x35
fffd8742:	a820      	add	r0, sp, #128	; 0x80
fffd8744:	f002 f8c2 	bl	fffda8cc <__copybits>
fffd8748:	9807      	ldr	r0, [sp, #28]
fffd874a:	991e      	ldr	r1, [sp, #120]	; 0x78
fffd874c:	f001 fcc8 	bl	fffda0e0 <_Bfree>
fffd8750:	3e01      	subs	r6, #1
fffd8752:	2e04      	cmp	r6, #4
fffd8754:	d808      	bhi.n	fffd8768 <_strtod_l+0xa70>
fffd8756:	e8df f006 	tbb	[pc, r6]
fffd875a:	0e1a      	.short	0x0e1a
fffd875c:	1303      	.short	0x1303
fffd875e:	1a          	.byte	0x1a
fffd875f:	00          	.byte	0x00
fffd8760:	2300      	movs	r3, #0
fffd8762:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd8766:	9305      	str	r3, [sp, #20]
fffd8768:	0721      	lsls	r1, r4, #28
fffd876a:	bf42      	ittt	mi
fffd876c:	9b05      	ldrmi	r3, [sp, #20]
fffd876e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
fffd8772:	9305      	strmi	r3, [sp, #20]
fffd8774:	e488      	b.n	fffd8088 <_strtod_l+0x390>
fffd8776:	9b20      	ldr	r3, [sp, #128]	; 0x80
fffd8778:	9304      	str	r3, [sp, #16]
fffd877a:	9b21      	ldr	r3, [sp, #132]	; 0x84
fffd877c:	9305      	str	r3, [sp, #20]
fffd877e:	e7f3      	b.n	fffd8768 <_strtod_l+0xa70>
fffd8780:	f04f 33ff 	mov.w	r3, #4294967295
fffd8784:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
fffd8788:	e9cd 3004 	strd	r3, r0, [sp, #16]
fffd878c:	e7ec      	b.n	fffd8768 <_strtod_l+0xa70>
fffd878e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
fffd8790:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
fffd8794:	f202 4233 	addw	r2, r2, #1075	; 0x433
fffd8798:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
fffd879c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
fffd87a0:	9104      	str	r1, [sp, #16]
fffd87a2:	9305      	str	r3, [sp, #20]
fffd87a4:	e7e0      	b.n	fffd8768 <_strtod_l+0xa70>
fffd87a6:	f10c 7654 	add.w	r6, r12, #55574528	; 0x3500000
fffd87aa:	9605      	str	r6, [sp, #20]
fffd87ac:	e629      	b.n	fffd8402 <_strtod_l+0x70a>
fffd87ae:	4652      	mov	r2, r10
fffd87b0:	462b      	mov	r3, r5
fffd87b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
fffd87b6:	e607      	b.n	fffd83c8 <_strtod_l+0x6d0>
fffd87b8:	2500      	movs	r5, #0
fffd87ba:	4682      	mov	r10, r0
fffd87bc:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
fffd87c0:	e5f9      	b.n	fffd83b6 <_strtod_l+0x6be>
fffd87c2:	9a07      	ldr	r2, [sp, #28]
fffd87c4:	2300      	movs	r3, #0
fffd87c6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd87ca:	9305      	str	r3, [sp, #20]
fffd87cc:	2322      	movs	r3, #34	; 0x22
fffd87ce:	6013      	str	r3, [r2, #0]
fffd87d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
fffd87d2:	9304      	str	r3, [sp, #16]
fffd87d4:	e458      	b.n	fffd8088 <_strtod_l+0x390>
fffd87d6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
fffd87d8:	f04f 0900 	mov.w	r9, #0
fffd87dc:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
fffd87e0:	1c51      	adds	r1, r2, #1
fffd87e2:	46c8      	mov	r8, r9
fffd87e4:	2401      	movs	r4, #1
fffd87e6:	46ac      	mov	r12, r5
fffd87e8:	230a      	movs	r3, #10
fffd87ea:	2200      	movs	r2, #0
fffd87ec:	fb03 e909 	mla	r9, r3, r9, lr
fffd87f0:	f7ff bbb4 	b.w	fffd7f5c <_strtod_l+0x264>
fffd87f4:	1136      	asrs	r6, r6, #4
fffd87f6:	f24d 1a28 	movw	r10, #53544	; 0xd128
fffd87fa:	2e01      	cmp	r6, #1
fffd87fc:	f6cf 7afd 	movt	r10, #65533	; 0xfffd
fffd8800:	bfd8      	it	le
fffd8802:	f04f 0800 	movle.w	r8, #0
fffd8806:	dd1e      	ble.n	fffd8846 <_strtod_l+0xb4e>
fffd8808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
fffd880c:	f04f 0c00 	mov.w	r12, #0
fffd8810:	4657      	mov	r7, r10
fffd8812:	46e0      	mov	r8, r12
fffd8814:	f016 0f01 	tst.w	r6, #1
fffd8818:	4610      	mov	r0, r2
fffd881a:	4619      	mov	r1, r3
fffd881c:	ea4f 0666 	mov.w	r6, r6, asr #1
fffd8820:	f108 0801 	add.w	r8, r8, #1
fffd8824:	d007      	beq.n	fffd8836 <_strtod_l+0xb3e>
fffd8826:	e9d7 2300 	ldrd	r2, r3, [r7]
fffd882a:	f002 fad5 	bl	fffdadd8 <__aeabi_dmul>
fffd882e:	f04f 0c01 	mov.w	r12, #1
fffd8832:	4602      	mov	r2, r0
fffd8834:	460b      	mov	r3, r1
fffd8836:	2e01      	cmp	r6, #1
fffd8838:	f107 0708 	add.w	r7, r7, #8
fffd883c:	d1ea      	bne.n	fffd8814 <_strtod_l+0xb1c>
fffd883e:	f1bc 0f00 	cmp.w	r12, #0
fffd8842:	f040 81fc 	bne.w	fffd8c3e <_strtod_l+0xf46>
fffd8846:	9b05      	ldr	r3, [sp, #20]
fffd8848:	eb0a 08c8 	add.w	r8, r10, r8, lsl #3
fffd884c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
fffd8850:	9305      	str	r3, [sp, #20]
fffd8852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
fffd8856:	e9d8 0100 	ldrd	r0, r1, [r8]
fffd885a:	f002 fabd 	bl	fffdadd8 <__aeabi_dmul>
fffd885e:	2300      	movs	r3, #0
fffd8860:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd8864:	2200      	movs	r2, #0
fffd8866:	f6c7 42a0 	movt	r2, #31904	; 0x7ca0
fffd886a:	ea01 0603 	and.w	r6, r1, r3
fffd886e:	460f      	mov	r7, r1
fffd8870:	4296      	cmp	r6, r2
fffd8872:	e9cd 0104 	strd	r0, r1, [sp, #16]
fffd8876:	f200 80c6 	bhi.w	fffd8a06 <_strtod_l+0xd0e>
fffd887a:	2300      	movs	r3, #0
fffd887c:	f6c7 4390 	movt	r3, #31888	; 0x7c90
fffd8880:	429e      	cmp	r6, r3
fffd8882:	f240 8180 	bls.w	fffd8b86 <_strtod_l+0xe8e>
fffd8886:	f64f 73ff 	movw	r3, #65535	; 0xffff
fffd888a:	f6c7 73ef 	movt	r3, #32751	; 0x7fef
fffd888e:	9305      	str	r3, [sp, #20]
fffd8890:	2300      	movs	r3, #0
fffd8892:	930c      	str	r3, [sp, #48]	; 0x30
fffd8894:	f04f 33ff 	mov.w	r3, #4294967295
fffd8898:	9304      	str	r3, [sp, #16]
fffd889a:	e4d5      	b.n	fffd8248 <_strtod_l+0x550>
fffd889c:	f112 0316 	adds.w	r3, r2, #22
fffd88a0:	f6ff ac11 	blt.w	fffd80c6 <_strtod_l+0x3ce>
fffd88a4:	f24d 1350 	movw	r3, #53584	; 0xd150
fffd88a8:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd88ac:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
fffd88b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
fffd88b4:	e9d3 2300 	ldrd	r2, r3, [r3]
fffd88b8:	f002 fbb8 	bl	fffdb02c <__aeabi_ddiv>
fffd88bc:	4682      	mov	r10, r0
fffd88be:	468b      	mov	r11, r1
fffd88c0:	f7ff bbb2 	b.w	fffd8028 <_strtod_l+0x330>
fffd88c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
fffd88c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
fffd88ca:	42b3      	cmp	r3, r6
fffd88cc:	f6ff abfb 	blt.w	fffd80c6 <_strtod_l+0x3ce>
fffd88d0:	f1c4 040f 	rsb	r4, r4, #15
fffd88d4:	f24d 1550 	movw	r5, #53584	; 0xd150
fffd88d8:	f6cf 75fd 	movt	r5, #65533	; 0xfffd
fffd88dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
fffd88e0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
fffd88e4:	1b34      	subs	r4, r6, r4
fffd88e6:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
fffd88ea:	e9d1 0100 	ldrd	r0, r1, [r1]
fffd88ee:	f002 fa73 	bl	fffdadd8 <__aeabi_dmul>
fffd88f2:	e9d5 2300 	ldrd	r2, r3, [r5]
fffd88f6:	f002 fa6f 	bl	fffdadd8 <__aeabi_dmul>
fffd88fa:	4682      	mov	r10, r0
fffd88fc:	468b      	mov	r11, r1
fffd88fe:	f7ff bb93 	b.w	fffd8028 <_strtod_l+0x330>
fffd8902:	bf00      	nop
fffd8904:	f3af 8000 	nop.w
fffd8908:	94a03595 	.word	0x94a03595
fffd890c:	3fcfffff 	.word	0x3fcfffff
fffd8910:	94a03595 	.word	0x94a03595
fffd8914:	3fdfffff 	.word	0x3fdfffff
fffd8918:	35afe535 	.word	0x35afe535
fffd891c:	3fe00000 	.word	0x3fe00000
fffd8920:	4276      	negs	r6, r6
fffd8922:	f016 020f 	ands.w	r2, r6, #15
fffd8926:	d00d      	beq.n	fffd8944 <_strtod_l+0xc4c>
fffd8928:	f24d 1350 	movw	r3, #53584	; 0xd150
fffd892c:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd8930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
fffd8934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
fffd8938:	e9d3 2300 	ldrd	r2, r3, [r3]
fffd893c:	f002 fb76 	bl	fffdb02c <__aeabi_ddiv>
fffd8940:	e9cd 0104 	strd	r0, r1, [sp, #16]
fffd8944:	1136      	asrs	r6, r6, #4
fffd8946:	f43f ac7d 	beq.w	fffd8244 <_strtod_l+0x54c>
fffd894a:	2e1f      	cmp	r6, #31
fffd894c:	dc4b      	bgt.n	fffd89e6 <_strtod_l+0xcee>
fffd894e:	f016 0310 	ands.w	r3, r6, #16
fffd8952:	930c      	str	r3, [sp, #48]	; 0x30
fffd8954:	f040 813b 	bne.w	fffd8bce <_strtod_l+0xed6>
fffd8958:	2e00      	cmp	r6, #0
fffd895a:	f340 8135 	ble.w	fffd8bc8 <_strtod_l+0xed0>
fffd895e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
fffd8962:	f64c 67f8 	movw	r7, #52984	; 0xcef8
fffd8966:	f6cf 77fd 	movt	r7, #65533	; 0xfffd
fffd896a:	f04f 0c00 	mov.w	r12, #0
fffd896e:	f016 0f01 	tst.w	r6, #1
fffd8972:	4610      	mov	r0, r2
fffd8974:	4619      	mov	r1, r3
fffd8976:	d007      	beq.n	fffd8988 <_strtod_l+0xc90>
fffd8978:	e9d7 2300 	ldrd	r2, r3, [r7]
fffd897c:	f002 fa2c 	bl	fffdadd8 <__aeabi_dmul>
fffd8980:	f04f 0c01 	mov.w	r12, #1
fffd8984:	4602      	mov	r2, r0
fffd8986:	460b      	mov	r3, r1
fffd8988:	1076      	asrs	r6, r6, #1
fffd898a:	f107 0708 	add.w	r7, r7, #8
fffd898e:	d1ee      	bne.n	fffd896e <_strtod_l+0xc76>
fffd8990:	f1bc 0f00 	cmp.w	r12, #0
fffd8994:	f040 8150 	bne.w	fffd8c38 <_strtod_l+0xf40>
fffd8998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
fffd899a:	2b00      	cmp	r3, #0
fffd899c:	f000 8114 	beq.w	fffd8bc8 <_strtod_l+0xed0>
fffd89a0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
fffd89a4:	f3c2 530a 	ubfx	r3, r2, #20, #11
fffd89a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
fffd89ac:	2b00      	cmp	r3, #0
fffd89ae:	dd11      	ble.n	fffd89d4 <_strtod_l+0xcdc>
fffd89b0:	2b1f      	cmp	r3, #31
fffd89b2:	f340 8128 	ble.w	fffd8c06 <_strtod_l+0xf0e>
fffd89b6:	2b34      	cmp	r3, #52	; 0x34
fffd89b8:	f04f 0100 	mov.w	r1, #0
fffd89bc:	bfd8      	it	le
fffd89be:	3b20      	suble	r3, #32
fffd89c0:	9104      	str	r1, [sp, #16]
fffd89c2:	bfd7      	itett	le
fffd89c4:	f04f 31ff 	movle.w	r1, #4294967295
fffd89c8:	f04f 735c 	movgt.w	r3, #57671680	; 0x3700000
fffd89cc:	fa01 f303 	lslle.w	r3, r1, r3
fffd89d0:	4013      	andle	r3, r2
fffd89d2:	9305      	str	r3, [sp, #20]
fffd89d4:	2200      	movs	r2, #0
fffd89d6:	2300      	movs	r3, #0
fffd89d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
fffd89dc:	f002 fc64 	bl	fffdb2a8 <__aeabi_dcmpeq>
fffd89e0:	2800      	cmp	r0, #0
fffd89e2:	f43f ac31 	beq.w	fffd8248 <_strtod_l+0x550>
fffd89e6:	9a07      	ldr	r2, [sp, #28]
fffd89e8:	2322      	movs	r3, #34	; 0x22
fffd89ea:	f04f 0a00 	mov.w	r10, #0
fffd89ee:	f04f 0b00 	mov.w	r11, #0
fffd89f2:	6013      	str	r3, [r2, #0]
fffd89f4:	f7ff bb18 	b.w	fffd8028 <_strtod_l+0x330>
fffd89f8:	f8dd a028 	ldr.w	r10, [sp, #40]	; 0x28
fffd89fc:	f1ba 3fff 	cmp.w	r10, #4294967295
fffd8a00:	f47f ae42 	bne.w	fffd8688 <_strtod_l+0x990>
fffd8a04:	e5be      	b.n	fffd8584 <_strtod_l+0x88c>
fffd8a06:	2200      	movs	r2, #0
fffd8a08:	9204      	str	r2, [sp, #16]
fffd8a0a:	9a07      	ldr	r2, [sp, #28]
fffd8a0c:	9305      	str	r3, [sp, #20]
fffd8a0e:	2322      	movs	r3, #34	; 0x22
fffd8a10:	e9dd ab04 	ldrd	r10, r11, [sp, #16]
fffd8a14:	6013      	str	r3, [r2, #0]
fffd8a16:	f7ff bb07 	b.w	fffd8028 <_strtod_l+0x330>
fffd8a1a:	2200      	movs	r2, #0
fffd8a1c:	2300      	movs	r3, #0
fffd8a1e:	f6cb 73e0 	movt	r3, #49120	; 0xbfe0
fffd8a22:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
fffd8a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
fffd8a28:	2500      	movs	r5, #0
fffd8a2a:	f6c3 75e0 	movt	r5, #16352	; 0x3fe0
fffd8a2e:	469a      	mov	r10, r3
fffd8a30:	e5ee      	b.n	fffd8610 <_strtod_l+0x918>
fffd8a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
fffd8a34:	465d      	mov	r5, r11
fffd8a36:	e9dd ab0a 	ldrd	r10, r11, [sp, #40]	; 0x28
fffd8a3a:	2b00      	cmp	r3, #0
fffd8a3c:	f040 8086 	bne.w	fffd8b4c <_strtod_l+0xe54>
fffd8a40:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
fffd8a44:	2900      	cmp	r1, #0
fffd8a46:	f040 8081 	bne.w	fffd8b4c <_strtod_l+0xe54>
fffd8a4a:	f3c2 0313 	ubfx	r3, r2, #0, #20
fffd8a4e:	2b00      	cmp	r3, #0
fffd8a50:	d17c      	bne.n	fffd8b4c <_strtod_l+0xe54>
fffd8a52:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
fffd8a56:	0d1b      	lsrs	r3, r3, #20
fffd8a58:	051b      	lsls	r3, r3, #20
fffd8a5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
fffd8a5e:	d975      	bls.n	fffd8b4c <_strtod_l+0xe54>
fffd8a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
fffd8a62:	6953      	ldr	r3, [r2, #20]
fffd8a64:	b913      	cbnz	r3, fffd8a6c <_strtod_l+0xd74>
fffd8a66:	6913      	ldr	r3, [r2, #16]
fffd8a68:	2b01      	cmp	r3, #1
fffd8a6a:	dd6f      	ble.n	fffd8b4c <_strtod_l+0xe54>
fffd8a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
fffd8a6e:	2201      	movs	r2, #1
fffd8a70:	9807      	ldr	r0, [sp, #28]
fffd8a72:	f001 fd23 	bl	fffda4bc <__lshift>
fffd8a76:	4649      	mov	r1, r9
fffd8a78:	9009      	str	r0, [sp, #36]	; 0x24
fffd8a7a:	f001 fd7b 	bl	fffda574 <__mcmp>
fffd8a7e:	2800      	cmp	r0, #0
fffd8a80:	dd64      	ble.n	fffd8b4c <_strtod_l+0xe54>
fffd8a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
fffd8a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
fffd8a88:	460a      	mov	r2, r1
fffd8a8a:	2b00      	cmp	r3, #0
fffd8a8c:	f000 80c3 	beq.w	fffd8c16 <_strtod_l+0xf1e>
fffd8a90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
fffd8a94:	0d1b      	lsrs	r3, r3, #20
fffd8a96:	051b      	lsls	r3, r3, #20
fffd8a98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
fffd8a9c:	f300 80bb 	bgt.w	fffd8c16 <_strtod_l+0xf1e>
fffd8aa0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
fffd8aa4:	f77f ae41 	ble.w	fffd872a <_strtod_l+0xa32>
fffd8aa8:	2300      	movs	r3, #0
fffd8aaa:	f6c3 1350 	movt	r3, #14672	; 0x3950
fffd8aae:	9319      	str	r3, [sp, #100]	; 0x64
fffd8ab0:	2300      	movs	r3, #0
fffd8ab2:	9318      	str	r3, [sp, #96]	; 0x60
fffd8ab4:	4650      	mov	r0, r10
fffd8ab6:	4659      	mov	r1, r11
fffd8ab8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
fffd8abc:	f002 f98c 	bl	fffdadd8 <__aeabi_dmul>
fffd8ac0:	4682      	mov	r10, r0
fffd8ac2:	468b      	mov	r11, r1
fffd8ac4:	2900      	cmp	r1, #0
fffd8ac6:	d144      	bne.n	fffd8b52 <_strtod_l+0xe5a>
fffd8ac8:	4603      	mov	r3, r0
fffd8aca:	981e      	ldr	r0, [sp, #120]	; 0x78
fffd8acc:	2b00      	cmp	r3, #0
fffd8ace:	f47f ad3a 	bne.w	fffd8546 <_strtod_l+0x84e>
fffd8ad2:	9a07      	ldr	r2, [sp, #28]
fffd8ad4:	2322      	movs	r3, #34	; 0x22
fffd8ad6:	6013      	str	r3, [r2, #0]
fffd8ad8:	e535      	b.n	fffd8546 <_strtod_l+0x84e>
fffd8ada:	9911      	ldr	r1, [sp, #68]	; 0x44
fffd8adc:	463b      	mov	r3, r7
fffd8ade:	465d      	mov	r5, r11
fffd8ae0:	4638      	mov	r0, r7
fffd8ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
fffd8ae6:	4657      	mov	r7, r10
fffd8ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
fffd8aec:	e9dd ab0a 	ldrd	r10, r11, [sp, #40]	; 0x28
fffd8af0:	f2c0 020f 	movt	r2, #15
fffd8af4:	b379      	cbz	r1, fffd8b56 <_strtod_l+0xe5e>
fffd8af6:	4293      	cmp	r3, r2
fffd8af8:	d131      	bne.n	fffd8b5e <_strtod_l+0xe66>
fffd8afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
fffd8afc:	9904      	ldr	r1, [sp, #16]
fffd8afe:	2b00      	cmp	r3, #0
fffd8b00:	d07e      	beq.n	fffd8c00 <_strtod_l+0xf08>
fffd8b02:	2300      	movs	r3, #0
fffd8b04:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd8b08:	4003      	ands	r3, r0
fffd8b0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
fffd8b0e:	d877      	bhi.n	fffd8c00 <_strtod_l+0xf08>
fffd8b10:	0d1b      	lsrs	r3, r3, #20
fffd8b12:	f04f 32ff 	mov.w	r2, #4294967295
fffd8b16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
fffd8b1a:	fa02 f303 	lsl.w	r3, r2, r3
fffd8b1e:	4299      	cmp	r1, r3
fffd8b20:	d11d      	bne.n	fffd8b5e <_strtod_l+0xe66>
fffd8b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
fffd8b26:	f6c7 73ef 	movt	r3, #32751	; 0x7fef
fffd8b2a:	4298      	cmp	r0, r3
fffd8b2c:	d102      	bne.n	fffd8b34 <_strtod_l+0xe3c>
fffd8b2e:	3101      	adds	r1, #1
fffd8b30:	f43f ad29 	beq.w	fffd8586 <_strtod_l+0x88e>
fffd8b34:	2300      	movs	r3, #0
fffd8b36:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd8b3a:	4602      	mov	r2, r0
fffd8b3c:	401a      	ands	r2, r3
fffd8b3e:	f502 1380 	add.w	r3, r2, #1048576	; 0x100000
fffd8b42:	9305      	str	r3, [sp, #20]
fffd8b44:	2300      	movs	r3, #0
fffd8b46:	9304      	str	r3, [sp, #16]
fffd8b48:	e9dd ab04 	ldrd	r10, r11, [sp, #16]
fffd8b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
fffd8b4e:	2b00      	cmp	r3, #0
fffd8b50:	d1aa      	bne.n	fffd8aa8 <_strtod_l+0xdb0>
fffd8b52:	981e      	ldr	r0, [sp, #120]	; 0x78
fffd8b54:	e4f7      	b.n	fffd8546 <_strtod_l+0x84e>
fffd8b56:	b913      	cbnz	r3, fffd8b5e <_strtod_l+0xe66>
fffd8b58:	9b04      	ldr	r3, [sp, #16]
fffd8b5a:	2b00      	cmp	r3, #0
fffd8b5c:	d091      	beq.n	fffd8a82 <_strtod_l+0xd8a>
fffd8b5e:	b1cf      	cbz	r7, fffd8b94 <_strtod_l+0xe9c>
fffd8b60:	4207      	tst	r7, r0
fffd8b62:	d0f3      	beq.n	fffd8b4c <_strtod_l+0xe54>
fffd8b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
fffd8b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
fffd8b6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
fffd8b6c:	2b00      	cmp	r3, #0
fffd8b6e:	d035      	beq.n	fffd8bdc <_strtod_l+0xee4>
fffd8b70:	f7ff f8a0 	bl	fffd7cb4 <sulp>
fffd8b74:	4602      	mov	r2, r0
fffd8b76:	460b      	mov	r3, r1
fffd8b78:	4650      	mov	r0, r10
fffd8b7a:	4659      	mov	r1, r11
fffd8b7c:	f001 ff76 	bl	fffdaa6c <__adddf3>
fffd8b80:	4682      	mov	r10, r0
fffd8b82:	468b      	mov	r11, r1
fffd8b84:	e7e2      	b.n	fffd8b4c <_strtod_l+0xe54>
fffd8b86:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
fffd8b8a:	9305      	str	r3, [sp, #20]
fffd8b8c:	2300      	movs	r3, #0
fffd8b8e:	930c      	str	r3, [sp, #48]	; 0x30
fffd8b90:	f7ff bb5a 	b.w	fffd8248 <_strtod_l+0x550>
fffd8b94:	9b04      	ldr	r3, [sp, #16]
fffd8b96:	ea18 0f03 	tst.w	r8, r3
fffd8b9a:	d0d7      	beq.n	fffd8b4c <_strtod_l+0xe54>
fffd8b9c:	e7e2      	b.n	fffd8b64 <_strtod_l+0xe6c>
fffd8b9e:	a81d      	add	r0, sp, #116	; 0x74
fffd8ba0:	f64c 61e4 	movw	r1, #52964	; 0xcee4
fffd8ba4:	aa20      	add	r2, sp, #128	; 0x80
fffd8ba6:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
fffd8baa:	f001 f8cd 	bl	fffd9d48 <__hexnan>
fffd8bae:	2805      	cmp	r0, #5
fffd8bb0:	f47f ac96 	bne.w	fffd84e0 <_strtod_l+0x7e8>
fffd8bb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
fffd8bb6:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
fffd8bba:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
fffd8bbe:	9305      	str	r3, [sp, #20]
fffd8bc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
fffd8bc2:	9304      	str	r3, [sp, #16]
fffd8bc4:	f7ff ba60 	b.w	fffd8088 <_strtod_l+0x390>
fffd8bc8:	2300      	movs	r3, #0
fffd8bca:	930c      	str	r3, [sp, #48]	; 0x30
fffd8bcc:	e702      	b.n	fffd89d4 <_strtod_l+0xcdc>
fffd8bce:	2e00      	cmp	r6, #0
fffd8bd0:	f04f 036a 	mov.w	r3, #106	; 0x6a
fffd8bd4:	930c      	str	r3, [sp, #48]	; 0x30
fffd8bd6:	f73f aec2 	bgt.w	fffd895e <_strtod_l+0xc66>
fffd8bda:	e6e1      	b.n	fffd89a0 <_strtod_l+0xca8>
fffd8bdc:	f7ff f86a 	bl	fffd7cb4 <sulp>
fffd8be0:	4602      	mov	r2, r0
fffd8be2:	460b      	mov	r3, r1
fffd8be4:	4650      	mov	r0, r10
fffd8be6:	4659      	mov	r1, r11
fffd8be8:	f001 ff3e 	bl	fffdaa68 <__aeabi_dsub>
fffd8bec:	2200      	movs	r2, #0
fffd8bee:	2300      	movs	r3, #0
fffd8bf0:	4682      	mov	r10, r0
fffd8bf2:	468b      	mov	r11, r1
fffd8bf4:	f002 fb58 	bl	fffdb2a8 <__aeabi_dcmpeq>
fffd8bf8:	2800      	cmp	r0, #0
fffd8bfa:	f47f ad96 	bne.w	fffd872a <_strtod_l+0xa32>
fffd8bfe:	e7a5      	b.n	fffd8b4c <_strtod_l+0xe54>
fffd8c00:	f04f 33ff 	mov.w	r3, #4294967295
fffd8c04:	e78b      	b.n	fffd8b1e <_strtod_l+0xe26>
fffd8c06:	f04f 32ff 	mov.w	r2, #4294967295
fffd8c0a:	fa02 f303 	lsl.w	r3, r2, r3
fffd8c0e:	9a04      	ldr	r2, [sp, #16]
fffd8c10:	401a      	ands	r2, r3
fffd8c12:	9204      	str	r2, [sp, #16]
fffd8c14:	e6de      	b.n	fffd89d4 <_strtod_l+0xcdc>
fffd8c16:	2300      	movs	r3, #0
fffd8c18:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffd8c1c:	4013      	ands	r3, r2
fffd8c1e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
fffd8c22:	ea6f 5313 	mvn.w	r3, r3, lsr #20
fffd8c26:	ea6f 5303 	mvn.w	r3, r3, lsl #20
fffd8c2a:	9305      	str	r3, [sp, #20]
fffd8c2c:	f04f 33ff 	mov.w	r3, #4294967295
fffd8c30:	9304      	str	r3, [sp, #16]
fffd8c32:	e9dd ab04 	ldrd	r10, r11, [sp, #16]
fffd8c36:	e789      	b.n	fffd8b4c <_strtod_l+0xe54>
fffd8c38:	e9cd 2304 	strd	r2, r3, [sp, #16]
fffd8c3c:	e6ac      	b.n	fffd8998 <_strtod_l+0xca0>
fffd8c3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
fffd8c42:	e600      	b.n	fffd8846 <_strtod_l+0xb4e>
fffd8c44:	461a      	mov	r2, r3
fffd8c46:	f7ff b989 	b.w	fffd7f5c <_strtod_l+0x264>
fffd8c4a:	bf00      	nop

fffd8c4c <_strtod_r>:
fffd8c4c:	f24d 2388 	movw	r3, #53896	; 0xd288
fffd8c50:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd8c54:	b410      	push	{r4}
fffd8c56:	f24d 64b8 	movw	r4, #54968	; 0xd6b8
fffd8c5a:	681b      	ldr	r3, [r3, #0]
fffd8c5c:	f6cf 74fd 	movt	r4, #65533	; 0xfffd
fffd8c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
fffd8c62:	2b00      	cmp	r3, #0
fffd8c64:	bf08      	it	eq
fffd8c66:	4623      	moveq	r3, r4
fffd8c68:	bc10      	pop	{r4}
fffd8c6a:	f7ff b845 	b.w	fffd7cf8 <_strtod_l>
fffd8c6e:	bf00      	nop

fffd8c70 <_strtol_l.isra.0>:
fffd8c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd8c74:	b083      	sub	sp, #12
fffd8c76:	460f      	mov	r7, r1
fffd8c78:	4690      	mov	r8, r2
fffd8c7a:	9001      	str	r0, [sp, #4]
fffd8c7c:	461e      	mov	r6, r3
fffd8c7e:	468b      	mov	r11, r1
fffd8c80:	e000      	b.n	fffd8c84 <_strtol_l.isra.0+0x14>
fffd8c82:	46ab      	mov	r11, r5
fffd8c84:	465d      	mov	r5, r11
fffd8c86:	980c      	ldr	r0, [sp, #48]	; 0x30
fffd8c88:	f815 4b01 	ldrb.w	r4, [r5], #1
fffd8c8c:	f7fe fac2 	bl	fffd7214 <__locale_ctype_ptr_l>
fffd8c90:	4420      	add	r0, r4
fffd8c92:	7842      	ldrb	r2, [r0, #1]
fffd8c94:	f012 0208 	ands.w	r2, r2, #8
fffd8c98:	d1f3      	bne.n	fffd8c82 <_strtol_l.isra.0+0x12>
fffd8c9a:	2c2d      	cmp	r4, #45	; 0x2d
fffd8c9c:	d062      	beq.n	fffd8d64 <_strtol_l.isra.0+0xf4>
fffd8c9e:	2c2b      	cmp	r4, #43	; 0x2b
fffd8ca0:	4692      	mov	r10, r2
fffd8ca2:	bf04      	itt	eq
fffd8ca4:	f10b 0502 	addeq.w	r5, r11, #2
fffd8ca8:	f89b 4001 	ldrbeq.w	r4, [r11, #1]
fffd8cac:	f036 0310 	bics.w	r3, r6, #16
fffd8cb0:	d103      	bne.n	fffd8cba <_strtol_l.isra.0+0x4a>
fffd8cb2:	2c30      	cmp	r4, #48	; 0x30
fffd8cb4:	d05d      	beq.n	fffd8d72 <_strtol_l.isra.0+0x102>
fffd8cb6:	b906      	cbnz	r6, fffd8cba <_strtol_l.isra.0+0x4a>
fffd8cb8:	260a      	movs	r6, #10
fffd8cba:	46b3      	mov	r11, r6
fffd8cbc:	f1ba 0f00 	cmp.w	r10, #0
fffd8cc0:	4659      	mov	r1, r11
fffd8cc2:	bf0c      	ite	eq
fffd8cc4:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
fffd8cc8:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
fffd8ccc:	4648      	mov	r0, r9
fffd8cce:	f7fc fd69 	bl	fffd57a4 <__aeabi_uidivmod>
fffd8cd2:	2200      	movs	r2, #0
fffd8cd4:	4686      	mov	lr, r0
fffd8cd6:	4610      	mov	r0, r2
fffd8cd8:	e00e      	b.n	fffd8cf8 <_strtol_l.isra.0+0x88>
fffd8cda:	ebae 0400 	sub.w	r4, lr, r0
fffd8cde:	4299      	cmp	r1, r3
fffd8ce0:	fab4 f484 	clz	r4, r4
fffd8ce4:	ea4f 1454 	mov.w	r4, r4, lsr #5
fffd8ce8:	bfa8      	it	ge
fffd8cea:	2400      	movge	r4, #0
fffd8cec:	b9f4      	cbnz	r4, fffd8d2c <_strtol_l.isra.0+0xbc>
fffd8cee:	fb0b 3000 	mla	r0, r11, r0, r3
fffd8cf2:	2201      	movs	r2, #1
fffd8cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
fffd8cf8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
fffd8cfc:	2b09      	cmp	r3, #9
fffd8cfe:	d90c      	bls.n	fffd8d1a <_strtol_l.isra.0+0xaa>
fffd8d00:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
fffd8d04:	2b19      	cmp	r3, #25
fffd8d06:	bf98      	it	ls
fffd8d08:	f1a4 0337 	subls.w	r3, r4, #55	; 0x37
fffd8d0c:	d905      	bls.n	fffd8d1a <_strtol_l.isra.0+0xaa>
fffd8d0e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
fffd8d12:	2b19      	cmp	r3, #25
fffd8d14:	d80d      	bhi.n	fffd8d32 <_strtol_l.isra.0+0xc2>
fffd8d16:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
fffd8d1a:	429e      	cmp	r6, r3
fffd8d1c:	dd09      	ble.n	fffd8d32 <_strtol_l.isra.0+0xc2>
fffd8d1e:	4586      	cmp	lr, r0
fffd8d20:	bf2c      	ite	cs
fffd8d22:	2400      	movcs	r4, #0
fffd8d24:	2401      	movcc	r4, #1
fffd8d26:	ea54 72d2 	orrs.w	r2, r4, r2, lsr #31
fffd8d2a:	d0d6      	beq.n	fffd8cda <_strtol_l.isra.0+0x6a>
fffd8d2c:	f04f 32ff 	mov.w	r2, #4294967295
fffd8d30:	e7e0      	b.n	fffd8cf4 <_strtol_l.isra.0+0x84>
fffd8d32:	1c53      	adds	r3, r2, #1
fffd8d34:	d00c      	beq.n	fffd8d50 <_strtol_l.isra.0+0xe0>
fffd8d36:	f1ba 0f00 	cmp.w	r10, #0
fffd8d3a:	d000      	beq.n	fffd8d3e <_strtol_l.isra.0+0xce>
fffd8d3c:	4240      	negs	r0, r0
fffd8d3e:	f1b8 0f00 	cmp.w	r8, #0
fffd8d42:	d002      	beq.n	fffd8d4a <_strtol_l.isra.0+0xda>
fffd8d44:	b9fa      	cbnz	r2, fffd8d86 <_strtol_l.isra.0+0x116>
fffd8d46:	f8c8 7000 	str.w	r7, [r8]
fffd8d4a:	b003      	add	sp, #12
fffd8d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd8d50:	9a01      	ldr	r2, [sp, #4]
fffd8d52:	2322      	movs	r3, #34	; 0x22
fffd8d54:	4648      	mov	r0, r9
fffd8d56:	6013      	str	r3, [r2, #0]
fffd8d58:	f1b8 0f00 	cmp.w	r8, #0
fffd8d5c:	d0f5      	beq.n	fffd8d4a <_strtol_l.isra.0+0xda>
fffd8d5e:	1e6f      	subs	r7, r5, #1
fffd8d60:	4648      	mov	r0, r9
fffd8d62:	e7f0      	b.n	fffd8d46 <_strtol_l.isra.0+0xd6>
fffd8d64:	f10b 0502 	add.w	r5, r11, #2
fffd8d68:	f89b 4001 	ldrb.w	r4, [r11, #1]
fffd8d6c:	f04f 0a01 	mov.w	r10, #1
fffd8d70:	e79c      	b.n	fffd8cac <_strtol_l.isra.0+0x3c>
fffd8d72:	782b      	ldrb	r3, [r5, #0]
fffd8d74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
fffd8d78:	2b58      	cmp	r3, #88	; 0x58
fffd8d7a:	d106      	bne.n	fffd8d8a <_strtol_l.isra.0+0x11a>
fffd8d7c:	2610      	movs	r6, #16
fffd8d7e:	786c      	ldrb	r4, [r5, #1]
fffd8d80:	46b3      	mov	r11, r6
fffd8d82:	3502      	adds	r5, #2
fffd8d84:	e79a      	b.n	fffd8cbc <_strtol_l.isra.0+0x4c>
fffd8d86:	4681      	mov	r9, r0
fffd8d88:	e7e9      	b.n	fffd8d5e <_strtol_l.isra.0+0xee>
fffd8d8a:	2e00      	cmp	r6, #0
fffd8d8c:	d195      	bne.n	fffd8cba <_strtol_l.isra.0+0x4a>
fffd8d8e:	2608      	movs	r6, #8
fffd8d90:	46b3      	mov	r11, r6
fffd8d92:	e793      	b.n	fffd8cbc <_strtol_l.isra.0+0x4c>

fffd8d94 <_strtol_r>:
fffd8d94:	b530      	push	{r4, r5, lr}
fffd8d96:	f24d 2488 	movw	r4, #53896	; 0xd288
fffd8d9a:	f6cf 74fd 	movt	r4, #65533	; 0xfffd
fffd8d9e:	b083      	sub	sp, #12
fffd8da0:	f24d 65b8 	movw	r5, #54968	; 0xd6b8
fffd8da4:	f6cf 75fd 	movt	r5, #65533	; 0xfffd
fffd8da8:	6824      	ldr	r4, [r4, #0]
fffd8daa:	6b64      	ldr	r4, [r4, #52]	; 0x34
fffd8dac:	2c00      	cmp	r4, #0
fffd8dae:	bf08      	it	eq
fffd8db0:	462c      	moveq	r4, r5
fffd8db2:	9400      	str	r4, [sp, #0]
fffd8db4:	f7ff ff5c 	bl	fffd8c70 <_strtol_l.isra.0>
fffd8db8:	b003      	add	sp, #12
fffd8dba:	bd30      	pop	{r4, r5, pc}

fffd8dbc <_strtoll_l.isra.0>:
fffd8dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd8dc0:	b089      	sub	sp, #36	; 0x24
fffd8dc2:	461f      	mov	r7, r3
fffd8dc4:	4688      	mov	r8, r1
fffd8dc6:	e9cd 1006 	strd	r1, r0, [sp, #24]
fffd8dca:	9203      	str	r2, [sp, #12]
fffd8dcc:	e000      	b.n	fffd8dd0 <_strtoll_l.isra.0+0x14>
fffd8dce:	46a8      	mov	r8, r5
fffd8dd0:	4645      	mov	r5, r8
fffd8dd2:	9812      	ldr	r0, [sp, #72]	; 0x48
fffd8dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
fffd8dd8:	f7fe fa1c 	bl	fffd7214 <__locale_ctype_ptr_l>
fffd8ddc:	4420      	add	r0, r4
fffd8dde:	7846      	ldrb	r6, [r0, #1]
fffd8de0:	f016 0608 	ands.w	r6, r6, #8
fffd8de4:	d1f3      	bne.n	fffd8dce <_strtoll_l.isra.0+0x12>
fffd8de6:	2c2d      	cmp	r4, #45	; 0x2d
fffd8de8:	f000 8094 	beq.w	fffd8f14 <_strtoll_l.isra.0+0x158>
fffd8dec:	2c2b      	cmp	r4, #43	; 0x2b
fffd8dee:	bf04      	itt	eq
fffd8df0:	f108 0502 	addeq.w	r5, r8, #2
fffd8df4:	f898 4001 	ldrbeq.w	r4, [r8, #1]
fffd8df8:	f037 0310 	bics.w	r3, r7, #16
fffd8dfc:	d163      	bne.n	fffd8ec6 <_strtoll_l.isra.0+0x10a>
fffd8dfe:	2c30      	cmp	r4, #48	; 0x30
fffd8e00:	f000 808e 	beq.w	fffd8f20 <_strtoll_l.isra.0+0x164>
fffd8e04:	2f00      	cmp	r7, #0
fffd8e06:	d15e      	bne.n	fffd8ec6 <_strtoll_l.isra.0+0x10a>
fffd8e08:	f04f 0a0a 	mov.w	r10, #10
fffd8e0c:	f04f 0b00 	mov.w	r11, #0
fffd8e10:	270a      	movs	r7, #10
fffd8e12:	2e00      	cmp	r6, #0
fffd8e14:	d05c      	beq.n	fffd8ed0 <_strtoll_l.isra.0+0x114>
fffd8e16:	2000      	movs	r0, #0
fffd8e18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
fffd8e1c:	e9cd 0304 	strd	r0, r3, [sp, #16]
fffd8e20:	4652      	mov	r2, r10
fffd8e22:	465b      	mov	r3, r11
fffd8e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
fffd8e28:	f002 fb1e 	bl	fffdb468 <__aeabi_uldivmod>
fffd8e2c:	2300      	movs	r3, #0
fffd8e2e:	e9cd ab00 	strd	r10, r11, [sp]
fffd8e32:	46b6      	mov	lr, r6
fffd8e34:	4680      	mov	r8, r0
fffd8e36:	4689      	mov	r9, r1
fffd8e38:	2000      	movs	r0, #0
fffd8e3a:	2100      	movs	r1, #0
fffd8e3c:	e01d      	b.n	fffd8e7a <_strtoll_l.isra.0+0xbe>
fffd8e3e:	4589      	cmp	r9, r1
fffd8e40:	bf06      	itte	eq
fffd8e42:	4580      	cmpeq	r8, r0
fffd8e44:	2301      	moveq	r3, #1
fffd8e46:	2300      	movne	r3, #0
fffd8e48:	42a2      	cmp	r2, r4
fffd8e4a:	bfac      	ite	ge
fffd8e4c:	2300      	movge	r3, #0
fffd8e4e:	f003 0301 	andlt.w	r3, r3, #1
fffd8e52:	bb9b      	cbnz	r3, fffd8ebc <_strtoll_l.isra.0+0x100>
fffd8e54:	9e01      	ldr	r6, [sp, #4]
fffd8e56:	4682      	mov	r10, r0
fffd8e58:	2301      	movs	r3, #1
fffd8e5a:	fb00 fc06 	mul.w	r12, r0, r6
fffd8e5e:	9800      	ldr	r0, [sp, #0]
fffd8e60:	fb00 cc01 	mla	r12, r0, r1, r12
fffd8e64:	fbaa 0100 	umull	r0, r1, r10, r0
fffd8e68:	4461      	add	r1, r12
fffd8e6a:	eb10 0a04 	adds.w	r10, r0, r4
fffd8e6e:	eb41 7be4 	adc.w	r11, r1, r4, asr #31
fffd8e72:	4650      	mov	r0, r10
fffd8e74:	4659      	mov	r1, r11
fffd8e76:	f815 4b01 	ldrb.w	r4, [r5], #1
fffd8e7a:	f1a4 0c30 	sub.w	r12, r4, #48	; 0x30
fffd8e7e:	f1bc 0f09 	cmp.w	r12, #9
fffd8e82:	bf98      	it	ls
fffd8e84:	4664      	movls	r4, r12
fffd8e86:	d90c      	bls.n	fffd8ea2 <_strtoll_l.isra.0+0xe6>
fffd8e88:	f1a4 0c41 	sub.w	r12, r4, #65	; 0x41
fffd8e8c:	f1bc 0f19 	cmp.w	r12, #25
fffd8e90:	bf98      	it	ls
fffd8e92:	3c37      	subls	r4, #55	; 0x37
fffd8e94:	d905      	bls.n	fffd8ea2 <_strtoll_l.isra.0+0xe6>
fffd8e96:	f1a4 0c61 	sub.w	r12, r4, #97	; 0x61
fffd8e9a:	f1bc 0f19 	cmp.w	r12, #25
fffd8e9e:	d81e      	bhi.n	fffd8ede <_strtoll_l.isra.0+0x122>
fffd8ea0:	3c57      	subs	r4, #87	; 0x57
fffd8ea2:	42a7      	cmp	r7, r4
fffd8ea4:	dd1b      	ble.n	fffd8ede <_strtoll_l.isra.0+0x122>
fffd8ea6:	4589      	cmp	r9, r1
fffd8ea8:	bf08      	it	eq
fffd8eaa:	4580      	cmpeq	r8, r0
fffd8eac:	bf34      	ite	cc
fffd8eae:	f04f 0c01 	movcc.w	r12, #1
fffd8eb2:	f04f 0c00 	movcs.w	r12, #0
fffd8eb6:	ea5c 73d3 	orrs.w	r3, r12, r3, lsr #31
fffd8eba:	d0c0      	beq.n	fffd8e3e <_strtoll_l.isra.0+0x82>
fffd8ebc:	f04f 33ff 	mov.w	r3, #4294967295
fffd8ec0:	e7d9      	b.n	fffd8e76 <_strtoll_l.isra.0+0xba>
fffd8ec2:	2f00      	cmp	r7, #0
fffd8ec4:	d03f      	beq.n	fffd8f46 <_strtoll_l.isra.0+0x18a>
fffd8ec6:	46ba      	mov	r10, r7
fffd8ec8:	ea4f 7be7 	mov.w	r11, r7, asr #31
fffd8ecc:	2e00      	cmp	r6, #0
fffd8ece:	d1a2      	bne.n	fffd8e16 <_strtoll_l.isra.0+0x5a>
fffd8ed0:	f04f 31ff 	mov.w	r1, #4294967295
fffd8ed4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
fffd8ed8:	e9cd 1304 	strd	r1, r3, [sp, #16]
fffd8edc:	e7a0      	b.n	fffd8e20 <_strtoll_l.isra.0+0x64>
fffd8ede:	1c5a      	adds	r2, r3, #1
fffd8ee0:	4676      	mov	r6, lr
fffd8ee2:	d00d      	beq.n	fffd8f00 <_strtoll_l.isra.0+0x144>
fffd8ee4:	b116      	cbz	r6, fffd8eec <_strtoll_l.isra.0+0x130>
fffd8ee6:	4240      	negs	r0, r0
fffd8ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
fffd8eec:	9a03      	ldr	r2, [sp, #12]
fffd8eee:	b122      	cbz	r2, fffd8efa <_strtoll_l.isra.0+0x13e>
fffd8ef0:	bb1b      	cbnz	r3, fffd8f3a <_strtoll_l.isra.0+0x17e>
fffd8ef2:	9b03      	ldr	r3, [sp, #12]
fffd8ef4:	461a      	mov	r2, r3
fffd8ef6:	9b06      	ldr	r3, [sp, #24]
fffd8ef8:	6013      	str	r3, [r2, #0]
fffd8efa:	b009      	add	sp, #36	; 0x24
fffd8efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd8f00:	9a07      	ldr	r2, [sp, #28]
fffd8f02:	2322      	movs	r3, #34	; 0x22
fffd8f04:	6013      	str	r3, [r2, #0]
fffd8f06:	9b03      	ldr	r3, [sp, #12]
fffd8f08:	b1d3      	cbz	r3, fffd8f40 <_strtoll_l.isra.0+0x184>
fffd8f0a:	1e6b      	subs	r3, r5, #1
fffd8f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
fffd8f10:	9306      	str	r3, [sp, #24]
fffd8f12:	e7ee      	b.n	fffd8ef2 <_strtoll_l.isra.0+0x136>
fffd8f14:	f108 0502 	add.w	r5, r8, #2
fffd8f18:	f898 4001 	ldrb.w	r4, [r8, #1]
fffd8f1c:	2601      	movs	r6, #1
fffd8f1e:	e76b      	b.n	fffd8df8 <_strtoll_l.isra.0+0x3c>
fffd8f20:	782b      	ldrb	r3, [r5, #0]
fffd8f22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
fffd8f26:	2b58      	cmp	r3, #88	; 0x58
fffd8f28:	d1cb      	bne.n	fffd8ec2 <_strtoll_l.isra.0+0x106>
fffd8f2a:	786c      	ldrb	r4, [r5, #1]
fffd8f2c:	f04f 0a10 	mov.w	r10, #16
fffd8f30:	f04f 0b00 	mov.w	r11, #0
fffd8f34:	3502      	adds	r5, #2
fffd8f36:	2710      	movs	r7, #16
fffd8f38:	e76b      	b.n	fffd8e12 <_strtoll_l.isra.0+0x56>
fffd8f3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
fffd8f3e:	e7e4      	b.n	fffd8f0a <_strtoll_l.isra.0+0x14e>
fffd8f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
fffd8f44:	e7d9      	b.n	fffd8efa <_strtoll_l.isra.0+0x13e>
fffd8f46:	f04f 0a08 	mov.w	r10, #8
fffd8f4a:	f04f 0b00 	mov.w	r11, #0
fffd8f4e:	2708      	movs	r7, #8
fffd8f50:	e75f      	b.n	fffd8e12 <_strtoll_l.isra.0+0x56>
fffd8f52:	bf00      	nop

fffd8f54 <_strtoll_r>:
fffd8f54:	b530      	push	{r4, r5, lr}
fffd8f56:	f24d 2488 	movw	r4, #53896	; 0xd288
fffd8f5a:	f6cf 74fd 	movt	r4, #65533	; 0xfffd
fffd8f5e:	b083      	sub	sp, #12
fffd8f60:	f24d 65b8 	movw	r5, #54968	; 0xd6b8
fffd8f64:	f6cf 75fd 	movt	r5, #65533	; 0xfffd
fffd8f68:	6824      	ldr	r4, [r4, #0]
fffd8f6a:	6b64      	ldr	r4, [r4, #52]	; 0x34
fffd8f6c:	2c00      	cmp	r4, #0
fffd8f6e:	bf08      	it	eq
fffd8f70:	462c      	moveq	r4, r5
fffd8f72:	9400      	str	r4, [sp, #0]
fffd8f74:	f7ff ff22 	bl	fffd8dbc <_strtoll_l.isra.0>
fffd8f78:	b003      	add	sp, #12
fffd8f7a:	bd30      	pop	{r4, r5, pc}

fffd8f7c <_strtoul_l.isra.0>:
fffd8f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd8f80:	460f      	mov	r7, r1
fffd8f82:	b083      	sub	sp, #12
fffd8f84:	4681      	mov	r9, r0
fffd8f86:	4690      	mov	r8, r2
fffd8f88:	469a      	mov	r10, r3
fffd8f8a:	468b      	mov	r11, r1
fffd8f8c:	e000      	b.n	fffd8f90 <_strtoul_l.isra.0+0x14>
fffd8f8e:	46a3      	mov	r11, r4
fffd8f90:	465c      	mov	r4, r11
fffd8f92:	980c      	ldr	r0, [sp, #48]	; 0x30
fffd8f94:	f814 6b01 	ldrb.w	r6, [r4], #1
fffd8f98:	f7fe f93c 	bl	fffd7214 <__locale_ctype_ptr_l>
fffd8f9c:	4430      	add	r0, r6
fffd8f9e:	7845      	ldrb	r5, [r0, #1]
fffd8fa0:	f015 0508 	ands.w	r5, r5, #8
fffd8fa4:	d1f3      	bne.n	fffd8f8e <_strtoul_l.isra.0+0x12>
fffd8fa6:	2e2d      	cmp	r6, #45	; 0x2d
fffd8fa8:	d072      	beq.n	fffd9090 <_strtoul_l.isra.0+0x114>
fffd8faa:	2e2b      	cmp	r6, #43	; 0x2b
fffd8fac:	bf06      	itte	eq
fffd8fae:	f10b 0402 	addeq.w	r4, r11, #2
fffd8fb2:	f89b 3001 	ldrbeq.w	r3, [r11, #1]
fffd8fb6:	4633      	movne	r3, r6
fffd8fb8:	f03a 0210 	bics.w	r2, r10, #16
fffd8fbc:	d110      	bne.n	fffd8fe0 <_strtoul_l.isra.0+0x64>
fffd8fbe:	2b30      	cmp	r3, #48	; 0x30
fffd8fc0:	d06c      	beq.n	fffd909c <_strtoul_l.isra.0+0x120>
fffd8fc2:	f1ba 0f00 	cmp.w	r10, #0
fffd8fc6:	d10b      	bne.n	fffd8fe0 <_strtoul_l.isra.0+0x64>
fffd8fc8:	f04f 0a0a 	mov.w	r10, #10
fffd8fcc:	f649 1699 	movw	r6, #39321	; 0x9999
fffd8fd0:	46d3      	mov	r11, r10
fffd8fd2:	f6c1 1699 	movt	r6, #6553	; 0x1999
fffd8fd6:	2105      	movs	r1, #5
fffd8fd8:	e010      	b.n	fffd8ffc <_strtoul_l.isra.0+0x80>
fffd8fda:	f1ba 0f00 	cmp.w	r10, #0
fffd8fde:	d06b      	beq.n	fffd90b8 <_strtoul_l.isra.0+0x13c>
fffd8fe0:	4651      	mov	r1, r10
fffd8fe2:	f04f 30ff 	mov.w	r0, #4294967295
fffd8fe6:	9301      	str	r3, [sp, #4]
fffd8fe8:	f7fc faae 	bl	fffd5548 <__udivsi3>
fffd8fec:	4651      	mov	r1, r10
fffd8fee:	46d3      	mov	r11, r10
fffd8ff0:	4606      	mov	r6, r0
fffd8ff2:	f04f 30ff 	mov.w	r0, #4294967295
fffd8ff6:	f7fc fbd5 	bl	fffd57a4 <__aeabi_uidivmod>
fffd8ffa:	9b01      	ldr	r3, [sp, #4]
fffd8ffc:	f04f 0c00 	mov.w	r12, #0
fffd9000:	4660      	mov	r0, r12
fffd9002:	e00e      	b.n	fffd9022 <_strtoul_l.isra.0+0xa6>
fffd9004:	1b83      	subs	r3, r0, r6
fffd9006:	428a      	cmp	r2, r1
fffd9008:	fab3 f383 	clz	r3, r3
fffd900c:	ea4f 1353 	mov.w	r3, r3, lsr #5
fffd9010:	bfd8      	it	le
fffd9012:	2300      	movle	r3, #0
fffd9014:	b9fb      	cbnz	r3, fffd9056 <_strtoul_l.isra.0+0xda>
fffd9016:	fb0b 2000 	mla	r0, r11, r0, r2
fffd901a:	f04f 0c01 	mov.w	r12, #1
fffd901e:	f814 3b01 	ldrb.w	r3, [r4], #1
fffd9022:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
fffd9026:	2a09      	cmp	r2, #9
fffd9028:	d90c      	bls.n	fffd9044 <_strtoul_l.isra.0+0xc8>
fffd902a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
fffd902e:	2a19      	cmp	r2, #25
fffd9030:	bf98      	it	ls
fffd9032:	f1a3 0237 	subls.w	r2, r3, #55	; 0x37
fffd9036:	d905      	bls.n	fffd9044 <_strtoul_l.isra.0+0xc8>
fffd9038:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
fffd903c:	2a19      	cmp	r2, #25
fffd903e:	d80d      	bhi.n	fffd905c <_strtoul_l.isra.0+0xe0>
fffd9040:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
fffd9044:	4592      	cmp	r10, r2
fffd9046:	dd09      	ble.n	fffd905c <_strtoul_l.isra.0+0xe0>
fffd9048:	42b0      	cmp	r0, r6
fffd904a:	bf94      	ite	ls
fffd904c:	2300      	movls	r3, #0
fffd904e:	2301      	movhi	r3, #1
fffd9050:	ea53 73dc 	orrs.w	r3, r3, r12, lsr #31
fffd9054:	d0d6      	beq.n	fffd9004 <_strtoul_l.isra.0+0x88>
fffd9056:	f04f 3cff 	mov.w	r12, #4294967295
fffd905a:	e7e0      	b.n	fffd901e <_strtoul_l.isra.0+0xa2>
fffd905c:	f1bc 0f00 	cmp.w	r12, #0
fffd9060:	db0c      	blt.n	fffd907c <_strtoul_l.isra.0+0x100>
fffd9062:	b105      	cbz	r5, fffd9066 <_strtoul_l.isra.0+0xea>
fffd9064:	4240      	negs	r0, r0
fffd9066:	f1b8 0f00 	cmp.w	r8, #0
fffd906a:	d004      	beq.n	fffd9076 <_strtoul_l.isra.0+0xfa>
fffd906c:	f1bc 0f00 	cmp.w	r12, #0
fffd9070:	d10c      	bne.n	fffd908c <_strtoul_l.isra.0+0x110>
fffd9072:	f8c8 7000 	str.w	r7, [r8]
fffd9076:	b003      	add	sp, #12
fffd9078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd907c:	2322      	movs	r3, #34	; 0x22
fffd907e:	f04f 30ff 	mov.w	r0, #4294967295
fffd9082:	f8c9 3000 	str.w	r3, [r9]
fffd9086:	f1b8 0f00 	cmp.w	r8, #0
fffd908a:	d0f4      	beq.n	fffd9076 <_strtoul_l.isra.0+0xfa>
fffd908c:	1e67      	subs	r7, r4, #1
fffd908e:	e7f0      	b.n	fffd9072 <_strtoul_l.isra.0+0xf6>
fffd9090:	f10b 0402 	add.w	r4, r11, #2
fffd9094:	f89b 3001 	ldrb.w	r3, [r11, #1]
fffd9098:	2501      	movs	r5, #1
fffd909a:	e78d      	b.n	fffd8fb8 <_strtoul_l.isra.0+0x3c>
fffd909c:	7822      	ldrb	r2, [r4, #0]
fffd909e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
fffd90a2:	2a58      	cmp	r2, #88	; 0x58
fffd90a4:	d199      	bne.n	fffd8fda <_strtoul_l.isra.0+0x5e>
fffd90a6:	f04f 0a10 	mov.w	r10, #16
fffd90aa:	7863      	ldrb	r3, [r4, #1]
fffd90ac:	46d3      	mov	r11, r10
fffd90ae:	3402      	adds	r4, #2
fffd90b0:	210f      	movs	r1, #15
fffd90b2:	f06f 4670 	mvn.w	r6, #4026531840	; 0xf0000000
fffd90b6:	e7a1      	b.n	fffd8ffc <_strtoul_l.isra.0+0x80>
fffd90b8:	f04f 0a08 	mov.w	r10, #8
fffd90bc:	2107      	movs	r1, #7
fffd90be:	46d3      	mov	r11, r10
fffd90c0:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
fffd90c4:	e79a      	b.n	fffd8ffc <_strtoul_l.isra.0+0x80>
fffd90c6:	bf00      	nop

fffd90c8 <_strtoul_r>:
fffd90c8:	b530      	push	{r4, r5, lr}
fffd90ca:	f24d 2488 	movw	r4, #53896	; 0xd288
fffd90ce:	f6cf 74fd 	movt	r4, #65533	; 0xfffd
fffd90d2:	b083      	sub	sp, #12
fffd90d4:	f24d 65b8 	movw	r5, #54968	; 0xd6b8
fffd90d8:	f6cf 75fd 	movt	r5, #65533	; 0xfffd
fffd90dc:	6824      	ldr	r4, [r4, #0]
fffd90de:	6b64      	ldr	r4, [r4, #52]	; 0x34
fffd90e0:	2c00      	cmp	r4, #0
fffd90e2:	bf08      	it	eq
fffd90e4:	462c      	moveq	r4, r5
fffd90e6:	9400      	str	r4, [sp, #0]
fffd90e8:	f7ff ff48 	bl	fffd8f7c <_strtoul_l.isra.0>
fffd90ec:	b003      	add	sp, #12
fffd90ee:	bd30      	pop	{r4, r5, pc}

fffd90f0 <_strtoull_l.isra.0>:
fffd90f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd90f4:	b087      	sub	sp, #28
fffd90f6:	4689      	mov	r9, r1
fffd90f8:	4698      	mov	r8, r3
fffd90fa:	9005      	str	r0, [sp, #20]
fffd90fc:	460e      	mov	r6, r1
fffd90fe:	9203      	str	r2, [sp, #12]
fffd9100:	e000      	b.n	fffd9104 <_strtoull_l.isra.0+0x14>
fffd9102:	462e      	mov	r6, r5
fffd9104:	4635      	mov	r5, r6
fffd9106:	9810      	ldr	r0, [sp, #64]	; 0x40
fffd9108:	f815 4b01 	ldrb.w	r4, [r5], #1
fffd910c:	f7fe f882 	bl	fffd7214 <__locale_ctype_ptr_l>
fffd9110:	4420      	add	r0, r4
fffd9112:	f890 b001 	ldrb.w	r11, [r0, #1]
fffd9116:	f01b 0b08 	ands.w	r11, r11, #8
fffd911a:	d1f2      	bne.n	fffd9102 <_strtoull_l.isra.0+0x12>
fffd911c:	2c2d      	cmp	r4, #45	; 0x2d
fffd911e:	f000 809c 	beq.w	fffd925a <_strtoull_l.isra.0+0x16a>
fffd9122:	2c2b      	cmp	r4, #43	; 0x2b
fffd9124:	f8cd b010 	str.w	r11, [sp, #16]
fffd9128:	bf04      	itt	eq
fffd912a:	1cb5      	addeq	r5, r6, #2
fffd912c:	7874      	ldrbeq	r4, [r6, #1]
fffd912e:	f038 0310 	bics.w	r3, r8, #16
fffd9132:	d117      	bne.n	fffd9164 <_strtoull_l.isra.0+0x74>
fffd9134:	2c30      	cmp	r4, #48	; 0x30
fffd9136:	f000 8095 	beq.w	fffd9264 <_strtoull_l.isra.0+0x174>
fffd913a:	f1b8 0f00 	cmp.w	r8, #0
fffd913e:	d111      	bne.n	fffd9164 <_strtoull_l.isra.0+0x74>
fffd9140:	f649 1799 	movw	r7, #39321	; 0x9999
fffd9144:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
fffd9148:	f6c1 1799 	movt	r7, #6553	; 0x1999
fffd914c:	f04f 0a0a 	mov.w	r10, #10
fffd9150:	f04f 0b00 	mov.w	r11, #0
fffd9154:	2205      	movs	r2, #5
fffd9156:	f04f 080a 	mov.w	r8, #10
fffd915a:	e018      	b.n	fffd918e <_strtoull_l.isra.0+0x9e>
fffd915c:	f1b8 0f00 	cmp.w	r8, #0
fffd9160:	f000 8094 	beq.w	fffd928c <_strtoull_l.isra.0+0x19c>
fffd9164:	ea4f 7be8 	mov.w	r11, r8, asr #31
fffd9168:	4642      	mov	r2, r8
fffd916a:	f04f 30ff 	mov.w	r0, #4294967295
fffd916e:	f04f 31ff 	mov.w	r1, #4294967295
fffd9172:	465b      	mov	r3, r11
fffd9174:	46c2      	mov	r10, r8
fffd9176:	f002 f977 	bl	fffdb468 <__aeabi_uldivmod>
fffd917a:	4642      	mov	r2, r8
fffd917c:	465b      	mov	r3, r11
fffd917e:	4606      	mov	r6, r0
fffd9180:	460f      	mov	r7, r1
fffd9182:	f04f 30ff 	mov.w	r0, #4294967295
fffd9186:	f04f 31ff 	mov.w	r1, #4294967295
fffd918a:	f002 f96d 	bl	fffdb468 <__aeabi_uldivmod>
fffd918e:	2000      	movs	r0, #0
fffd9190:	2100      	movs	r1, #0
fffd9192:	2300      	movs	r3, #0
fffd9194:	e9cd ab00 	strd	r10, r11, [sp]
fffd9198:	4696      	mov	lr, r2
fffd919a:	e01d      	b.n	fffd91d8 <_strtoull_l.isra.0+0xe8>
fffd919c:	42b9      	cmp	r1, r7
fffd919e:	bf06      	itte	eq
fffd91a0:	42b0      	cmpeq	r0, r6
fffd91a2:	2301      	moveq	r3, #1
fffd91a4:	2300      	movne	r3, #0
fffd91a6:	4574      	cmp	r4, lr
fffd91a8:	bfd4      	ite	le
fffd91aa:	2300      	movle	r3, #0
fffd91ac:	f003 0301 	andgt.w	r3, r3, #1
fffd91b0:	bb9b      	cbnz	r3, fffd921a <_strtoull_l.isra.0+0x12a>
fffd91b2:	9a01      	ldr	r2, [sp, #4]
fffd91b4:	4682      	mov	r10, r0
fffd91b6:	2301      	movs	r3, #1
fffd91b8:	fb00 fc02 	mul.w	r12, r0, r2
fffd91bc:	9800      	ldr	r0, [sp, #0]
fffd91be:	fb00 cc01 	mla	r12, r0, r1, r12
fffd91c2:	fbaa 0100 	umull	r0, r1, r10, r0
fffd91c6:	4461      	add	r1, r12
fffd91c8:	eb10 0a04 	adds.w	r10, r0, r4
fffd91cc:	eb41 7be4 	adc.w	r11, r1, r4, asr #31
fffd91d0:	4650      	mov	r0, r10
fffd91d2:	4659      	mov	r1, r11
fffd91d4:	f815 4b01 	ldrb.w	r4, [r5], #1
fffd91d8:	f1a4 0c30 	sub.w	r12, r4, #48	; 0x30
fffd91dc:	f1bc 0f09 	cmp.w	r12, #9
fffd91e0:	bf98      	it	ls
fffd91e2:	4664      	movls	r4, r12
fffd91e4:	d90c      	bls.n	fffd9200 <_strtoull_l.isra.0+0x110>
fffd91e6:	f1a4 0c41 	sub.w	r12, r4, #65	; 0x41
fffd91ea:	f1bc 0f19 	cmp.w	r12, #25
fffd91ee:	bf98      	it	ls
fffd91f0:	3c37      	subls	r4, #55	; 0x37
fffd91f2:	d905      	bls.n	fffd9200 <_strtoull_l.isra.0+0x110>
fffd91f4:	f1a4 0c61 	sub.w	r12, r4, #97	; 0x61
fffd91f8:	f1bc 0f19 	cmp.w	r12, #25
fffd91fc:	d810      	bhi.n	fffd9220 <_strtoull_l.isra.0+0x130>
fffd91fe:	3c57      	subs	r4, #87	; 0x57
fffd9200:	45a0      	cmp	r8, r4
fffd9202:	dd0d      	ble.n	fffd9220 <_strtoull_l.isra.0+0x130>
fffd9204:	428f      	cmp	r7, r1
fffd9206:	bf08      	it	eq
fffd9208:	4286      	cmpeq	r6, r0
fffd920a:	bf34      	ite	cc
fffd920c:	f04f 0c01 	movcc.w	r12, #1
fffd9210:	f04f 0c00 	movcs.w	r12, #0
fffd9214:	ea5c 73d3 	orrs.w	r3, r12, r3, lsr #31
fffd9218:	d0c0      	beq.n	fffd919c <_strtoull_l.isra.0+0xac>
fffd921a:	f04f 33ff 	mov.w	r3, #4294967295
fffd921e:	e7d9      	b.n	fffd91d4 <_strtoull_l.isra.0+0xe4>
fffd9220:	2b00      	cmp	r3, #0
fffd9222:	db0d      	blt.n	fffd9240 <_strtoull_l.isra.0+0x150>
fffd9224:	9a04      	ldr	r2, [sp, #16]
fffd9226:	b112      	cbz	r2, fffd922e <_strtoull_l.isra.0+0x13e>
fffd9228:	4240      	negs	r0, r0
fffd922a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
fffd922e:	9a03      	ldr	r2, [sp, #12]
fffd9230:	b11a      	cbz	r2, fffd923a <_strtoull_l.isra.0+0x14a>
fffd9232:	b97b      	cbnz	r3, fffd9254 <_strtoull_l.isra.0+0x164>
fffd9234:	9b03      	ldr	r3, [sp, #12]
fffd9236:	f8c3 9000 	str.w	r9, [r3]
fffd923a:	b007      	add	sp, #28
fffd923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd9240:	9a05      	ldr	r2, [sp, #20]
fffd9242:	2322      	movs	r3, #34	; 0x22
fffd9244:	f04f 30ff 	mov.w	r0, #4294967295
fffd9248:	f04f 31ff 	mov.w	r1, #4294967295
fffd924c:	6013      	str	r3, [r2, #0]
fffd924e:	9b03      	ldr	r3, [sp, #12]
fffd9250:	2b00      	cmp	r3, #0
fffd9252:	d0f2      	beq.n	fffd923a <_strtoull_l.isra.0+0x14a>
fffd9254:	f105 39ff 	add.w	r9, r5, #4294967295
fffd9258:	e7ec      	b.n	fffd9234 <_strtoull_l.isra.0+0x144>
fffd925a:	2301      	movs	r3, #1
fffd925c:	1cb5      	adds	r5, r6, #2
fffd925e:	7874      	ldrb	r4, [r6, #1]
fffd9260:	9304      	str	r3, [sp, #16]
fffd9262:	e764      	b.n	fffd912e <_strtoull_l.isra.0+0x3e>
fffd9264:	782b      	ldrb	r3, [r5, #0]
fffd9266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
fffd926a:	2b58      	cmp	r3, #88	; 0x58
fffd926c:	f47f af76 	bne.w	fffd915c <_strtoull_l.isra.0+0x6c>
fffd9270:	786c      	ldrb	r4, [r5, #1]
fffd9272:	220f      	movs	r2, #15
fffd9274:	3502      	adds	r5, #2
fffd9276:	f04f 36ff 	mov.w	r6, #4294967295
fffd927a:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
fffd927e:	f04f 0a10 	mov.w	r10, #16
fffd9282:	f04f 0b00 	mov.w	r11, #0
fffd9286:	f04f 0810 	mov.w	r8, #16
fffd928a:	e780      	b.n	fffd918e <_strtoull_l.isra.0+0x9e>
fffd928c:	2207      	movs	r2, #7
fffd928e:	f04f 36ff 	mov.w	r6, #4294967295
fffd9292:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
fffd9296:	f04f 0a08 	mov.w	r10, #8
fffd929a:	f04f 0b00 	mov.w	r11, #0
fffd929e:	f04f 0808 	mov.w	r8, #8
fffd92a2:	e774      	b.n	fffd918e <_strtoull_l.isra.0+0x9e>

fffd92a4 <_strtoull_r>:
fffd92a4:	b530      	push	{r4, r5, lr}
fffd92a6:	f24d 2488 	movw	r4, #53896	; 0xd288
fffd92aa:	f6cf 74fd 	movt	r4, #65533	; 0xfffd
fffd92ae:	b083      	sub	sp, #12
fffd92b0:	f24d 65b8 	movw	r5, #54968	; 0xd6b8
fffd92b4:	f6cf 75fd 	movt	r5, #65533	; 0xfffd
fffd92b8:	6824      	ldr	r4, [r4, #0]
fffd92ba:	6b64      	ldr	r4, [r4, #52]	; 0x34
fffd92bc:	2c00      	cmp	r4, #0
fffd92be:	bf08      	it	eq
fffd92c0:	462c      	moveq	r4, r5
fffd92c2:	9400      	str	r4, [sp, #0]
fffd92c4:	f7ff ff14 	bl	fffd90f0 <_strtoull_l.isra.0>
fffd92c8:	b003      	add	sp, #12
fffd92ca:	bd30      	pop	{r4, r5, pc}

fffd92cc <_sungetc_r>:
fffd92cc:	b538      	push	{r3, r4, r5, lr}
fffd92ce:	1c4b      	adds	r3, r1, #1
fffd92d0:	d01a      	beq.n	fffd9308 <_sungetc_r+0x3c>
fffd92d2:	6b14      	ldr	r4, [r2, #48]	; 0x30
fffd92d4:	b2cd      	uxtb	r5, r1
fffd92d6:	8993      	ldrh	r3, [r2, #12]
fffd92d8:	6851      	ldr	r1, [r2, #4]
fffd92da:	f023 0320 	bic.w	r3, r3, #32
fffd92de:	8193      	strh	r3, [r2, #12]
fffd92e0:	b1ac      	cbz	r4, fffd930e <_sungetc_r+0x42>
fffd92e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
fffd92e4:	4614      	mov	r4, r2
fffd92e6:	428b      	cmp	r3, r1
fffd92e8:	dd09      	ble.n	fffd92fe <_sungetc_r+0x32>
fffd92ea:	6823      	ldr	r3, [r4, #0]
fffd92ec:	1e5a      	subs	r2, r3, #1
fffd92ee:	6022      	str	r2, [r4, #0]
fffd92f0:	f803 5c01 	strb.w	r5, [r3, #-1]
fffd92f4:	6863      	ldr	r3, [r4, #4]
fffd92f6:	3301      	adds	r3, #1
fffd92f8:	6063      	str	r3, [r4, #4]
fffd92fa:	4628      	mov	r0, r5
fffd92fc:	bd38      	pop	{r3, r4, r5, pc}
fffd92fe:	4611      	mov	r1, r2
fffd9300:	f000 f880 	bl	fffd9404 <__submore>
fffd9304:	2800      	cmp	r0, #0
fffd9306:	d0f0      	beq.n	fffd92ea <_sungetc_r+0x1e>
fffd9308:	f04f 35ff 	mov.w	r5, #4294967295
fffd930c:	e7f5      	b.n	fffd92fa <_sungetc_r+0x2e>
fffd930e:	6913      	ldr	r3, [r2, #16]
fffd9310:	6810      	ldr	r0, [r2, #0]
fffd9312:	b12b      	cbz	r3, fffd9320 <_sungetc_r+0x54>
fffd9314:	4283      	cmp	r3, r0
fffd9316:	d203      	bcs.n	fffd9320 <_sungetc_r+0x54>
fffd9318:	f810 3c01 	ldrb.w	r3, [r0, #-1]
fffd931c:	42ab      	cmp	r3, r5
fffd931e:	d00e      	beq.n	fffd933e <_sungetc_r+0x72>
fffd9320:	4613      	mov	r3, r2
fffd9322:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
fffd9326:	f102 0040 	add.w	r0, r2, #64	; 0x40
fffd932a:	2103      	movs	r1, #3
fffd932c:	e9c2 010c 	strd	r0, r1, [r2, #48]	; 0x30
fffd9330:	2101      	movs	r1, #1
fffd9332:	f803 5f42 	strb.w	r5, [r3, #66]!
fffd9336:	4628      	mov	r0, r5
fffd9338:	e9c2 3100 	strd	r3, r1, [r2]
fffd933c:	bd38      	pop	{r3, r4, r5, pc}
fffd933e:	3801      	subs	r0, #1
fffd9340:	3101      	adds	r1, #1
fffd9342:	e9c2 0100 	strd	r0, r1, [r2]
fffd9346:	e7d8      	b.n	fffd92fa <_sungetc_r+0x2e>

fffd9348 <__ssrefill_r>:
fffd9348:	b510      	push	{r4, lr}
fffd934a:	460c      	mov	r4, r1
fffd934c:	6b09      	ldr	r1, [r1, #48]	; 0x30
fffd934e:	b169      	cbz	r1, fffd936c <__ssrefill_r+0x24>
fffd9350:	f104 0340 	add.w	r3, r4, #64	; 0x40
fffd9354:	4299      	cmp	r1, r3
fffd9356:	d001      	beq.n	fffd935c <__ssrefill_r+0x14>
fffd9358:	f000 f8f2 	bl	fffd9540 <_free_r>
fffd935c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
fffd935e:	2000      	movs	r0, #0
fffd9360:	6320      	str	r0, [r4, #48]	; 0x30
fffd9362:	6063      	str	r3, [r4, #4]
fffd9364:	b113      	cbz	r3, fffd936c <__ssrefill_r+0x24>
fffd9366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
fffd9368:	6023      	str	r3, [r4, #0]
fffd936a:	bd10      	pop	{r4, pc}
fffd936c:	6922      	ldr	r2, [r4, #16]
fffd936e:	2100      	movs	r1, #0
fffd9370:	89a3      	ldrh	r3, [r4, #12]
fffd9372:	f04f 30ff 	mov.w	r0, #4294967295
fffd9376:	6061      	str	r1, [r4, #4]
fffd9378:	f043 0320 	orr.w	r3, r3, #32
fffd937c:	6022      	str	r2, [r4, #0]
fffd937e:	81a3      	strh	r3, [r4, #12]
fffd9380:	bd10      	pop	{r4, pc}
fffd9382:	bf00      	nop

fffd9384 <_sfread_r>:
fffd9384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd9388:	b083      	sub	sp, #12
fffd938a:	fb02 f803 	mul.w	r8, r2, r3
fffd938e:	9201      	str	r2, [sp, #4]
fffd9390:	469a      	mov	r10, r3
fffd9392:	9c0c      	ldr	r4, [sp, #48]	; 0x30
fffd9394:	f1b8 0f00 	cmp.w	r8, #0
fffd9398:	d025      	beq.n	fffd93e6 <_sfread_r+0x62>
fffd939a:	4607      	mov	r7, r0
fffd939c:	460e      	mov	r6, r1
fffd939e:	4645      	mov	r5, r8
fffd93a0:	f04f 0900 	mov.w	r9, #0
fffd93a4:	e00e      	b.n	fffd93c4 <_sfread_r+0x40>
fffd93a6:	f000 fd9b 	bl	fffd9ee0 <memcpy>
fffd93aa:	6822      	ldr	r2, [r4, #0]
fffd93ac:	f8c4 9004 	str.w	r9, [r4, #4]
fffd93b0:	4621      	mov	r1, r4
fffd93b2:	445a      	add	r2, r11
fffd93b4:	4638      	mov	r0, r7
fffd93b6:	6022      	str	r2, [r4, #0]
fffd93b8:	445e      	add	r6, r11
fffd93ba:	eba5 050b 	sub.w	r5, r5, r11
fffd93be:	f7ff ffc3 	bl	fffd9348 <__ssrefill_r>
fffd93c2:	b9a0      	cbnz	r0, fffd93ee <_sfread_r+0x6a>
fffd93c4:	e9d4 cb00 	ldrd	r12, r11, [r4]
fffd93c8:	4630      	mov	r0, r6
fffd93ca:	45ab      	cmp	r11, r5
fffd93cc:	465a      	mov	r2, r11
fffd93ce:	4661      	mov	r1, r12
fffd93d0:	d3e9      	bcc.n	fffd93a6 <_sfread_r+0x22>
fffd93d2:	462a      	mov	r2, r5
fffd93d4:	46d0      	mov	r8, r10
fffd93d6:	f000 fd83 	bl	fffd9ee0 <memcpy>
fffd93da:	e9d4 3200 	ldrd	r3, r2, [r4]
fffd93de:	1b52      	subs	r2, r2, r5
fffd93e0:	441d      	add	r5, r3
fffd93e2:	6062      	str	r2, [r4, #4]
fffd93e4:	6025      	str	r5, [r4, #0]
fffd93e6:	4640      	mov	r0, r8
fffd93e8:	b003      	add	sp, #12
fffd93ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd93ee:	eba8 0005 	sub.w	r0, r8, r5
fffd93f2:	9901      	ldr	r1, [sp, #4]
fffd93f4:	f7fc f8a8 	bl	fffd5548 <__udivsi3>
fffd93f8:	4680      	mov	r8, r0
fffd93fa:	4640      	mov	r0, r8
fffd93fc:	b003      	add	sp, #12
fffd93fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd9402:	bf00      	nop

fffd9404 <__submore>:
fffd9404:	f101 0340 	add.w	r3, r1, #64	; 0x40
fffd9408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
fffd940c:	460c      	mov	r4, r1
fffd940e:	6b09      	ldr	r1, [r1, #48]	; 0x30
fffd9410:	4299      	cmp	r1, r3
fffd9412:	d014      	beq.n	fffd943e <__submore+0x3a>
fffd9414:	6b66      	ldr	r6, [r4, #52]	; 0x34
fffd9416:	0077      	lsls	r7, r6, #1
fffd9418:	463a      	mov	r2, r7
fffd941a:	f7fe fa49 	bl	fffd78b0 <_realloc_r>
fffd941e:	4605      	mov	r5, r0
fffd9420:	b348      	cbz	r0, fffd9476 <__submore+0x72>
fffd9422:	eb00 0806 	add.w	r8, r0, r6
fffd9426:	4601      	mov	r1, r0
fffd9428:	4632      	mov	r2, r6
fffd942a:	4640      	mov	r0, r8
fffd942c:	f000 fd58 	bl	fffd9ee0 <memcpy>
fffd9430:	2000      	movs	r0, #0
fffd9432:	f8c4 8000 	str.w	r8, [r4]
fffd9436:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
fffd943a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
fffd943e:	f44f 6180 	mov.w	r1, #1024	; 0x400
fffd9442:	f7fd ff1d 	bl	fffd7280 <_malloc_r>
fffd9446:	4603      	mov	r3, r0
fffd9448:	b1a8      	cbz	r0, fffd9476 <__submore+0x72>
fffd944a:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
fffd944e:	f44f 6080 	mov.w	r0, #1024	; 0x400
fffd9452:	6323      	str	r3, [r4, #48]	; 0x30
fffd9454:	f203 32fd 	addw	r2, r3, #1021	; 0x3fd
fffd9458:	6360      	str	r0, [r4, #52]	; 0x34
fffd945a:	2000      	movs	r0, #0
fffd945c:	f883 13ff 	strb.w	r1, [r3, #1023]	; 0x3ff
fffd9460:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
fffd9464:	f883 13fe 	strb.w	r1, [r3, #1022]	; 0x3fe
fffd9468:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
fffd946c:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
fffd9470:	6022      	str	r2, [r4, #0]
fffd9472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
fffd9476:	f04f 30ff 	mov.w	r0, #4294967295
fffd947a:	e7de      	b.n	fffd943a <__submore+0x36>

fffd947c <__ascii_wctomb>:
fffd947c:	b141      	cbz	r1, fffd9490 <__ascii_wctomb+0x14>
fffd947e:	2aff      	cmp	r2, #255	; 0xff
fffd9480:	bf95      	itete	ls
fffd9482:	700a      	strbls	r2, [r1, #0]
fffd9484:	f04f 31ff 	movhi.w	r1, #4294967295
fffd9488:	2101      	movls	r1, #1
fffd948a:	238a      	movhi	r3, #138	; 0x8a
fffd948c:	bf88      	it	hi
fffd948e:	6003      	strhi	r3, [r0, #0]
fffd9490:	4608      	mov	r0, r1
fffd9492:	4770      	bx	lr

fffd9494 <_malloc_trim_r>:
fffd9494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
fffd9496:	f64d 0724 	movw	r7, #55332	; 0xd824
fffd949a:	f6cf 77fd 	movt	r7, #65533	; 0xfffd
fffd949e:	460c      	mov	r4, r1
fffd94a0:	4606      	mov	r6, r0
fffd94a2:	f7fe f9ef 	bl	fffd7884 <__malloc_lock>
fffd94a6:	68bb      	ldr	r3, [r7, #8]
fffd94a8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
fffd94ac:	310f      	adds	r1, #15
fffd94ae:	685d      	ldr	r5, [r3, #4]
fffd94b0:	f025 0503 	bic.w	r5, r5, #3
fffd94b4:	4429      	add	r1, r5
fffd94b6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
fffd94ba:	f021 010f 	bic.w	r1, r1, #15
fffd94be:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
fffd94c2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
fffd94c6:	db07      	blt.n	fffd94d8 <_malloc_trim_r+0x44>
fffd94c8:	2100      	movs	r1, #0
fffd94ca:	4630      	mov	r0, r6
fffd94cc:	f7fe fb9e 	bl	fffd7c0c <_sbrk_r>
fffd94d0:	68bb      	ldr	r3, [r7, #8]
fffd94d2:	442b      	add	r3, r5
fffd94d4:	4298      	cmp	r0, r3
fffd94d6:	d004      	beq.n	fffd94e2 <_malloc_trim_r+0x4e>
fffd94d8:	4630      	mov	r0, r6
fffd94da:	f7fe f9d9 	bl	fffd7890 <__malloc_unlock>
fffd94de:	2000      	movs	r0, #0
fffd94e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
fffd94e2:	4261      	negs	r1, r4
fffd94e4:	4630      	mov	r0, r6
fffd94e6:	f7fe fb91 	bl	fffd7c0c <_sbrk_r>
fffd94ea:	3001      	adds	r0, #1
fffd94ec:	d010      	beq.n	fffd9510 <_malloc_trim_r+0x7c>
fffd94ee:	68ba      	ldr	r2, [r7, #8]
fffd94f0:	f64d 533c 	movw	r3, #56636	; 0xdd3c
fffd94f4:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd94f8:	1b2d      	subs	r5, r5, r4
fffd94fa:	4630      	mov	r0, r6
fffd94fc:	f045 0501 	orr.w	r5, r5, #1
fffd9500:	6819      	ldr	r1, [r3, #0]
fffd9502:	6055      	str	r5, [r2, #4]
fffd9504:	1b09      	subs	r1, r1, r4
fffd9506:	6019      	str	r1, [r3, #0]
fffd9508:	f7fe f9c2 	bl	fffd7890 <__malloc_unlock>
fffd950c:	2001      	movs	r0, #1
fffd950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
fffd9510:	2100      	movs	r1, #0
fffd9512:	4630      	mov	r0, r6
fffd9514:	f7fe fb7a 	bl	fffd7c0c <_sbrk_r>
fffd9518:	68ba      	ldr	r2, [r7, #8]
fffd951a:	1a83      	subs	r3, r0, r2
fffd951c:	2b0f      	cmp	r3, #15
fffd951e:	dddb      	ble.n	fffd94d8 <_malloc_trim_r+0x44>
fffd9520:	f64d 442c 	movw	r4, #56364	; 0xdc2c
fffd9524:	f6cf 74fd 	movt	r4, #65533	; 0xfffd
fffd9528:	f64d 513c 	movw	r1, #56636	; 0xdd3c
fffd952c:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
fffd9530:	6824      	ldr	r4, [r4, #0]
fffd9532:	f043 0301 	orr.w	r3, r3, #1
fffd9536:	6053      	str	r3, [r2, #4]
fffd9538:	1b00      	subs	r0, r0, r4
fffd953a:	6008      	str	r0, [r1, #0]
fffd953c:	e7cc      	b.n	fffd94d8 <_malloc_trim_r+0x44>
fffd953e:	bf00      	nop

fffd9540 <_free_r>:
fffd9540:	2900      	cmp	r1, #0
fffd9542:	d055      	beq.n	fffd95f0 <_free_r+0xb0>
fffd9544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
fffd9546:	460c      	mov	r4, r1
fffd9548:	4606      	mov	r6, r0
fffd954a:	f7fe f99b 	bl	fffd7884 <__malloc_lock>
fffd954e:	f854 cc04 	ldr.w	r12, [r4, #-4]
fffd9552:	f64d 0724 	movw	r7, #55332	; 0xd824
fffd9556:	f6cf 77fd 	movt	r7, #65533	; 0xfffd
fffd955a:	f1a4 0508 	sub.w	r5, r4, #8
fffd955e:	f02c 0101 	bic.w	r1, r12, #1
fffd9562:	186b      	adds	r3, r5, r1
fffd9564:	68b8      	ldr	r0, [r7, #8]
fffd9566:	685a      	ldr	r2, [r3, #4]
fffd9568:	4298      	cmp	r0, r3
fffd956a:	f022 0203 	bic.w	r2, r2, #3
fffd956e:	d052      	beq.n	fffd9616 <_free_r+0xd6>
fffd9570:	f01c 0f01 	tst.w	r12, #1
fffd9574:	605a      	str	r2, [r3, #4]
fffd9576:	eb03 0002 	add.w	r0, r3, r2
fffd957a:	d13a      	bne.n	fffd95f2 <_free_r+0xb2>
fffd957c:	f854 4c08 	ldr.w	r4, [r4, #-8]
fffd9580:	f107 0c08 	add.w	r12, r7, #8
fffd9584:	6840      	ldr	r0, [r0, #4]
fffd9586:	1b2d      	subs	r5, r5, r4
fffd9588:	4421      	add	r1, r4
fffd958a:	f000 0001 	and.w	r0, r0, #1
fffd958e:	68ac      	ldr	r4, [r5, #8]
fffd9590:	4564      	cmp	r4, r12
fffd9592:	d07b      	beq.n	fffd968c <_free_r+0x14c>
fffd9594:	f8d5 c00c 	ldr.w	r12, [r5, #12]
fffd9598:	f8c4 c00c 	str.w	r12, [r4, #12]
fffd959c:	f8cc 4008 	str.w	r4, [r12, #8]
fffd95a0:	b360      	cbz	r0, fffd95fc <_free_r+0xbc>
fffd95a2:	f041 0301 	orr.w	r3, r1, #1
fffd95a6:	606b      	str	r3, [r5, #4]
fffd95a8:	5069      	str	r1, [r5, r1]
fffd95aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
fffd95ae:	d356      	bcc.n	fffd965e <_free_r+0x11e>
fffd95b0:	0a4b      	lsrs	r3, r1, #9
fffd95b2:	2b04      	cmp	r3, #4
fffd95b4:	d876      	bhi.n	fffd96a4 <_free_r+0x164>
fffd95b6:	098b      	lsrs	r3, r1, #6
fffd95b8:	f103 0039 	add.w	r0, r3, #57	; 0x39
fffd95bc:	f103 0238 	add.w	r2, r3, #56	; 0x38
fffd95c0:	00c3      	lsls	r3, r0, #3
fffd95c2:	18f8      	adds	r0, r7, r3
fffd95c4:	58fb      	ldr	r3, [r7, r3]
fffd95c6:	3808      	subs	r0, #8
fffd95c8:	4298      	cmp	r0, r3
fffd95ca:	d07e      	beq.n	fffd96ca <_free_r+0x18a>
fffd95cc:	685a      	ldr	r2, [r3, #4]
fffd95ce:	f022 0203 	bic.w	r2, r2, #3
fffd95d2:	428a      	cmp	r2, r1
fffd95d4:	d977      	bls.n	fffd96c6 <_free_r+0x186>
fffd95d6:	689b      	ldr	r3, [r3, #8]
fffd95d8:	4298      	cmp	r0, r3
fffd95da:	d1f7      	bne.n	fffd95cc <_free_r+0x8c>
fffd95dc:	68c1      	ldr	r1, [r0, #12]
fffd95de:	e9c5 0102 	strd	r0, r1, [r5, #8]
fffd95e2:	608d      	str	r5, [r1, #8]
fffd95e4:	60c5      	str	r5, [r0, #12]
fffd95e6:	4630      	mov	r0, r6
fffd95e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
fffd95ec:	f7fe b950 	b.w	fffd7890 <__malloc_unlock>
fffd95f0:	4770      	bx	lr
fffd95f2:	6840      	ldr	r0, [r0, #4]
fffd95f4:	f000 0001 	and.w	r0, r0, #1
fffd95f8:	2800      	cmp	r0, #0
fffd95fa:	d1d2      	bne.n	fffd95a2 <_free_r+0x62>
fffd95fc:	6898      	ldr	r0, [r3, #8]
fffd95fe:	4411      	add	r1, r2
fffd9600:	4c49      	ldr	r4, [pc, #292]	; (fffd9728 <_free_r+0x1e8>)
fffd9602:	f041 0201 	orr.w	r2, r1, #1
fffd9606:	42a0      	cmp	r0, r4
fffd9608:	d068      	beq.n	fffd96dc <_free_r+0x19c>
fffd960a:	68db      	ldr	r3, [r3, #12]
fffd960c:	60c3      	str	r3, [r0, #12]
fffd960e:	6098      	str	r0, [r3, #8]
fffd9610:	606a      	str	r2, [r5, #4]
fffd9612:	5069      	str	r1, [r5, r1]
fffd9614:	e7c9      	b.n	fffd95aa <_free_r+0x6a>
fffd9616:	f01c 0f01 	tst.w	r12, #1
fffd961a:	440a      	add	r2, r1
fffd961c:	d107      	bne.n	fffd962e <_free_r+0xee>
fffd961e:	f854 3c08 	ldr.w	r3, [r4, #-8]
fffd9622:	1aed      	subs	r5, r5, r3
fffd9624:	441a      	add	r2, r3
fffd9626:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
fffd962a:	60cb      	str	r3, [r1, #12]
fffd962c:	6099      	str	r1, [r3, #8]
fffd962e:	f64d 4330 	movw	r3, #56368	; 0xdc30
fffd9632:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd9636:	f042 0101 	orr.w	r1, r2, #1
fffd963a:	6069      	str	r1, [r5, #4]
fffd963c:	681b      	ldr	r3, [r3, #0]
fffd963e:	60bd      	str	r5, [r7, #8]
fffd9640:	4293      	cmp	r3, r2
fffd9642:	d807      	bhi.n	fffd9654 <_free_r+0x114>
fffd9644:	f64d 536c 	movw	r3, #56684	; 0xdd6c
fffd9648:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
fffd964c:	4630      	mov	r0, r6
fffd964e:	6819      	ldr	r1, [r3, #0]
fffd9650:	f7ff ff20 	bl	fffd9494 <_malloc_trim_r>
fffd9654:	4630      	mov	r0, r6
fffd9656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
fffd965a:	f7fe b919 	b.w	fffd7890 <__malloc_unlock>
fffd965e:	08c9      	lsrs	r1, r1, #3
fffd9660:	2301      	movs	r3, #1
fffd9662:	18c8      	adds	r0, r1, r3
fffd9664:	687a      	ldr	r2, [r7, #4]
fffd9666:	1089      	asrs	r1, r1, #2
fffd9668:	408b      	lsls	r3, r1
fffd966a:	f857 1030 	ldr.w	r1, [r7, r0, lsl #3]
fffd966e:	4313      	orrs	r3, r2
fffd9670:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
fffd9674:	607b      	str	r3, [r7, #4]
fffd9676:	3a08      	subs	r2, #8
fffd9678:	e9c5 1202 	strd	r1, r2, [r5, #8]
fffd967c:	f847 5030 	str.w	r5, [r7, r0, lsl #3]
fffd9680:	4630      	mov	r0, r6
fffd9682:	60cd      	str	r5, [r1, #12]
fffd9684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
fffd9688:	f7fe b902 	b.w	fffd7890 <__malloc_unlock>
fffd968c:	2800      	cmp	r0, #0
fffd968e:	d145      	bne.n	fffd971c <_free_r+0x1dc>
fffd9690:	6898      	ldr	r0, [r3, #8]
fffd9692:	440a      	add	r2, r1
fffd9694:	68db      	ldr	r3, [r3, #12]
fffd9696:	f042 0101 	orr.w	r1, r2, #1
fffd969a:	60c3      	str	r3, [r0, #12]
fffd969c:	6098      	str	r0, [r3, #8]
fffd969e:	6069      	str	r1, [r5, #4]
fffd96a0:	50aa      	str	r2, [r5, r2]
fffd96a2:	e7d7      	b.n	fffd9654 <_free_r+0x114>
fffd96a4:	2b14      	cmp	r3, #20
fffd96a6:	d908      	bls.n	fffd96ba <_free_r+0x17a>
fffd96a8:	2b54      	cmp	r3, #84	; 0x54
fffd96aa:	d81e      	bhi.n	fffd96ea <_free_r+0x1aa>
fffd96ac:	0b0b      	lsrs	r3, r1, #12
fffd96ae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
fffd96b2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
fffd96b6:	00c3      	lsls	r3, r0, #3
fffd96b8:	e783      	b.n	fffd95c2 <_free_r+0x82>
fffd96ba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
fffd96be:	f103 025b 	add.w	r2, r3, #91	; 0x5b
fffd96c2:	00c3      	lsls	r3, r0, #3
fffd96c4:	e77d      	b.n	fffd95c2 <_free_r+0x82>
fffd96c6:	4618      	mov	r0, r3
fffd96c8:	e788      	b.n	fffd95dc <_free_r+0x9c>
fffd96ca:	1093      	asrs	r3, r2, #2
fffd96cc:	687c      	ldr	r4, [r7, #4]
fffd96ce:	2201      	movs	r2, #1
fffd96d0:	4601      	mov	r1, r0
fffd96d2:	fa02 f303 	lsl.w	r3, r2, r3
fffd96d6:	4323      	orrs	r3, r4
fffd96d8:	607b      	str	r3, [r7, #4]
fffd96da:	e780      	b.n	fffd95de <_free_r+0x9e>
fffd96dc:	e9c7 5504 	strd	r5, r5, [r7, #16]
fffd96e0:	e9c5 0002 	strd	r0, r0, [r5, #8]
fffd96e4:	606a      	str	r2, [r5, #4]
fffd96e6:	5069      	str	r1, [r5, r1]
fffd96e8:	e7b4      	b.n	fffd9654 <_free_r+0x114>
fffd96ea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
fffd96ee:	d806      	bhi.n	fffd96fe <_free_r+0x1be>
fffd96f0:	0bcb      	lsrs	r3, r1, #15
fffd96f2:	f103 0078 	add.w	r0, r3, #120	; 0x78
fffd96f6:	f103 0277 	add.w	r2, r3, #119	; 0x77
fffd96fa:	00c3      	lsls	r3, r0, #3
fffd96fc:	e761      	b.n	fffd95c2 <_free_r+0x82>
fffd96fe:	f240 5254 	movw	r2, #1364	; 0x554
fffd9702:	4293      	cmp	r3, r2
fffd9704:	bf9d      	ittte	ls
fffd9706:	0c8b      	lsrls	r3, r1, #18
fffd9708:	f103 007d 	addls.w	r0, r3, #125	; 0x7d
fffd970c:	f103 027c 	addls.w	r2, r3, #124	; 0x7c
fffd9710:	f44f 737e 	movhi.w	r3, #1016	; 0x3f8
fffd9714:	bf8c      	ite	hi
fffd9716:	227e      	movhi	r2, #126	; 0x7e
fffd9718:	00c3      	lslls	r3, r0, #3
fffd971a:	e752      	b.n	fffd95c2 <_free_r+0x82>
fffd971c:	f041 0201 	orr.w	r2, r1, #1
fffd9720:	606a      	str	r2, [r5, #4]
fffd9722:	6019      	str	r1, [r3, #0]
fffd9724:	e796      	b.n	fffd9654 <_free_r+0x114>
fffd9726:	bf00      	nop
fffd9728:	fffdd82c 	.word	0xfffdd82c

fffd972c <rshift>:
fffd972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
fffd9730:	114b      	asrs	r3, r1, #5
fffd9732:	6904      	ldr	r4, [r0, #16]
fffd9734:	429c      	cmp	r4, r3
fffd9736:	dd2d      	ble.n	fffd9794 <rshift+0x68>
fffd9738:	f100 0c14 	add.w	r12, r0, #20
fffd973c:	f011 011f 	ands.w	r1, r1, #31
fffd9740:	eb0c 0484 	add.w	r4, r12, r4, lsl #2
fffd9744:	eb0c 0583 	add.w	r5, r12, r3, lsl #2
fffd9748:	4667      	mov	r7, r12
fffd974a:	d029      	beq.n	fffd97a0 <rshift+0x74>
fffd974c:	f85c 2023 	ldr.w	r2, [r12, r3, lsl #2]
fffd9750:	1d2e      	adds	r6, r5, #4
fffd9752:	42b4      	cmp	r4, r6
fffd9754:	f1c1 0820 	rsb	r8, r1, #32
fffd9758:	fa22 f201 	lsr.w	r2, r2, r1
fffd975c:	d912      	bls.n	fffd9784 <rshift+0x58>
fffd975e:	46e6      	mov	lr, r12
fffd9760:	6833      	ldr	r3, [r6, #0]
fffd9762:	fa03 f308 	lsl.w	r3, r3, r8
fffd9766:	4313      	orrs	r3, r2
fffd9768:	f84e 3b04 	str.w	r3, [lr], #4
fffd976c:	f856 2b04 	ldr.w	r2, [r6], #4
fffd9770:	42b4      	cmp	r4, r6
fffd9772:	fa22 f201 	lsr.w	r2, r2, r1
fffd9776:	d8f3      	bhi.n	fffd9760 <rshift+0x34>
fffd9778:	1b63      	subs	r3, r4, r5
fffd977a:	3b05      	subs	r3, #5
fffd977c:	f023 0303 	bic.w	r3, r3, #3
fffd9780:	3304      	adds	r3, #4
fffd9782:	449c      	add	r12, r3
fffd9784:	f8cc 2000 	str.w	r2, [r12]
fffd9788:	b31a      	cbz	r2, fffd97d2 <rshift+0xa6>
fffd978a:	f10c 0304 	add.w	r3, r12, #4
fffd978e:	1bda      	subs	r2, r3, r7
fffd9790:	1092      	asrs	r2, r2, #2
fffd9792:	e019      	b.n	fffd97c8 <rshift+0x9c>
fffd9794:	2300      	movs	r3, #0
fffd9796:	6103      	str	r3, [r0, #16]
fffd9798:	2300      	movs	r3, #0
fffd979a:	6143      	str	r3, [r0, #20]
fffd979c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
fffd97a0:	42ac      	cmp	r4, r5
fffd97a2:	bf84      	itt	hi
fffd97a4:	f100 0210 	addhi.w	r2, r0, #16
fffd97a8:	462b      	movhi	r3, r5
fffd97aa:	d9f3      	bls.n	fffd9794 <rshift+0x68>
fffd97ac:	f853 1b04 	ldr.w	r1, [r3], #4
fffd97b0:	429c      	cmp	r4, r3
fffd97b2:	f842 1f04 	str.w	r1, [r2, #4]!
fffd97b6:	d8f9      	bhi.n	fffd97ac <rshift+0x80>
fffd97b8:	43ea      	mvns	r2, r5
fffd97ba:	4422      	add	r2, r4
fffd97bc:	f022 0203 	bic.w	r2, r2, #3
fffd97c0:	3204      	adds	r2, #4
fffd97c2:	eb0c 0302 	add.w	r3, r12, r2
fffd97c6:	1092      	asrs	r2, r2, #2
fffd97c8:	42bb      	cmp	r3, r7
fffd97ca:	6102      	str	r2, [r0, #16]
fffd97cc:	d0e4      	beq.n	fffd9798 <rshift+0x6c>
fffd97ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
fffd97d2:	4663      	mov	r3, r12
fffd97d4:	1bda      	subs	r2, r3, r7
fffd97d6:	1092      	asrs	r2, r2, #2
fffd97d8:	e7f6      	b.n	fffd97c8 <rshift+0x9c>
fffd97da:	bf00      	nop

fffd97dc <__gethex>:
fffd97dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd97e0:	b08d      	sub	sp, #52	; 0x34
fffd97e2:	4689      	mov	r9, r1
fffd97e4:	9007      	str	r0, [sp, #28]
fffd97e6:	9818      	ldr	r0, [sp, #96]	; 0x60
fffd97e8:	9204      	str	r2, [sp, #16]
fffd97ea:	930a      	str	r3, [sp, #40]	; 0x28
fffd97ec:	f7fd fd26 	bl	fffd723c <__localeconv_l>
fffd97f0:	6803      	ldr	r3, [r0, #0]
fffd97f2:	4618      	mov	r0, r3
fffd97f4:	461c      	mov	r4, r3
fffd97f6:	9305      	str	r3, [sp, #20]
fffd97f8:	f7fa ef2e 	blx	fffd4658 <strlen>
fffd97fc:	4622      	mov	r2, r4
fffd97fe:	f8d9 3000 	ldr.w	r3, [r9]
fffd9802:	4402      	add	r2, r0
fffd9804:	9003      	str	r0, [sp, #12]
fffd9806:	f812 2c01 	ldrb.w	r2, [r2, #-1]
fffd980a:	9201      	str	r2, [sp, #4]
fffd980c:	789a      	ldrb	r2, [r3, #2]
fffd980e:	2a30      	cmp	r2, #48	; 0x30
fffd9810:	f040 8192 	bne.w	fffd9b38 <__gethex+0x35c>
fffd9814:	3303      	adds	r3, #3
fffd9816:	f04f 0800 	mov.w	r8, #0
fffd981a:	461c      	mov	r4, r3
fffd981c:	f813 2b01 	ldrb.w	r2, [r3], #1
fffd9820:	f108 0801 	add.w	r8, r8, #1
fffd9824:	2a30      	cmp	r2, #48	; 0x30
fffd9826:	d0f8      	beq.n	fffd981a <__gethex+0x3e>
fffd9828:	f24d 0624 	movw	r6, #53284	; 0xd024
fffd982c:	f6cf 76fd 	movt	r6, #65533	; 0xfffd
fffd9830:	5cb3      	ldrb	r3, [r6, r2]
fffd9832:	2b00      	cmp	r3, #0
fffd9834:	f000 80f6 	beq.w	fffd9a24 <__gethex+0x248>
fffd9838:	7823      	ldrb	r3, [r4, #0]
fffd983a:	f04f 0a00 	mov.w	r10, #0
fffd983e:	4655      	mov	r5, r10
fffd9840:	5cf3      	ldrb	r3, [r6, r3]
fffd9842:	4627      	mov	r7, r4
fffd9844:	b123      	cbz	r3, fffd9850 <__gethex+0x74>
fffd9846:	f817 3f01 	ldrb.w	r3, [r7, #1]!
fffd984a:	5cf3      	ldrb	r3, [r6, r3]
fffd984c:	2b00      	cmp	r3, #0
fffd984e:	d1fa      	bne.n	fffd9846 <__gethex+0x6a>
fffd9850:	9a03      	ldr	r2, [sp, #12]
fffd9852:	4638      	mov	r0, r7
fffd9854:	9905      	ldr	r1, [sp, #20]
fffd9856:	f001 f889 	bl	fffda96c <strncmp>
fffd985a:	2800      	cmp	r0, #0
fffd985c:	f000 809b 	beq.w	fffd9996 <__gethex+0x1ba>
fffd9860:	783b      	ldrb	r3, [r7, #0]
fffd9862:	2d00      	cmp	r5, #0
fffd9864:	f040 809b 	bne.w	fffd999e <__gethex+0x1c2>
fffd9868:	2b50      	cmp	r3, #80	; 0x50
fffd986a:	9502      	str	r5, [sp, #8]
fffd986c:	463d      	mov	r5, r7
fffd986e:	f000 809e 	beq.w	fffd99ae <__gethex+0x1d2>
fffd9872:	2b70      	cmp	r3, #112	; 0x70
fffd9874:	f000 809b 	beq.w	fffd99ae <__gethex+0x1d2>
fffd9878:	f8c9 7000 	str.w	r7, [r9]
fffd987c:	f1ba 0f00 	cmp.w	r10, #0
fffd9880:	f040 80c7 	bne.w	fffd9a12 <__gethex+0x236>
fffd9884:	1b2b      	subs	r3, r5, r4
fffd9886:	4651      	mov	r1, r10
fffd9888:	3b01      	subs	r3, #1
fffd988a:	2b07      	cmp	r3, #7
fffd988c:	dd03      	ble.n	fffd9896 <__gethex+0xba>
fffd988e:	105b      	asrs	r3, r3, #1
fffd9890:	3101      	adds	r1, #1
fffd9892:	2b07      	cmp	r3, #7
fffd9894:	dcfb      	bgt.n	fffd988e <__gethex+0xb2>
fffd9896:	9807      	ldr	r0, [sp, #28]
fffd9898:	f000 fbfc 	bl	fffda094 <_Balloc>
fffd989c:	42ac      	cmp	r4, r5
fffd989e:	4603      	mov	r3, r0
fffd98a0:	9006      	str	r0, [sp, #24]
fffd98a2:	f103 0314 	add.w	r3, r3, #20
fffd98a6:	9308      	str	r3, [sp, #32]
fffd98a8:	f080 81b6 	bcs.w	fffd9c18 <__gethex+0x43c>
fffd98ac:	9a03      	ldr	r2, [sp, #12]
fffd98ae:	f04f 0800 	mov.w	r8, #0
fffd98b2:	46c1      	mov	r9, r8
fffd98b4:	469b      	mov	r11, r3
fffd98b6:	f1c2 0201 	rsb	r2, r2, #1
fffd98ba:	9209      	str	r2, [sp, #36]	; 0x24
fffd98bc:	e01b      	b.n	fffd98f6 <__gethex+0x11a>
fffd98be:	f1b8 0f20 	cmp.w	r8, #32
fffd98c2:	bf1c      	itt	ne
fffd98c4:	4642      	movne	r2, r8
fffd98c6:	f108 0804 	addne.w	r8, r8, #4
fffd98ca:	d108      	bne.n	fffd98de <__gethex+0x102>
fffd98cc:	465b      	mov	r3, r11
fffd98ce:	2200      	movs	r2, #0
fffd98d0:	f843 9b08 	str.w	r9, [r3], #8
fffd98d4:	46bb      	mov	r11, r7
fffd98d6:	4691      	mov	r9, r2
fffd98d8:	461f      	mov	r7, r3
fffd98da:	f04f 0804 	mov.w	r8, #4
fffd98de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
fffd98e2:	4655      	mov	r5, r10
fffd98e4:	42a5      	cmp	r5, r4
fffd98e6:	5cf3      	ldrb	r3, [r6, r3]
fffd98e8:	f003 030f 	and.w	r3, r3, #15
fffd98ec:	fa03 f302 	lsl.w	r3, r3, r2
fffd98f0:	ea49 0903 	orr.w	r9, r9, r3
fffd98f4:	d918      	bls.n	fffd9928 <__gethex+0x14c>
fffd98f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
fffd98fa:	f105 3aff 	add.w	r10, r5, #4294967295
fffd98fe:	9a01      	ldr	r2, [sp, #4]
fffd9900:	f10b 0704 	add.w	r7, r11, #4
fffd9904:	4293      	cmp	r3, r2
fffd9906:	d1da      	bne.n	fffd98be <__gethex+0xe2>
fffd9908:	9b09      	ldr	r3, [sp, #36]	; 0x24
fffd990a:	4453      	add	r3, r10
fffd990c:	42a3      	cmp	r3, r4
fffd990e:	d3d6      	bcc.n	fffd98be <__gethex+0xe2>
fffd9910:	4618      	mov	r0, r3
fffd9912:	9a03      	ldr	r2, [sp, #12]
fffd9914:	9905      	ldr	r1, [sp, #20]
fffd9916:	930b      	str	r3, [sp, #44]	; 0x2c
fffd9918:	f001 f828 	bl	fffda96c <strncmp>
fffd991c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
fffd991e:	2800      	cmp	r0, #0
fffd9920:	d1cd      	bne.n	fffd98be <__gethex+0xe2>
fffd9922:	461d      	mov	r5, r3
fffd9924:	42a5      	cmp	r5, r4
fffd9926:	d8e6      	bhi.n	fffd98f6 <__gethex+0x11a>
fffd9928:	9b08      	ldr	r3, [sp, #32]
fffd992a:	4648      	mov	r0, r9
fffd992c:	f8cb 9000 	str.w	r9, [r11]
fffd9930:	1aff      	subs	r7, r7, r3
fffd9932:	9b06      	ldr	r3, [sp, #24]
fffd9934:	10bf      	asrs	r7, r7, #2
fffd9936:	611f      	str	r7, [r3, #16]
fffd9938:	f000 fc6c 	bl	fffda214 <__hi0bits>
fffd993c:	9b04      	ldr	r3, [sp, #16]
fffd993e:	017f      	lsls	r7, r7, #5
fffd9940:	681d      	ldr	r5, [r3, #0]
fffd9942:	1a3f      	subs	r7, r7, r0
fffd9944:	42af      	cmp	r7, r5
fffd9946:	f300 80d8 	bgt.w	fffd9afa <__gethex+0x31e>
fffd994a:	bfa8      	it	ge
fffd994c:	2600      	movge	r6, #0
fffd994e:	f2c0 8105 	blt.w	fffd9b5c <__gethex+0x380>
fffd9952:	9b04      	ldr	r3, [sp, #16]
fffd9954:	9a02      	ldr	r2, [sp, #8]
fffd9956:	689b      	ldr	r3, [r3, #8]
fffd9958:	4293      	cmp	r3, r2
fffd995a:	f2c0 812d 	blt.w	fffd9bb8 <__gethex+0x3dc>
fffd995e:	9804      	ldr	r0, [sp, #16]
fffd9960:	9a02      	ldr	r2, [sp, #8]
fffd9962:	6843      	ldr	r3, [r0, #4]
fffd9964:	4293      	cmp	r3, r2
fffd9966:	dd79      	ble.n	fffd9a5c <__gethex+0x280>
fffd9968:	1a9c      	subs	r4, r3, r2
fffd996a:	42a5      	cmp	r5, r4
fffd996c:	f300 80a5 	bgt.w	fffd9aba <__gethex+0x2de>
fffd9970:	68c2      	ldr	r2, [r0, #12]
fffd9972:	2a02      	cmp	r2, #2
fffd9974:	f000 8187 	beq.w	fffd9c86 <__gethex+0x4aa>
fffd9978:	2a03      	cmp	r2, #3
fffd997a:	f000 817f 	beq.w	fffd9c7c <__gethex+0x4a0>
fffd997e:	2a01      	cmp	r2, #1
fffd9980:	f000 815a 	beq.w	fffd9c38 <__gethex+0x45c>
fffd9984:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
fffd9988:	2450      	movs	r4, #80	; 0x50
fffd998a:	f000 fba9 	bl	fffda0e0 <_Bfree>
fffd998e:	9a16      	ldr	r2, [sp, #88]	; 0x58
fffd9990:	2300      	movs	r3, #0
fffd9992:	6013      	str	r3, [r2, #0]
fffd9994:	e042      	b.n	fffd9a1c <__gethex+0x240>
fffd9996:	2d00      	cmp	r5, #0
fffd9998:	f000 80d2 	beq.w	fffd9b40 <__gethex+0x364>
fffd999c:	783b      	ldrb	r3, [r7, #0]
fffd999e:	1bed      	subs	r5, r5, r7
fffd99a0:	2b50      	cmp	r3, #80	; 0x50
fffd99a2:	ea4f 0285 	mov.w	r2, r5, lsl #2
fffd99a6:	463d      	mov	r5, r7
fffd99a8:	9202      	str	r2, [sp, #8]
fffd99aa:	f47f af62 	bne.w	fffd9872 <__gethex+0x96>
fffd99ae:	786b      	ldrb	r3, [r5, #1]
fffd99b0:	2b2b      	cmp	r3, #43	; 0x2b
fffd99b2:	d04e      	beq.n	fffd9a52 <__gethex+0x276>
fffd99b4:	2b2d      	cmp	r3, #45	; 0x2d
fffd99b6:	bf16      	itet	ne
fffd99b8:	1c6f      	addne	r7, r5, #1
fffd99ba:	f04f 0c01 	moveq.w	r12, #1
fffd99be:	f04f 0c00 	movne.w	r12, #0
fffd99c2:	d101      	bne.n	fffd99c8 <__gethex+0x1ec>
fffd99c4:	78ab      	ldrb	r3, [r5, #2]
fffd99c6:	1caf      	adds	r7, r5, #2
fffd99c8:	5cf3      	ldrb	r3, [r6, r3]
fffd99ca:	1e5a      	subs	r2, r3, #1
fffd99cc:	2a18      	cmp	r2, #24
fffd99ce:	bf88      	it	hi
fffd99d0:	462f      	movhi	r7, r5
fffd99d2:	f63f af51 	bhi.w	fffd9878 <__gethex+0x9c>
fffd99d6:	787a      	ldrb	r2, [r7, #1]
fffd99d8:	3b10      	subs	r3, #16
fffd99da:	3701      	adds	r7, #1
fffd99dc:	5cb2      	ldrb	r2, [r6, r2]
fffd99de:	1e51      	subs	r1, r2, #1
fffd99e0:	2918      	cmp	r1, #24
fffd99e2:	d809      	bhi.n	fffd99f8 <__gethex+0x21c>
fffd99e4:	200a      	movs	r0, #10
fffd99e6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
fffd99ea:	fb00 2303 	mla	r3, r0, r3, r2
fffd99ee:	5c72      	ldrb	r2, [r6, r1]
fffd99f0:	1e51      	subs	r1, r2, #1
fffd99f2:	3b10      	subs	r3, #16
fffd99f4:	2918      	cmp	r1, #24
fffd99f6:	d9f6      	bls.n	fffd99e6 <__gethex+0x20a>
fffd99f8:	f1bc 0f00 	cmp.w	r12, #0
fffd99fc:	d000      	beq.n	fffd9a00 <__gethex+0x224>
fffd99fe:	425b      	negs	r3, r3
fffd9a00:	9a02      	ldr	r2, [sp, #8]
fffd9a02:	f8c9 7000 	str.w	r7, [r9]
fffd9a06:	441a      	add	r2, r3
fffd9a08:	9202      	str	r2, [sp, #8]
fffd9a0a:	f1ba 0f00 	cmp.w	r10, #0
fffd9a0e:	f43f af39 	beq.w	fffd9884 <__gethex+0xa8>
fffd9a12:	f1b8 0f00 	cmp.w	r8, #0
fffd9a16:	bf0c      	ite	eq
fffd9a18:	2406      	moveq	r4, #6
fffd9a1a:	2400      	movne	r4, #0
fffd9a1c:	4620      	mov	r0, r4
fffd9a1e:	b00d      	add	sp, #52	; 0x34
fffd9a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd9a24:	9d03      	ldr	r5, [sp, #12]
fffd9a26:	4620      	mov	r0, r4
fffd9a28:	9905      	ldr	r1, [sp, #20]
fffd9a2a:	462a      	mov	r2, r5
fffd9a2c:	f000 ff9e 	bl	fffda96c <strncmp>
fffd9a30:	b378      	cbz	r0, fffd9a92 <__gethex+0x2b6>
fffd9a32:	7822      	ldrb	r2, [r4, #0]
fffd9a34:	4625      	mov	r5, r4
fffd9a36:	2a50      	cmp	r2, #80	; 0x50
fffd9a38:	d004      	beq.n	fffd9a44 <__gethex+0x268>
fffd9a3a:	2a70      	cmp	r2, #112	; 0x70
fffd9a3c:	bf18      	it	ne
fffd9a3e:	f8c9 5000 	strne.w	r5, [r9]
fffd9a42:	d1e6      	bne.n	fffd9a12 <__gethex+0x236>
fffd9a44:	2300      	movs	r3, #0
fffd9a46:	9302      	str	r3, [sp, #8]
fffd9a48:	786b      	ldrb	r3, [r5, #1]
fffd9a4a:	f04f 0a01 	mov.w	r10, #1
fffd9a4e:	2b2b      	cmp	r3, #43	; 0x2b
fffd9a50:	d1b0      	bne.n	fffd99b4 <__gethex+0x1d8>
fffd9a52:	f04f 0c00 	mov.w	r12, #0
fffd9a56:	78ab      	ldrb	r3, [r5, #2]
fffd9a58:	1caf      	adds	r7, r5, #2
fffd9a5a:	e7b5      	b.n	fffd99c8 <__gethex+0x1ec>
fffd9a5c:	2401      	movs	r4, #1
fffd9a5e:	b166      	cbz	r6, fffd9a7a <__gethex+0x29e>
fffd9a60:	9b04      	ldr	r3, [sp, #16]
fffd9a62:	68db      	ldr	r3, [r3, #12]
fffd9a64:	2b02      	cmp	r3, #2
fffd9a66:	f000 80b0 	beq.w	fffd9bca <__gethex+0x3ee>
fffd9a6a:	2b03      	cmp	r3, #3
fffd9a6c:	f000 80b1 	beq.w	fffd9bd2 <__gethex+0x3f6>
fffd9a70:	2b01      	cmp	r3, #1
fffd9a72:	f000 80fa 	beq.w	fffd9c6a <__gethex+0x48e>
fffd9a76:	f044 0410 	orr.w	r4, r4, #16
fffd9a7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
fffd9a7c:	4620      	mov	r0, r4
fffd9a7e:	461a      	mov	r2, r3
fffd9a80:	9b06      	ldr	r3, [sp, #24]
fffd9a82:	6013      	str	r3, [r2, #0]
fffd9a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
fffd9a86:	461a      	mov	r2, r3
fffd9a88:	9b02      	ldr	r3, [sp, #8]
fffd9a8a:	6013      	str	r3, [r2, #0]
fffd9a8c:	b00d      	add	sp, #52	; 0x34
fffd9a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd9a92:	5d62      	ldrb	r2, [r4, r5]
fffd9a94:	1965      	adds	r5, r4, r5
fffd9a96:	5cb3      	ldrb	r3, [r6, r2]
fffd9a98:	2b00      	cmp	r3, #0
fffd9a9a:	d0cc      	beq.n	fffd9a36 <__gethex+0x25a>
fffd9a9c:	2a30      	cmp	r2, #48	; 0x30
fffd9a9e:	462c      	mov	r4, r5
fffd9aa0:	d104      	bne.n	fffd9aac <__gethex+0x2d0>
fffd9aa2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
fffd9aa6:	2b30      	cmp	r3, #48	; 0x30
fffd9aa8:	d0fb      	beq.n	fffd9aa2 <__gethex+0x2c6>
fffd9aaa:	5cf3      	ldrb	r3, [r6, r3]
fffd9aac:	fab3 fa83 	clz	r10, r3
fffd9ab0:	f04f 0801 	mov.w	r8, #1
fffd9ab4:	ea4f 1a5a 	mov.w	r10, r10, lsr #5
fffd9ab8:	e6c3      	b.n	fffd9842 <__gethex+0x66>
fffd9aba:	1e67      	subs	r7, r4, #1
fffd9abc:	2e00      	cmp	r6, #0
fffd9abe:	f040 80b3 	bne.w	fffd9c28 <__gethex+0x44c>
fffd9ac2:	2f00      	cmp	r7, #0
fffd9ac4:	f040 80b2 	bne.w	fffd9c2c <__gethex+0x450>
fffd9ac8:	9908      	ldr	r1, [sp, #32]
fffd9aca:	117a      	asrs	r2, r7, #5
fffd9acc:	2301      	movs	r3, #1
fffd9ace:	f007 071f 	and.w	r7, r7, #31
fffd9ad2:	fa03 f707 	lsl.w	r7, r3, r7
fffd9ad6:	9806      	ldr	r0, [sp, #24]
fffd9ad8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
fffd9adc:	4621      	mov	r1, r4
fffd9ade:	1b2d      	subs	r5, r5, r4
fffd9ae0:	2402      	movs	r4, #2
fffd9ae2:	4217      	tst	r7, r2
fffd9ae4:	bf18      	it	ne
fffd9ae6:	f046 0602 	orrne.w	r6, r6, #2
fffd9aea:	f7ff fe1f 	bl	fffd972c <rshift>
fffd9aee:	9b04      	ldr	r3, [sp, #16]
fffd9af0:	685b      	ldr	r3, [r3, #4]
fffd9af2:	9302      	str	r3, [sp, #8]
fffd9af4:	2e00      	cmp	r6, #0
fffd9af6:	d0c0      	beq.n	fffd9a7a <__gethex+0x29e>
fffd9af8:	e7b2      	b.n	fffd9a60 <__gethex+0x284>
fffd9afa:	1b7f      	subs	r7, r7, r5
fffd9afc:	9806      	ldr	r0, [sp, #24]
fffd9afe:	4639      	mov	r1, r7
fffd9b00:	f000 ff08 	bl	fffda914 <__any_on>
fffd9b04:	4606      	mov	r6, r0
fffd9b06:	b178      	cbz	r0, fffd9b28 <__gethex+0x34c>
fffd9b08:	1e7a      	subs	r2, r7, #1
fffd9b0a:	9808      	ldr	r0, [sp, #32]
fffd9b0c:	2601      	movs	r6, #1
fffd9b0e:	f002 031f 	and.w	r3, r2, #31
fffd9b12:	1151      	asrs	r1, r2, #5
fffd9b14:	fa06 f303 	lsl.w	r3, r6, r3
fffd9b18:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
fffd9b1c:	420b      	tst	r3, r1
fffd9b1e:	d003      	beq.n	fffd9b28 <__gethex+0x34c>
fffd9b20:	42b2      	cmp	r2, r6
fffd9b22:	f300 80b4 	bgt.w	fffd9c8e <__gethex+0x4b2>
fffd9b26:	2602      	movs	r6, #2
fffd9b28:	9b02      	ldr	r3, [sp, #8]
fffd9b2a:	4639      	mov	r1, r7
fffd9b2c:	9806      	ldr	r0, [sp, #24]
fffd9b2e:	443b      	add	r3, r7
fffd9b30:	9302      	str	r3, [sp, #8]
fffd9b32:	f7ff fdfb 	bl	fffd972c <rshift>
fffd9b36:	e70c      	b.n	fffd9952 <__gethex+0x176>
fffd9b38:	1c9c      	adds	r4, r3, #2
fffd9b3a:	f04f 0800 	mov.w	r8, #0
fffd9b3e:	e673      	b.n	fffd9828 <__gethex+0x4c>
fffd9b40:	9a03      	ldr	r2, [sp, #12]
fffd9b42:	18bd      	adds	r5, r7, r2
fffd9b44:	5cbb      	ldrb	r3, [r7, r2]
fffd9b46:	462f      	mov	r7, r5
fffd9b48:	5cf2      	ldrb	r2, [r6, r3]
fffd9b4a:	2a00      	cmp	r2, #0
fffd9b4c:	f43f af27 	beq.w	fffd999e <__gethex+0x1c2>
fffd9b50:	f817 3f01 	ldrb.w	r3, [r7, #1]!
fffd9b54:	5cf2      	ldrb	r2, [r6, r3]
fffd9b56:	2a00      	cmp	r2, #0
fffd9b58:	d1fa      	bne.n	fffd9b50 <__gethex+0x374>
fffd9b5a:	e720      	b.n	fffd999e <__gethex+0x1c2>
fffd9b5c:	9b02      	ldr	r3, [sp, #8]
fffd9b5e:	1bea      	subs	r2, r5, r7
fffd9b60:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
fffd9b64:	2600      	movs	r6, #0
fffd9b66:	1a9b      	subs	r3, r3, r2
fffd9b68:	9302      	str	r3, [sp, #8]
fffd9b6a:	f000 fca7 	bl	fffda4bc <__lshift>
fffd9b6e:	4603      	mov	r3, r0
fffd9b70:	9006      	str	r0, [sp, #24]
fffd9b72:	3314      	adds	r3, #20
fffd9b74:	9308      	str	r3, [sp, #32]
fffd9b76:	e6ec      	b.n	fffd9952 <__gethex+0x176>
fffd9b78:	9b06      	ldr	r3, [sp, #24]
fffd9b7a:	689b      	ldr	r3, [r3, #8]
fffd9b7c:	429e      	cmp	r6, r3
fffd9b7e:	bfb8      	it	lt
fffd9b80:	4633      	movlt	r3, r6
fffd9b82:	f280 80a1 	bge.w	fffd9cc8 <__gethex+0x4ec>
fffd9b86:	9806      	ldr	r0, [sp, #24]
fffd9b88:	2c02      	cmp	r4, #2
fffd9b8a:	f04f 0101 	mov.w	r1, #1
fffd9b8e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
fffd9b92:	f103 0301 	add.w	r3, r3, #1
fffd9b96:	6103      	str	r3, [r0, #16]
fffd9b98:	6151      	str	r1, [r2, #20]
fffd9b9a:	f000 8081 	beq.w	fffd9ca0 <__gethex+0x4c4>
fffd9b9e:	429e      	cmp	r6, r3
fffd9ba0:	da35      	bge.n	fffd9c0e <__gethex+0x432>
fffd9ba2:	2101      	movs	r1, #1
fffd9ba4:	9806      	ldr	r0, [sp, #24]
fffd9ba6:	f7ff fdc1 	bl	fffd972c <rshift>
fffd9baa:	9b04      	ldr	r3, [sp, #16]
fffd9bac:	9a02      	ldr	r2, [sp, #8]
fffd9bae:	689b      	ldr	r3, [r3, #8]
fffd9bb0:	3201      	adds	r2, #1
fffd9bb2:	9202      	str	r2, [sp, #8]
fffd9bb4:	4293      	cmp	r3, r2
fffd9bb6:	da2d      	bge.n	fffd9c14 <__gethex+0x438>
fffd9bb8:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
fffd9bbc:	24a3      	movs	r4, #163	; 0xa3
fffd9bbe:	f000 fa8f 	bl	fffda0e0 <_Bfree>
fffd9bc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
fffd9bc4:	2300      	movs	r3, #0
fffd9bc6:	6013      	str	r3, [r2, #0]
fffd9bc8:	e728      	b.n	fffd9a1c <__gethex+0x240>
fffd9bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
fffd9bcc:	f1c3 0301 	rsb	r3, r3, #1
fffd9bd0:	9317      	str	r3, [sp, #92]	; 0x5c
fffd9bd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
fffd9bd4:	2b00      	cmp	r3, #0
fffd9bd6:	f43f af4e 	beq.w	fffd9a76 <__gethex+0x29a>
fffd9bda:	9b06      	ldr	r3, [sp, #24]
fffd9bdc:	2000      	movs	r0, #0
fffd9bde:	f8dd c020 	ldr.w	r12, [sp, #32]
fffd9be2:	691e      	ldr	r6, [r3, #16]
fffd9be4:	4663      	mov	r3, r12
fffd9be6:	00b7      	lsls	r7, r6, #2
fffd9be8:	eb0c 0107 	add.w	r1, r12, r7
fffd9bec:	e003      	b.n	fffd9bf6 <__gethex+0x41a>
fffd9bee:	4299      	cmp	r1, r3
fffd9bf0:	f843 0c04 	str.w	r0, [r3, #-4]
fffd9bf4:	d9c0      	bls.n	fffd9b78 <__gethex+0x39c>
fffd9bf6:	469e      	mov	lr, r3
fffd9bf8:	f853 2b04 	ldr.w	r2, [r3], #4
fffd9bfc:	f1b2 3fff 	cmp.w	r2, #4294967295
fffd9c00:	d0f5      	beq.n	fffd9bee <__gethex+0x412>
fffd9c02:	2c02      	cmp	r4, #2
fffd9c04:	f102 0201 	add.w	r2, r2, #1
fffd9c08:	f8ce 2000 	str.w	r2, [lr]
fffd9c0c:	d048      	beq.n	fffd9ca0 <__gethex+0x4c4>
fffd9c0e:	f015 051f 	ands.w	r5, r5, #31
fffd9c12:	d176      	bne.n	fffd9d02 <__gethex+0x526>
fffd9c14:	2421      	movs	r4, #33	; 0x21
fffd9c16:	e730      	b.n	fffd9a7a <__gethex+0x29e>
fffd9c18:	9b06      	ldr	r3, [sp, #24]
fffd9c1a:	f04f 0900 	mov.w	r9, #0
fffd9c1e:	f8dd b020 	ldr.w	r11, [sp, #32]
fffd9c22:	f103 0718 	add.w	r7, r3, #24
fffd9c26:	e67f      	b.n	fffd9928 <__gethex+0x14c>
fffd9c28:	2601      	movs	r6, #1
fffd9c2a:	e74d      	b.n	fffd9ac8 <__gethex+0x2ec>
fffd9c2c:	4639      	mov	r1, r7
fffd9c2e:	9806      	ldr	r0, [sp, #24]
fffd9c30:	f000 fe70 	bl	fffda914 <__any_on>
fffd9c34:	4606      	mov	r6, r0
fffd9c36:	e747      	b.n	fffd9ac8 <__gethex+0x2ec>
fffd9c38:	42a5      	cmp	r5, r4
fffd9c3a:	f47f aea3 	bne.w	fffd9984 <__gethex+0x1a8>
fffd9c3e:	2d01      	cmp	r5, #1
fffd9c40:	dd08      	ble.n	fffd9c54 <__gethex+0x478>
fffd9c42:	1e69      	subs	r1, r5, #1
fffd9c44:	9806      	ldr	r0, [sp, #24]
fffd9c46:	f000 fe65 	bl	fffda914 <__any_on>
fffd9c4a:	2800      	cmp	r0, #0
fffd9c4c:	f43f ae9a 	beq.w	fffd9984 <__gethex+0x1a8>
fffd9c50:	9b04      	ldr	r3, [sp, #16]
fffd9c52:	685b      	ldr	r3, [r3, #4]
fffd9c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
fffd9c56:	2462      	movs	r4, #98	; 0x62
fffd9c58:	9908      	ldr	r1, [sp, #32]
fffd9c5a:	6013      	str	r3, [r2, #0]
fffd9c5c:	2301      	movs	r3, #1
fffd9c5e:	9a06      	ldr	r2, [sp, #24]
fffd9c60:	6113      	str	r3, [r2, #16]
fffd9c62:	600b      	str	r3, [r1, #0]
fffd9c64:	9b16      	ldr	r3, [sp, #88]	; 0x58
fffd9c66:	601a      	str	r2, [r3, #0]
fffd9c68:	e6d8      	b.n	fffd9a1c <__gethex+0x240>
fffd9c6a:	07b2      	lsls	r2, r6, #30
fffd9c6c:	f57f af03 	bpl.w	fffd9a76 <__gethex+0x29a>
fffd9c70:	9b08      	ldr	r3, [sp, #32]
fffd9c72:	681b      	ldr	r3, [r3, #0]
fffd9c74:	431e      	orrs	r6, r3
fffd9c76:	07f3      	lsls	r3, r6, #31
fffd9c78:	d4af      	bmi.n	fffd9bda <__gethex+0x3fe>
fffd9c7a:	e6fc      	b.n	fffd9a76 <__gethex+0x29a>
fffd9c7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
fffd9c7e:	2a00      	cmp	r2, #0
fffd9c80:	f43f ae80 	beq.w	fffd9984 <__gethex+0x1a8>
fffd9c84:	e7e6      	b.n	fffd9c54 <__gethex+0x478>
fffd9c86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
fffd9c88:	2a00      	cmp	r2, #0
fffd9c8a:	d0e3      	beq.n	fffd9c54 <__gethex+0x478>
fffd9c8c:	e67a      	b.n	fffd9984 <__gethex+0x1a8>
fffd9c8e:	1eb9      	subs	r1, r7, #2
fffd9c90:	9806      	ldr	r0, [sp, #24]
fffd9c92:	f000 fe3f 	bl	fffda914 <__any_on>
fffd9c96:	2800      	cmp	r0, #0
fffd9c98:	f43f af45 	beq.w	fffd9b26 <__gethex+0x34a>
fffd9c9c:	2603      	movs	r6, #3
fffd9c9e:	e743      	b.n	fffd9b28 <__gethex+0x34c>
fffd9ca0:	9b04      	ldr	r3, [sp, #16]
fffd9ca2:	681b      	ldr	r3, [r3, #0]
fffd9ca4:	3b01      	subs	r3, #1
fffd9ca6:	42ab      	cmp	r3, r5
fffd9ca8:	bf18      	it	ne
fffd9caa:	2422      	movne	r4, #34	; 0x22
fffd9cac:	f47f aee5 	bne.w	fffd9a7a <__gethex+0x29e>
fffd9cb0:	116a      	asrs	r2, r5, #5
fffd9cb2:	2301      	movs	r3, #1
fffd9cb4:	f005 051f 	and.w	r5, r5, #31
fffd9cb8:	f85c 2022 	ldr.w	r2, [r12, r2, lsl #2]
fffd9cbc:	40ab      	lsls	r3, r5
fffd9cbe:	4213      	tst	r3, r2
fffd9cc0:	bf14      	ite	ne
fffd9cc2:	2421      	movne	r4, #33	; 0x21
fffd9cc4:	2422      	moveq	r4, #34	; 0x22
fffd9cc6:	e6d8      	b.n	fffd9a7a <__gethex+0x29e>
fffd9cc8:	9b06      	ldr	r3, [sp, #24]
fffd9cca:	f8dd 901c 	ldr.w	r9, [sp, #28]
fffd9cce:	6859      	ldr	r1, [r3, #4]
fffd9cd0:	4648      	mov	r0, r9
fffd9cd2:	3101      	adds	r1, #1
fffd9cd4:	f000 f9de 	bl	fffda094 <_Balloc>
fffd9cd8:	9a06      	ldr	r2, [sp, #24]
fffd9cda:	f102 010c 	add.w	r1, r2, #12
fffd9cde:	6913      	ldr	r3, [r2, #16]
fffd9ce0:	3302      	adds	r3, #2
fffd9ce2:	009a      	lsls	r2, r3, #2
fffd9ce4:	4680      	mov	r8, r0
fffd9ce6:	300c      	adds	r0, #12
fffd9ce8:	f000 f8fa 	bl	fffd9ee0 <memcpy>
fffd9cec:	9906      	ldr	r1, [sp, #24]
fffd9cee:	4648      	mov	r0, r9
fffd9cf0:	f000 f9f6 	bl	fffda0e0 <_Bfree>
fffd9cf4:	f8cd 8018 	str.w	r8, [sp, #24]
fffd9cf8:	f108 0c14 	add.w	r12, r8, #20
fffd9cfc:	f8d8 3010 	ldr.w	r3, [r8, #16]
fffd9d00:	e741      	b.n	fffd9b86 <__gethex+0x3aa>
fffd9d02:	4467      	add	r7, r12
fffd9d04:	f1c5 0520 	rsb	r5, r5, #32
fffd9d08:	f857 0c04 	ldr.w	r0, [r7, #-4]
fffd9d0c:	f000 fa82 	bl	fffda214 <__hi0bits>
fffd9d10:	42a8      	cmp	r0, r5
fffd9d12:	f6bf af7f 	bge.w	fffd9c14 <__gethex+0x438>
fffd9d16:	e744      	b.n	fffd9ba2 <__gethex+0x3c6>

fffd9d18 <__match>:
fffd9d18:	b430      	push	{r4, r5}
fffd9d1a:	6804      	ldr	r4, [r0, #0]
fffd9d1c:	3401      	adds	r4, #1
fffd9d1e:	e008      	b.n	fffd9d32 <__match+0x1a>
fffd9d20:	f814 3b01 	ldrb.w	r3, [r4], #1
fffd9d24:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
fffd9d28:	2d19      	cmp	r5, #25
fffd9d2a:	bf98      	it	ls
fffd9d2c:	3320      	addls	r3, #32
fffd9d2e:	4293      	cmp	r3, r2
fffd9d30:	d107      	bne.n	fffd9d42 <__match+0x2a>
fffd9d32:	f811 2b01 	ldrb.w	r2, [r1], #1
fffd9d36:	2a00      	cmp	r2, #0
fffd9d38:	d1f2      	bne.n	fffd9d20 <__match+0x8>
fffd9d3a:	6004      	str	r4, [r0, #0]
fffd9d3c:	2001      	movs	r0, #1
fffd9d3e:	bc30      	pop	{r4, r5}
fffd9d40:	4770      	bx	lr
fffd9d42:	2000      	movs	r0, #0
fffd9d44:	bc30      	pop	{r4, r5}
fffd9d46:	4770      	bx	lr

fffd9d48 <__hexnan>:
fffd9d48:	680b      	ldr	r3, [r1, #0]
fffd9d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffd9d4e:	b085      	sub	sp, #20
fffd9d50:	1159      	asrs	r1, r3, #5
fffd9d52:	f013 031f 	ands.w	r3, r3, #31
fffd9d56:	9002      	str	r0, [sp, #8]
fffd9d58:	f24d 0924 	movw	r9, #53284	; 0xd024
fffd9d5c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
fffd9d60:	9101      	str	r1, [sp, #4]
fffd9d62:	bf1c      	itt	ne
fffd9d64:	3104      	addne	r1, #4
fffd9d66:	9101      	strne	r1, [sp, #4]
fffd9d68:	9901      	ldr	r1, [sp, #4]
fffd9d6a:	f6cf 79fd 	movt	r9, #65533	; 0xfffd
fffd9d6e:	9303      	str	r3, [sp, #12]
fffd9d70:	2300      	movs	r3, #0
fffd9d72:	461d      	mov	r5, r3
fffd9d74:	469a      	mov	r10, r3
fffd9d76:	f841 3c04 	str.w	r3, [r1, #-4]
fffd9d7a:	469c      	mov	r12, r3
fffd9d7c:	9b02      	ldr	r3, [sp, #8]
fffd9d7e:	f1a1 0804 	sub.w	r8, r1, #4
fffd9d82:	46c6      	mov	lr, r8
fffd9d84:	4640      	mov	r0, r8
fffd9d86:	681b      	ldr	r3, [r3, #0]
fffd9d88:	1c5e      	adds	r6, r3, #1
fffd9d8a:	785c      	ldrb	r4, [r3, #1]
fffd9d8c:	b30c      	cbz	r4, fffd9dd2 <__hexnan+0x8a>
fffd9d8e:	f819 1004 	ldrb.w	r1, [r9, r4]
fffd9d92:	2900      	cmp	r1, #0
fffd9d94:	d158      	bne.n	fffd9e48 <__hexnan+0x100>
fffd9d96:	2c20      	cmp	r4, #32
fffd9d98:	d87d      	bhi.n	fffd9e96 <__hexnan+0x14e>
fffd9d9a:	45d4      	cmp	r12, r10
fffd9d9c:	dd14      	ble.n	fffd9dc8 <__hexnan+0x80>
fffd9d9e:	4570      	cmp	r0, lr
fffd9da0:	bf2c      	ite	cs
fffd9da2:	2300      	movcs	r3, #0
fffd9da4:	2301      	movcc	r3, #1
fffd9da6:	2d07      	cmp	r5, #7
fffd9da8:	bfc8      	it	gt
fffd9daa:	2300      	movgt	r3, #0
fffd9dac:	2b00      	cmp	r3, #0
fffd9dae:	d15f      	bne.n	fffd9e70 <__hexnan+0x128>
fffd9db0:	4290      	cmp	r0, r2
fffd9db2:	bf98      	it	ls
fffd9db4:	2508      	movls	r5, #8
fffd9db6:	d907      	bls.n	fffd9dc8 <__hexnan+0x80>
fffd9db8:	f1a0 0e04 	sub.w	lr, r0, #4
fffd9dbc:	2300      	movs	r3, #0
fffd9dbe:	46e2      	mov	r10, r12
fffd9dc0:	f840 3c04 	str.w	r3, [r0, #-4]
fffd9dc4:	461d      	mov	r5, r3
fffd9dc6:	4670      	mov	r0, lr
fffd9dc8:	4633      	mov	r3, r6
fffd9dca:	785c      	ldrb	r4, [r3, #1]
fffd9dcc:	1c5e      	adds	r6, r3, #1
fffd9dce:	2c00      	cmp	r4, #0
fffd9dd0:	d1dd      	bne.n	fffd9d8e <__hexnan+0x46>
fffd9dd2:	f1bc 0f00 	cmp.w	r12, #0
fffd9dd6:	d060      	beq.n	fffd9e9a <__hexnan+0x152>
fffd9dd8:	4570      	cmp	r0, lr
fffd9dda:	bf2c      	ite	cs
fffd9ddc:	2300      	movcs	r3, #0
fffd9dde:	2301      	movcc	r3, #1
fffd9de0:	2d07      	cmp	r5, #7
fffd9de2:	bfc8      	it	gt
fffd9de4:	2300      	movgt	r3, #0
fffd9de6:	b18b      	cbz	r3, fffd9e0c <__hexnan+0xc4>
fffd9de8:	f1c5 0508 	rsb	r5, r5, #8
fffd9dec:	6804      	ldr	r4, [r0, #0]
fffd9dee:	4603      	mov	r3, r0
fffd9df0:	00ad      	lsls	r5, r5, #2
fffd9df2:	f1c5 0720 	rsb	r7, r5, #32
fffd9df6:	685e      	ldr	r6, [r3, #4]
fffd9df8:	fa06 f107 	lsl.w	r1, r6, r7
fffd9dfc:	4321      	orrs	r1, r4
fffd9dfe:	fa26 f405 	lsr.w	r4, r6, r5
fffd9e02:	6019      	str	r1, [r3, #0]
fffd9e04:	f843 4f04 	str.w	r4, [r3, #4]!
fffd9e08:	459e      	cmp	lr, r3
fffd9e0a:	d8f4      	bhi.n	fffd9df6 <__hexnan+0xae>
fffd9e0c:	4290      	cmp	r0, r2
fffd9e0e:	d94c      	bls.n	fffd9eaa <__hexnan+0x162>
fffd9e10:	4613      	mov	r3, r2
fffd9e12:	f850 1b04 	ldr.w	r1, [r0], #4
fffd9e16:	4580      	cmp	r8, r0
fffd9e18:	f843 1b04 	str.w	r1, [r3], #4
fffd9e1c:	d2f9      	bcs.n	fffd9e12 <__hexnan+0xca>
fffd9e1e:	2100      	movs	r1, #0
fffd9e20:	f843 1b04 	str.w	r1, [r3], #4
fffd9e24:	4598      	cmp	r8, r3
fffd9e26:	d2fb      	bcs.n	fffd9e20 <__hexnan+0xd8>
fffd9e28:	9b01      	ldr	r3, [sp, #4]
fffd9e2a:	f853 1c04 	ldr.w	r1, [r3, #-4]
fffd9e2e:	b119      	cbz	r1, fffd9e38 <__hexnan+0xf0>
fffd9e30:	e037      	b.n	fffd9ea2 <__hexnan+0x15a>
fffd9e32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
fffd9e36:	bba3      	cbnz	r3, fffd9ea2 <__hexnan+0x15a>
fffd9e38:	4542      	cmp	r2, r8
fffd9e3a:	d1fa      	bne.n	fffd9e32 <__hexnan+0xea>
fffd9e3c:	2301      	movs	r3, #1
fffd9e3e:	2005      	movs	r0, #5
fffd9e40:	6013      	str	r3, [r2, #0]
fffd9e42:	b005      	add	sp, #20
fffd9e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd9e48:	3501      	adds	r5, #1
fffd9e4a:	f10c 0c01 	add.w	r12, r12, #1
fffd9e4e:	2d08      	cmp	r5, #8
fffd9e50:	dc07      	bgt.n	fffd9e62 <__hexnan+0x11a>
fffd9e52:	6803      	ldr	r3, [r0, #0]
fffd9e54:	011b      	lsls	r3, r3, #4
fffd9e56:	f001 010f 	and.w	r1, r1, #15
fffd9e5a:	4319      	orrs	r1, r3
fffd9e5c:	4633      	mov	r3, r6
fffd9e5e:	6001      	str	r1, [r0, #0]
fffd9e60:	e7b3      	b.n	fffd9dca <__hexnan+0x82>
fffd9e62:	4290      	cmp	r0, r2
fffd9e64:	d9b0      	bls.n	fffd9dc8 <__hexnan+0x80>
fffd9e66:	2300      	movs	r3, #0
fffd9e68:	3804      	subs	r0, #4
fffd9e6a:	6003      	str	r3, [r0, #0]
fffd9e6c:	2501      	movs	r5, #1
fffd9e6e:	e7f2      	b.n	fffd9e56 <__hexnan+0x10e>
fffd9e70:	f1c5 0508 	rsb	r5, r5, #8
fffd9e74:	6804      	ldr	r4, [r0, #0]
fffd9e76:	4603      	mov	r3, r0
fffd9e78:	00ad      	lsls	r5, r5, #2
fffd9e7a:	f1c5 0b20 	rsb	r11, r5, #32
fffd9e7e:	685f      	ldr	r7, [r3, #4]
fffd9e80:	fa07 f10b 	lsl.w	r1, r7, r11
fffd9e84:	4321      	orrs	r1, r4
fffd9e86:	fa27 f405 	lsr.w	r4, r7, r5
fffd9e8a:	6019      	str	r1, [r3, #0]
fffd9e8c:	f843 4f04 	str.w	r4, [r3, #4]!
fffd9e90:	459e      	cmp	lr, r3
fffd9e92:	d8f4      	bhi.n	fffd9e7e <__hexnan+0x136>
fffd9e94:	e78c      	b.n	fffd9db0 <__hexnan+0x68>
fffd9e96:	2c29      	cmp	r4, #41	; 0x29
fffd9e98:	d017      	beq.n	fffd9eca <__hexnan+0x182>
fffd9e9a:	2004      	movs	r0, #4
fffd9e9c:	b005      	add	sp, #20
fffd9e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd9ea2:	2005      	movs	r0, #5
fffd9ea4:	b005      	add	sp, #20
fffd9ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffd9eaa:	9c01      	ldr	r4, [sp, #4]
fffd9eac:	9b03      	ldr	r3, [sp, #12]
fffd9eae:	f854 1c04 	ldr.w	r1, [r4, #-4]
fffd9eb2:	2b00      	cmp	r3, #0
fffd9eb4:	d0bb      	beq.n	fffd9e2e <__hexnan+0xe6>
fffd9eb6:	f1c3 0320 	rsb	r3, r3, #32
fffd9eba:	f04f 30ff 	mov.w	r0, #4294967295
fffd9ebe:	fa20 f303 	lsr.w	r3, r0, r3
fffd9ec2:	4019      	ands	r1, r3
fffd9ec4:	f844 1c04 	str.w	r1, [r4, #-4]
fffd9ec8:	e7b1      	b.n	fffd9e2e <__hexnan+0xe6>
fffd9eca:	9902      	ldr	r1, [sp, #8]
fffd9ecc:	3302      	adds	r3, #2
fffd9ece:	600b      	str	r3, [r1, #0]
fffd9ed0:	f1bc 0f00 	cmp.w	r12, #0
fffd9ed4:	d180      	bne.n	fffd9dd8 <__hexnan+0x90>
fffd9ed6:	e7e0      	b.n	fffd9e9a <__hexnan+0x152>

fffd9ed8 <__retarget_lock_acquire_recursive>:
fffd9ed8:	4770      	bx	lr
fffd9eda:	bf00      	nop

fffd9edc <__retarget_lock_release_recursive>:
fffd9edc:	4770      	bx	lr
fffd9ede:	bf00      	nop

fffd9ee0 <memcpy>:
fffd9ee0:	4684      	mov	r12, r0
fffd9ee2:	ea41 0300 	orr.w	r3, r1, r0
fffd9ee6:	f013 0303 	ands.w	r3, r3, #3
fffd9eea:	d149      	bne.n	fffd9f80 <memcpy+0xa0>
fffd9eec:	3a40      	subs	r2, #64	; 0x40
fffd9eee:	d323      	bcc.n	fffd9f38 <memcpy+0x58>
fffd9ef0:	680b      	ldr	r3, [r1, #0]
fffd9ef2:	6003      	str	r3, [r0, #0]
fffd9ef4:	684b      	ldr	r3, [r1, #4]
fffd9ef6:	6043      	str	r3, [r0, #4]
fffd9ef8:	688b      	ldr	r3, [r1, #8]
fffd9efa:	6083      	str	r3, [r0, #8]
fffd9efc:	68cb      	ldr	r3, [r1, #12]
fffd9efe:	60c3      	str	r3, [r0, #12]
fffd9f00:	690b      	ldr	r3, [r1, #16]
fffd9f02:	6103      	str	r3, [r0, #16]
fffd9f04:	694b      	ldr	r3, [r1, #20]
fffd9f06:	6143      	str	r3, [r0, #20]
fffd9f08:	698b      	ldr	r3, [r1, #24]
fffd9f0a:	6183      	str	r3, [r0, #24]
fffd9f0c:	69cb      	ldr	r3, [r1, #28]
fffd9f0e:	61c3      	str	r3, [r0, #28]
fffd9f10:	6a0b      	ldr	r3, [r1, #32]
fffd9f12:	6203      	str	r3, [r0, #32]
fffd9f14:	6a4b      	ldr	r3, [r1, #36]	; 0x24
fffd9f16:	6243      	str	r3, [r0, #36]	; 0x24
fffd9f18:	6a8b      	ldr	r3, [r1, #40]	; 0x28
fffd9f1a:	6283      	str	r3, [r0, #40]	; 0x28
fffd9f1c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
fffd9f1e:	62c3      	str	r3, [r0, #44]	; 0x2c
fffd9f20:	6b0b      	ldr	r3, [r1, #48]	; 0x30
fffd9f22:	6303      	str	r3, [r0, #48]	; 0x30
fffd9f24:	6b4b      	ldr	r3, [r1, #52]	; 0x34
fffd9f26:	6343      	str	r3, [r0, #52]	; 0x34
fffd9f28:	6b8b      	ldr	r3, [r1, #56]	; 0x38
fffd9f2a:	6383      	str	r3, [r0, #56]	; 0x38
fffd9f2c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
fffd9f2e:	63c3      	str	r3, [r0, #60]	; 0x3c
fffd9f30:	3040      	adds	r0, #64	; 0x40
fffd9f32:	3140      	adds	r1, #64	; 0x40
fffd9f34:	3a40      	subs	r2, #64	; 0x40
fffd9f36:	d2db      	bcs.n	fffd9ef0 <memcpy+0x10>
fffd9f38:	3230      	adds	r2, #48	; 0x30
fffd9f3a:	d30b      	bcc.n	fffd9f54 <memcpy+0x74>
fffd9f3c:	680b      	ldr	r3, [r1, #0]
fffd9f3e:	6003      	str	r3, [r0, #0]
fffd9f40:	684b      	ldr	r3, [r1, #4]
fffd9f42:	6043      	str	r3, [r0, #4]
fffd9f44:	688b      	ldr	r3, [r1, #8]
fffd9f46:	6083      	str	r3, [r0, #8]
fffd9f48:	68cb      	ldr	r3, [r1, #12]
fffd9f4a:	60c3      	str	r3, [r0, #12]
fffd9f4c:	3010      	adds	r0, #16
fffd9f4e:	3110      	adds	r1, #16
fffd9f50:	3a10      	subs	r2, #16
fffd9f52:	d2f3      	bcs.n	fffd9f3c <memcpy+0x5c>
fffd9f54:	320c      	adds	r2, #12
fffd9f56:	d305      	bcc.n	fffd9f64 <memcpy+0x84>
fffd9f58:	f851 3b04 	ldr.w	r3, [r1], #4
fffd9f5c:	f840 3b04 	str.w	r3, [r0], #4
fffd9f60:	3a04      	subs	r2, #4
fffd9f62:	d2f9      	bcs.n	fffd9f58 <memcpy+0x78>
fffd9f64:	3204      	adds	r2, #4
fffd9f66:	d008      	beq.n	fffd9f7a <memcpy+0x9a>
fffd9f68:	07d2      	lsls	r2, r2, #31
fffd9f6a:	bf1c      	itt	ne
fffd9f6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
fffd9f70:	f800 3b01 	strbne.w	r3, [r0], #1
fffd9f74:	d301      	bcc.n	fffd9f7a <memcpy+0x9a>
fffd9f76:	880b      	ldrh	r3, [r1, #0]
fffd9f78:	8003      	strh	r3, [r0, #0]
fffd9f7a:	4660      	mov	r0, r12
fffd9f7c:	4770      	bx	lr
fffd9f7e:	bf00      	nop
fffd9f80:	2a08      	cmp	r2, #8
fffd9f82:	d313      	bcc.n	fffd9fac <memcpy+0xcc>
fffd9f84:	078b      	lsls	r3, r1, #30
fffd9f86:	d0b1      	beq.n	fffd9eec <memcpy+0xc>
fffd9f88:	f010 0303 	ands.w	r3, r0, #3
fffd9f8c:	d0ae      	beq.n	fffd9eec <memcpy+0xc>
fffd9f8e:	f1c3 0304 	rsb	r3, r3, #4
fffd9f92:	1ad2      	subs	r2, r2, r3
fffd9f94:	07db      	lsls	r3, r3, #31
fffd9f96:	bf1c      	itt	ne
fffd9f98:	f811 3b01 	ldrbne.w	r3, [r1], #1
fffd9f9c:	f800 3b01 	strbne.w	r3, [r0], #1
fffd9fa0:	d3a4      	bcc.n	fffd9eec <memcpy+0xc>
fffd9fa2:	f831 3b02 	ldrh.w	r3, [r1], #2
fffd9fa6:	f820 3b02 	strh.w	r3, [r0], #2
fffd9faa:	e79f      	b.n	fffd9eec <memcpy+0xc>
fffd9fac:	3a04      	subs	r2, #4
fffd9fae:	d3d9      	bcc.n	fffd9f64 <memcpy+0x84>
fffd9fb0:	3a01      	subs	r2, #1
fffd9fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
fffd9fb6:	f800 3b01 	strb.w	r3, [r0], #1
fffd9fba:	d2f9      	bcs.n	fffd9fb0 <memcpy+0xd0>
fffd9fbc:	780b      	ldrb	r3, [r1, #0]
fffd9fbe:	7003      	strb	r3, [r0, #0]
fffd9fc0:	784b      	ldrb	r3, [r1, #1]
fffd9fc2:	7043      	strb	r3, [r0, #1]
fffd9fc4:	788b      	ldrb	r3, [r1, #2]
fffd9fc6:	7083      	strb	r3, [r0, #2]
fffd9fc8:	4660      	mov	r0, r12
fffd9fca:	4770      	bx	lr

fffd9fcc <memmove>:
fffd9fcc:	4288      	cmp	r0, r1
fffd9fce:	b4f0      	push	{r4, r5, r6, r7}
fffd9fd0:	d90d      	bls.n	fffd9fee <memmove+0x22>
fffd9fd2:	188b      	adds	r3, r1, r2
fffd9fd4:	4283      	cmp	r3, r0
fffd9fd6:	d90a      	bls.n	fffd9fee <memmove+0x22>
fffd9fd8:	1884      	adds	r4, r0, r2
fffd9fda:	b132      	cbz	r2, fffd9fea <memmove+0x1e>
fffd9fdc:	4622      	mov	r2, r4
fffd9fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
fffd9fe2:	4299      	cmp	r1, r3
fffd9fe4:	f802 4d01 	strb.w	r4, [r2, #-1]!
fffd9fe8:	d1f9      	bne.n	fffd9fde <memmove+0x12>
fffd9fea:	bcf0      	pop	{r4, r5, r6, r7}
fffd9fec:	4770      	bx	lr
fffd9fee:	2a0f      	cmp	r2, #15
fffd9ff0:	d94d      	bls.n	fffda08e <memmove+0xc2>
fffd9ff2:	ea40 0301 	orr.w	r3, r0, r1
fffd9ff6:	079b      	lsls	r3, r3, #30
fffd9ff8:	bf18      	it	ne
fffd9ffa:	4603      	movne	r3, r0
fffd9ffc:	d13d      	bne.n	fffda07a <memmove+0xae>
fffd9ffe:	f1a2 0310 	sub.w	r3, r2, #16
fffda002:	f101 0720 	add.w	r7, r1, #32
fffda006:	f101 0410 	add.w	r4, r1, #16
fffda00a:	f100 0510 	add.w	r5, r0, #16
fffda00e:	091b      	lsrs	r3, r3, #4
fffda010:	eb07 1703 	add.w	r7, r7, r3, lsl #4
fffda014:	f854 6c10 	ldr.w	r6, [r4, #-16]
fffda018:	3410      	adds	r4, #16
fffda01a:	3510      	adds	r5, #16
fffda01c:	f845 6c20 	str.w	r6, [r5, #-32]
fffda020:	f854 6c1c 	ldr.w	r6, [r4, #-28]
fffda024:	f845 6c1c 	str.w	r6, [r5, #-28]
fffda028:	f854 6c18 	ldr.w	r6, [r4, #-24]
fffda02c:	f845 6c18 	str.w	r6, [r5, #-24]
fffda030:	f854 6c14 	ldr.w	r6, [r4, #-20]
fffda034:	42bc      	cmp	r4, r7
fffda036:	f845 6c14 	str.w	r6, [r5, #-20]
fffda03a:	d1eb      	bne.n	fffda014 <memmove+0x48>
fffda03c:	f002 050f 	and.w	r5, r2, #15
fffda040:	3301      	adds	r3, #1
fffda042:	2d03      	cmp	r5, #3
fffda044:	ea4f 1303 	mov.w	r3, r3, lsl #4
fffda048:	4419      	add	r1, r3
fffda04a:	bf98      	it	ls
fffda04c:	462a      	movls	r2, r5
fffda04e:	4403      	add	r3, r0
fffda050:	d911      	bls.n	fffda076 <memmove+0xaa>
fffda052:	1f1f      	subs	r7, r3, #4
fffda054:	460e      	mov	r6, r1
fffda056:	462c      	mov	r4, r5
fffda058:	f856 cb04 	ldr.w	r12, [r6], #4
fffda05c:	3c04      	subs	r4, #4
fffda05e:	2c03      	cmp	r4, #3
fffda060:	f847 cf04 	str.w	r12, [r7, #4]!
fffda064:	d8f8      	bhi.n	fffda058 <memmove+0x8c>
fffda066:	1f2c      	subs	r4, r5, #4
fffda068:	f002 0203 	and.w	r2, r2, #3
fffda06c:	f024 0403 	bic.w	r4, r4, #3
fffda070:	3404      	adds	r4, #4
fffda072:	4423      	add	r3, r4
fffda074:	4421      	add	r1, r4
fffda076:	2a00      	cmp	r2, #0
fffda078:	d0b7      	beq.n	fffd9fea <memmove+0x1e>
fffda07a:	3b01      	subs	r3, #1
fffda07c:	440a      	add	r2, r1
fffda07e:	f811 4b01 	ldrb.w	r4, [r1], #1
fffda082:	4291      	cmp	r1, r2
fffda084:	f803 4f01 	strb.w	r4, [r3, #1]!
fffda088:	d1f9      	bne.n	fffda07e <memmove+0xb2>
fffda08a:	bcf0      	pop	{r4, r5, r6, r7}
fffda08c:	4770      	bx	lr
fffda08e:	4603      	mov	r3, r0
fffda090:	e7f1      	b.n	fffda076 <memmove+0xaa>
fffda092:	bf00      	nop

fffda094 <_Balloc>:
fffda094:	b538      	push	{r3, r4, r5, lr}
fffda096:	4605      	mov	r5, r0
fffda098:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
fffda09a:	460c      	mov	r4, r1
fffda09c:	b14b      	cbz	r3, fffda0b2 <_Balloc+0x1e>
fffda09e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
fffda0a2:	b180      	cbz	r0, fffda0c6 <_Balloc+0x32>
fffda0a4:	6802      	ldr	r2, [r0, #0]
fffda0a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
fffda0aa:	2300      	movs	r3, #0
fffda0ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
fffda0b0:	bd38      	pop	{r3, r4, r5, pc}
fffda0b2:	2221      	movs	r2, #33	; 0x21
fffda0b4:	2104      	movs	r1, #4
fffda0b6:	f000 fca3 	bl	fffdaa00 <_calloc_r>
fffda0ba:	4603      	mov	r3, r0
fffda0bc:	64e8      	str	r0, [r5, #76]	; 0x4c
fffda0be:	2800      	cmp	r0, #0
fffda0c0:	d1ed      	bne.n	fffda09e <_Balloc+0xa>
fffda0c2:	2000      	movs	r0, #0
fffda0c4:	bd38      	pop	{r3, r4, r5, pc}
fffda0c6:	2101      	movs	r1, #1
fffda0c8:	4628      	mov	r0, r5
fffda0ca:	fa01 f504 	lsl.w	r5, r1, r4
fffda0ce:	1d6a      	adds	r2, r5, #5
fffda0d0:	0092      	lsls	r2, r2, #2
fffda0d2:	f000 fc95 	bl	fffdaa00 <_calloc_r>
fffda0d6:	2800      	cmp	r0, #0
fffda0d8:	d0f3      	beq.n	fffda0c2 <_Balloc+0x2e>
fffda0da:	e9c0 4501 	strd	r4, r5, [r0, #4]
fffda0de:	e7e4      	b.n	fffda0aa <_Balloc+0x16>

fffda0e0 <_Bfree>:
fffda0e0:	b131      	cbz	r1, fffda0f0 <_Bfree+0x10>
fffda0e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
fffda0e4:	684a      	ldr	r2, [r1, #4]
fffda0e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
fffda0ea:	6008      	str	r0, [r1, #0]
fffda0ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
fffda0f0:	4770      	bx	lr
fffda0f2:	bf00      	nop

fffda0f4 <__multadd>:
fffda0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
fffda0f6:	f101 0714 	add.w	r7, r1, #20
fffda0fa:	690c      	ldr	r4, [r1, #16]
fffda0fc:	b083      	sub	sp, #12
fffda0fe:	460d      	mov	r5, r1
fffda100:	4606      	mov	r6, r0
fffda102:	f04f 0c00 	mov.w	r12, #0
fffda106:	6838      	ldr	r0, [r7, #0]
fffda108:	f10c 0c01 	add.w	r12, r12, #1
fffda10c:	4564      	cmp	r4, r12
fffda10e:	b281      	uxth	r1, r0
fffda110:	ea4f 4010 	mov.w	r0, r0, lsr #16
fffda114:	fb02 3301 	mla	r3, r2, r1, r3
fffda118:	ea4f 4113 	mov.w	r1, r3, lsr #16
fffda11c:	b29b      	uxth	r3, r3
fffda11e:	fb02 1000 	mla	r0, r2, r0, r1
fffda122:	eb03 4100 	add.w	r1, r3, r0, lsl #16
fffda126:	ea4f 4310 	mov.w	r3, r0, lsr #16
fffda12a:	f847 1b04 	str.w	r1, [r7], #4
fffda12e:	dcea      	bgt.n	fffda106 <__multadd+0x12>
fffda130:	b13b      	cbz	r3, fffda142 <__multadd+0x4e>
fffda132:	68aa      	ldr	r2, [r5, #8]
fffda134:	42a2      	cmp	r2, r4
fffda136:	dd07      	ble.n	fffda148 <__multadd+0x54>
fffda138:	eb05 0284 	add.w	r2, r5, r4, lsl #2
fffda13c:	3401      	adds	r4, #1
fffda13e:	6153      	str	r3, [r2, #20]
fffda140:	612c      	str	r4, [r5, #16]
fffda142:	4628      	mov	r0, r5
fffda144:	b003      	add	sp, #12
fffda146:	bdf0      	pop	{r4, r5, r6, r7, pc}
fffda148:	6869      	ldr	r1, [r5, #4]
fffda14a:	4630      	mov	r0, r6
fffda14c:	9301      	str	r3, [sp, #4]
fffda14e:	3101      	adds	r1, #1
fffda150:	f7ff ffa0 	bl	fffda094 <_Balloc>
fffda154:	692a      	ldr	r2, [r5, #16]
fffda156:	f105 010c 	add.w	r1, r5, #12
fffda15a:	3202      	adds	r2, #2
fffda15c:	0092      	lsls	r2, r2, #2
fffda15e:	4607      	mov	r7, r0
fffda160:	300c      	adds	r0, #12
fffda162:	f7ff febd 	bl	fffd9ee0 <memcpy>
fffda166:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
fffda168:	6869      	ldr	r1, [r5, #4]
fffda16a:	9b01      	ldr	r3, [sp, #4]
fffda16c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
fffda170:	6028      	str	r0, [r5, #0]
fffda172:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
fffda176:	463d      	mov	r5, r7
fffda178:	e7de      	b.n	fffda138 <__multadd+0x44>
fffda17a:	bf00      	nop

fffda17c <__s2b>:
fffda17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
fffda180:	461e      	mov	r6, r3
fffda182:	f648 6539 	movw	r5, #36409	; 0x8e39
fffda186:	3308      	adds	r3, #8
fffda188:	f6c3 05e3 	movt	r5, #14563	; 0x38e3
fffda18c:	4607      	mov	r7, r0
fffda18e:	460c      	mov	r4, r1
fffda190:	4690      	mov	r8, r2
fffda192:	fb83 0105 	smull	r0, r1, r3, r5
fffda196:	17db      	asrs	r3, r3, #31
fffda198:	9d08      	ldr	r5, [sp, #32]
fffda19a:	ebc3 0261 	rsb	r2, r3, r1, asr #1
fffda19e:	2a01      	cmp	r2, #1
fffda1a0:	bfd8      	it	le
fffda1a2:	2100      	movle	r1, #0
fffda1a4:	dd05      	ble.n	fffda1b2 <__s2b+0x36>
fffda1a6:	2301      	movs	r3, #1
fffda1a8:	2100      	movs	r1, #0
fffda1aa:	005b      	lsls	r3, r3, #1
fffda1ac:	3101      	adds	r1, #1
fffda1ae:	429a      	cmp	r2, r3
fffda1b0:	dcfb      	bgt.n	fffda1aa <__s2b+0x2e>
fffda1b2:	4638      	mov	r0, r7
fffda1b4:	f7ff ff6e 	bl	fffda094 <_Balloc>
fffda1b8:	f1b8 0f09 	cmp.w	r8, #9
fffda1bc:	f04f 0301 	mov.w	r3, #1
fffda1c0:	bfdc      	itt	le
fffda1c2:	340a      	addle	r4, #10
fffda1c4:	f04f 0809 	movle.w	r8, #9
fffda1c8:	6145      	str	r5, [r0, #20]
fffda1ca:	6103      	str	r3, [r0, #16]
fffda1cc:	dd10      	ble.n	fffda1f0 <__s2b+0x74>
fffda1ce:	f104 0909 	add.w	r9, r4, #9
fffda1d2:	4444      	add	r4, r8
fffda1d4:	464d      	mov	r5, r9
fffda1d6:	f815 3b01 	ldrb.w	r3, [r5], #1
fffda1da:	4601      	mov	r1, r0
fffda1dc:	220a      	movs	r2, #10
fffda1de:	4638      	mov	r0, r7
fffda1e0:	3b30      	subs	r3, #48	; 0x30
fffda1e2:	f7ff ff87 	bl	fffda0f4 <__multadd>
fffda1e6:	42ac      	cmp	r4, r5
fffda1e8:	d1f5      	bne.n	fffda1d6 <__s2b+0x5a>
fffda1ea:	eb09 0408 	add.w	r4, r9, r8
fffda1ee:	3c08      	subs	r4, #8
fffda1f0:	4546      	cmp	r6, r8
fffda1f2:	dd0c      	ble.n	fffda20e <__s2b+0x92>
fffda1f4:	eba6 0608 	sub.w	r6, r6, r8
fffda1f8:	4426      	add	r6, r4
fffda1fa:	f814 3b01 	ldrb.w	r3, [r4], #1
fffda1fe:	4601      	mov	r1, r0
fffda200:	220a      	movs	r2, #10
fffda202:	4638      	mov	r0, r7
fffda204:	3b30      	subs	r3, #48	; 0x30
fffda206:	f7ff ff75 	bl	fffda0f4 <__multadd>
fffda20a:	42a6      	cmp	r6, r4
fffda20c:	d1f5      	bne.n	fffda1fa <__s2b+0x7e>
fffda20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
fffda212:	bf00      	nop

fffda214 <__hi0bits>:
fffda214:	0c02      	lsrs	r2, r0, #16
fffda216:	4603      	mov	r3, r0
fffda218:	2000      	movs	r0, #0
fffda21a:	0412      	lsls	r2, r2, #16
fffda21c:	b90a      	cbnz	r2, fffda222 <__hi0bits+0xe>
fffda21e:	041b      	lsls	r3, r3, #16
fffda220:	2010      	movs	r0, #16
fffda222:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
fffda226:	bf04      	itt	eq
fffda228:	021b      	lsleq	r3, r3, #8
fffda22a:	3008      	addeq	r0, #8
fffda22c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
fffda230:	bf04      	itt	eq
fffda232:	011b      	lsleq	r3, r3, #4
fffda234:	3004      	addeq	r0, #4
fffda236:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
fffda23a:	bf04      	itt	eq
fffda23c:	009b      	lsleq	r3, r3, #2
fffda23e:	3002      	addeq	r0, #2
fffda240:	2b00      	cmp	r3, #0
fffda242:	db04      	blt.n	fffda24e <__hi0bits+0x3a>
fffda244:	005b      	lsls	r3, r3, #1
fffda246:	d501      	bpl.n	fffda24c <__hi0bits+0x38>
fffda248:	3001      	adds	r0, #1
fffda24a:	4770      	bx	lr
fffda24c:	2020      	movs	r0, #32
fffda24e:	4770      	bx	lr

fffda250 <__lo0bits>:
fffda250:	6803      	ldr	r3, [r0, #0]
fffda252:	4601      	mov	r1, r0
fffda254:	f013 0207 	ands.w	r2, r3, #7
fffda258:	d009      	beq.n	fffda26e <__lo0bits+0x1e>
fffda25a:	07da      	lsls	r2, r3, #31
fffda25c:	d421      	bmi.n	fffda2a2 <__lo0bits+0x52>
fffda25e:	0798      	lsls	r0, r3, #30
fffda260:	bf4b      	itete	mi
fffda262:	085b      	lsrmi	r3, r3, #1
fffda264:	089b      	lsrpl	r3, r3, #2
fffda266:	2001      	movmi	r0, #1
fffda268:	2002      	movpl	r0, #2
fffda26a:	600b      	str	r3, [r1, #0]
fffda26c:	4770      	bx	lr
fffda26e:	b298      	uxth	r0, r3
fffda270:	b1a0      	cbz	r0, fffda29c <__lo0bits+0x4c>
fffda272:	4610      	mov	r0, r2
fffda274:	f013 0fff 	tst.w	r3, #255	; 0xff
fffda278:	bf04      	itt	eq
fffda27a:	0a1b      	lsreq	r3, r3, #8
fffda27c:	3008      	addeq	r0, #8
fffda27e:	071a      	lsls	r2, r3, #28
fffda280:	bf04      	itt	eq
fffda282:	091b      	lsreq	r3, r3, #4
fffda284:	3004      	addeq	r0, #4
fffda286:	079a      	lsls	r2, r3, #30
fffda288:	bf04      	itt	eq
fffda28a:	089b      	lsreq	r3, r3, #2
fffda28c:	3002      	addeq	r0, #2
fffda28e:	07da      	lsls	r2, r3, #31
fffda290:	d402      	bmi.n	fffda298 <__lo0bits+0x48>
fffda292:	085b      	lsrs	r3, r3, #1
fffda294:	d007      	beq.n	fffda2a6 <__lo0bits+0x56>
fffda296:	3001      	adds	r0, #1
fffda298:	600b      	str	r3, [r1, #0]
fffda29a:	4770      	bx	lr
fffda29c:	0c1b      	lsrs	r3, r3, #16
fffda29e:	2010      	movs	r0, #16
fffda2a0:	e7e8      	b.n	fffda274 <__lo0bits+0x24>
fffda2a2:	2000      	movs	r0, #0
fffda2a4:	4770      	bx	lr
fffda2a6:	2020      	movs	r0, #32
fffda2a8:	4770      	bx	lr
fffda2aa:	bf00      	nop

fffda2ac <__i2b>:
fffda2ac:	b510      	push	{r4, lr}
fffda2ae:	460c      	mov	r4, r1
fffda2b0:	2101      	movs	r1, #1
fffda2b2:	f7ff feef 	bl	fffda094 <_Balloc>
fffda2b6:	2201      	movs	r2, #1
fffda2b8:	6144      	str	r4, [r0, #20]
fffda2ba:	6102      	str	r2, [r0, #16]
fffda2bc:	bd10      	pop	{r4, pc}
fffda2be:	bf00      	nop

fffda2c0 <__multiply>:
fffda2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffda2c4:	b085      	sub	sp, #20
fffda2c6:	690b      	ldr	r3, [r1, #16]
fffda2c8:	6914      	ldr	r4, [r2, #16]
fffda2ca:	42a3      	cmp	r3, r4
fffda2cc:	bfb3      	iteet	lt
fffda2ce:	4616      	movlt	r6, r2
fffda2d0:	460e      	movge	r6, r1
fffda2d2:	461d      	movge	r5, r3
fffda2d4:	4625      	movlt	r5, r4
fffda2d6:	bfb8      	it	lt
fffda2d8:	461c      	movlt	r4, r3
fffda2da:	68b3      	ldr	r3, [r6, #8]
fffda2dc:	bfb8      	it	lt
fffda2de:	4689      	movlt	r9, r1
fffda2e0:	eb05 0804 	add.w	r8, r5, r4
fffda2e4:	6871      	ldr	r1, [r6, #4]
fffda2e6:	bfa8      	it	ge
fffda2e8:	4691      	movge	r9, r2
fffda2ea:	4543      	cmp	r3, r8
fffda2ec:	bfb8      	it	lt
fffda2ee:	3101      	addlt	r1, #1
fffda2f0:	f7ff fed0 	bl	fffda094 <_Balloc>
fffda2f4:	f100 0b14 	add.w	r11, r0, #20
fffda2f8:	9001      	str	r0, [sp, #4]
fffda2fa:	eb0b 0a88 	add.w	r10, r11, r8, lsl #2
fffda2fe:	45d3      	cmp	r11, r10
fffda300:	d205      	bcs.n	fffda30e <__multiply+0x4e>
fffda302:	465b      	mov	r3, r11
fffda304:	2200      	movs	r2, #0
fffda306:	f843 2b04 	str.w	r2, [r3], #4
fffda30a:	459a      	cmp	r10, r3
fffda30c:	d8fb      	bhi.n	fffda306 <__multiply+0x46>
fffda30e:	f109 0314 	add.w	r3, r9, #20
fffda312:	f106 0214 	add.w	r2, r6, #20
fffda316:	eb03 0484 	add.w	r4, r3, r4, lsl #2
fffda31a:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
fffda31e:	42a3      	cmp	r3, r4
fffda320:	d244      	bcs.n	fffda3ac <__multiply+0xec>
fffda322:	eba4 0409 	sub.w	r4, r4, r9
fffda326:	e9cd a802 	strd	r10, r8, [sp, #8]
fffda32a:	3c15      	subs	r4, #21
fffda32c:	f109 0910 	add.w	r9, r9, #16
fffda330:	f024 0403 	bic.w	r4, r4, #3
fffda334:	4690      	mov	r8, r2
fffda336:	4423      	add	r3, r4
fffda338:	469a      	mov	r10, r3
fffda33a:	e003      	b.n	fffda344 <__multiply+0x84>
fffda33c:	45ca      	cmp	r10, r9
fffda33e:	f10b 0b04 	add.w	r11, r11, #4
fffda342:	d031      	beq.n	fffda3a8 <__multiply+0xe8>
fffda344:	f859 0f04 	ldr.w	r0, [r9, #4]!
fffda348:	4647      	mov	r7, r8
fffda34a:	465e      	mov	r6, r11
fffda34c:	2200      	movs	r2, #0
fffda34e:	fa1f fc80 	uxth.w	r12, r0
fffda352:	f1bc 0f00 	cmp.w	r12, #0
fffda356:	d13f      	bne.n	fffda3d8 <__multiply+0x118>
fffda358:	0c00      	lsrs	r0, r0, #16
fffda35a:	d0ef      	beq.n	fffda33c <__multiply+0x7c>
fffda35c:	f8db 3000 	ldr.w	r3, [r11]
fffda360:	4644      	mov	r4, r8
fffda362:	465e      	mov	r6, r11
fffda364:	2700      	movs	r7, #0
fffda366:	461a      	mov	r2, r3
fffda368:	e000      	b.n	fffda36c <__multiply+0xac>
fffda36a:	460e      	mov	r6, r1
fffda36c:	8825      	ldrh	r5, [r4, #0]
fffda36e:	0c12      	lsrs	r2, r2, #16
fffda370:	b29b      	uxth	r3, r3
fffda372:	4631      	mov	r1, r6
fffda374:	fb00 2205 	mla	r2, r0, r5, r2
fffda378:	4417      	add	r7, r2
fffda37a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
fffda37e:	f841 3b04 	str.w	r3, [r1], #4
fffda382:	f854 3b04 	ldr.w	r3, [r4], #4
fffda386:	6872      	ldr	r2, [r6, #4]
fffda388:	45a6      	cmp	lr, r4
fffda38a:	ea4f 4313 	mov.w	r3, r3, lsr #16
fffda38e:	b295      	uxth	r5, r2
fffda390:	fb00 5303 	mla	r3, r0, r3, r5
fffda394:	eb03 4317 	add.w	r3, r3, r7, lsr #16
fffda398:	ea4f 4713 	mov.w	r7, r3, lsr #16
fffda39c:	d8e5      	bhi.n	fffda36a <__multiply+0xaa>
fffda39e:	45ca      	cmp	r10, r9
fffda3a0:	6073      	str	r3, [r6, #4]
fffda3a2:	f10b 0b04 	add.w	r11, r11, #4
fffda3a6:	d1cd      	bne.n	fffda344 <__multiply+0x84>
fffda3a8:	e9dd a802 	ldrd	r10, r8, [sp, #8]
fffda3ac:	f1b8 0f00 	cmp.w	r8, #0
fffda3b0:	dd0b      	ble.n	fffda3ca <__multiply+0x10a>
fffda3b2:	f85a 3c04 	ldr.w	r3, [r10, #-4]
fffda3b6:	f1aa 0a04 	sub.w	r10, r10, #4
fffda3ba:	b11b      	cbz	r3, fffda3c4 <__multiply+0x104>
fffda3bc:	e005      	b.n	fffda3ca <__multiply+0x10a>
fffda3be:	f85a 3d04 	ldr.w	r3, [r10, #-4]!
fffda3c2:	b913      	cbnz	r3, fffda3ca <__multiply+0x10a>
fffda3c4:	f1b8 0801 	subs.w	r8, r8, #1
fffda3c8:	d1f9      	bne.n	fffda3be <__multiply+0xfe>
fffda3ca:	9801      	ldr	r0, [sp, #4]
fffda3cc:	f8c0 8010 	str.w	r8, [r0, #16]
fffda3d0:	b005      	add	sp, #20
fffda3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffda3d6:	4606      	mov	r6, r0
fffda3d8:	f857 1b04 	ldr.w	r1, [r7], #4
fffda3dc:	4630      	mov	r0, r6
fffda3de:	6834      	ldr	r4, [r6, #0]
fffda3e0:	45be      	cmp	lr, r7
fffda3e2:	b28b      	uxth	r3, r1
fffda3e4:	ea4f 4111 	mov.w	r1, r1, lsr #16
fffda3e8:	b2a5      	uxth	r5, r4
fffda3ea:	ea4f 4414 	mov.w	r4, r4, lsr #16
fffda3ee:	fb0c 5303 	mla	r3, r12, r3, r5
fffda3f2:	fb0c 4101 	mla	r1, r12, r1, r4
fffda3f6:	4413      	add	r3, r2
fffda3f8:	eb01 4213 	add.w	r2, r1, r3, lsr #16
fffda3fc:	b29b      	uxth	r3, r3
fffda3fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
fffda402:	ea4f 4212 	mov.w	r2, r2, lsr #16
fffda406:	f840 3b04 	str.w	r3, [r0], #4
fffda40a:	d8e4      	bhi.n	fffda3d6 <__multiply+0x116>
fffda40c:	6072      	str	r2, [r6, #4]
fffda40e:	f8d9 0000 	ldr.w	r0, [r9]
fffda412:	0c00      	lsrs	r0, r0, #16
fffda414:	d092      	beq.n	fffda33c <__multiply+0x7c>
fffda416:	e7a1      	b.n	fffda35c <__multiply+0x9c>

fffda418 <__pow5mult>:
fffda418:	f012 0303 	ands.w	r3, r2, #3
fffda41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
fffda420:	4614      	mov	r4, r2
fffda422:	4607      	mov	r7, r0
fffda424:	bf08      	it	eq
fffda426:	460d      	moveq	r5, r1
fffda428:	d12d      	bne.n	fffda486 <__pow5mult+0x6e>
fffda42a:	10a4      	asrs	r4, r4, #2
fffda42c:	d01c      	beq.n	fffda468 <__pow5mult+0x50>
fffda42e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
fffda430:	b3ae      	cbz	r6, fffda49e <__pow5mult+0x86>
fffda432:	07e3      	lsls	r3, r4, #31
fffda434:	f04f 0800 	mov.w	r8, #0
fffda438:	d406      	bmi.n	fffda448 <__pow5mult+0x30>
fffda43a:	1064      	asrs	r4, r4, #1
fffda43c:	d014      	beq.n	fffda468 <__pow5mult+0x50>
fffda43e:	6830      	ldr	r0, [r6, #0]
fffda440:	b1a8      	cbz	r0, fffda46e <__pow5mult+0x56>
fffda442:	4606      	mov	r6, r0
fffda444:	07e3      	lsls	r3, r4, #31
fffda446:	d5f8      	bpl.n	fffda43a <__pow5mult+0x22>
fffda448:	4632      	mov	r2, r6
fffda44a:	4629      	mov	r1, r5
fffda44c:	4638      	mov	r0, r7
fffda44e:	f7ff ff37 	bl	fffda2c0 <__multiply>
fffda452:	b1b5      	cbz	r5, fffda482 <__pow5mult+0x6a>
fffda454:	686a      	ldr	r2, [r5, #4]
fffda456:	1064      	asrs	r4, r4, #1
fffda458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
fffda45a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
fffda45e:	6029      	str	r1, [r5, #0]
fffda460:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
fffda464:	4605      	mov	r5, r0
fffda466:	d1ea      	bne.n	fffda43e <__pow5mult+0x26>
fffda468:	4628      	mov	r0, r5
fffda46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
fffda46e:	4632      	mov	r2, r6
fffda470:	4631      	mov	r1, r6
fffda472:	4638      	mov	r0, r7
fffda474:	f7ff ff24 	bl	fffda2c0 <__multiply>
fffda478:	6030      	str	r0, [r6, #0]
fffda47a:	4606      	mov	r6, r0
fffda47c:	f8c0 8000 	str.w	r8, [r0]
fffda480:	e7e0      	b.n	fffda444 <__pow5mult+0x2c>
fffda482:	4605      	mov	r5, r0
fffda484:	e7d9      	b.n	fffda43a <__pow5mult+0x22>
fffda486:	1e5a      	subs	r2, r3, #1
fffda488:	f24d 2518 	movw	r5, #53784	; 0xd218
fffda48c:	f6cf 75fd 	movt	r5, #65533	; 0xfffd
fffda490:	2300      	movs	r3, #0
fffda492:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
fffda496:	f7ff fe2d 	bl	fffda0f4 <__multadd>
fffda49a:	4605      	mov	r5, r0
fffda49c:	e7c5      	b.n	fffda42a <__pow5mult+0x12>
fffda49e:	2101      	movs	r1, #1
fffda4a0:	4638      	mov	r0, r7
fffda4a2:	f7ff fdf7 	bl	fffda094 <_Balloc>
fffda4a6:	2301      	movs	r3, #1
fffda4a8:	f240 2271 	movw	r2, #625	; 0x271
fffda4ac:	4606      	mov	r6, r0
fffda4ae:	e9c0 3204 	strd	r3, r2, [r0, #16]
fffda4b2:	2300      	movs	r3, #0
fffda4b4:	64b8      	str	r0, [r7, #72]	; 0x48
fffda4b6:	6003      	str	r3, [r0, #0]
fffda4b8:	e7bb      	b.n	fffda432 <__pow5mult+0x1a>
fffda4ba:	bf00      	nop

fffda4bc <__lshift>:
fffda4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
fffda4c0:	ea4f 1962 	mov.w	r9, r2, asr #5
fffda4c4:	690f      	ldr	r7, [r1, #16]
fffda4c6:	460d      	mov	r5, r1
fffda4c8:	688b      	ldr	r3, [r1, #8]
fffda4ca:	4690      	mov	r8, r2
fffda4cc:	444f      	add	r7, r9
fffda4ce:	4606      	mov	r6, r0
fffda4d0:	1c7c      	adds	r4, r7, #1
fffda4d2:	6849      	ldr	r1, [r1, #4]
fffda4d4:	429c      	cmp	r4, r3
fffda4d6:	dd03      	ble.n	fffda4e0 <__lshift+0x24>
fffda4d8:	005b      	lsls	r3, r3, #1
fffda4da:	3101      	adds	r1, #1
fffda4dc:	429c      	cmp	r4, r3
fffda4de:	dcfb      	bgt.n	fffda4d8 <__lshift+0x1c>
fffda4e0:	4630      	mov	r0, r6
fffda4e2:	f7ff fdd7 	bl	fffda094 <_Balloc>
fffda4e6:	f1b9 0f00 	cmp.w	r9, #0
fffda4ea:	f100 0314 	add.w	r3, r0, #20
fffda4ee:	4684      	mov	r12, r0
fffda4f0:	bfd8      	it	le
fffda4f2:	4619      	movle	r1, r3
fffda4f4:	dd06      	ble.n	fffda504 <__lshift+0x48>
fffda4f6:	eb03 0189 	add.w	r1, r3, r9, lsl #2
fffda4fa:	2200      	movs	r2, #0
fffda4fc:	f843 2b04 	str.w	r2, [r3], #4
fffda500:	428b      	cmp	r3, r1
fffda502:	d1fb      	bne.n	fffda4fc <__lshift+0x40>
fffda504:	6928      	ldr	r0, [r5, #16]
fffda506:	f018 081f 	ands.w	r8, r8, #31
fffda50a:	f105 0314 	add.w	r3, r5, #20
fffda50e:	bf1c      	itt	ne
fffda510:	f1c8 0220 	rsbne	r2, r8, #32
fffda514:	f04f 0a00 	movne.w	r10, #0
fffda518:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
fffda51c:	d114      	bne.n	fffda548 <__lshift+0x8c>
fffda51e:	3904      	subs	r1, #4
fffda520:	f853 2b04 	ldr.w	r2, [r3], #4
fffda524:	459e      	cmp	lr, r3
fffda526:	f841 2f04 	str.w	r2, [r1, #4]!
fffda52a:	d8f9      	bhi.n	fffda520 <__lshift+0x64>
fffda52c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
fffda52e:	3c01      	subs	r4, #1
fffda530:	686a      	ldr	r2, [r5, #4]
fffda532:	4660      	mov	r0, r12
fffda534:	f8cc 4010 	str.w	r4, [r12, #16]
fffda538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
fffda53c:	6029      	str	r1, [r5, #0]
fffda53e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
fffda542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
fffda546:	4649      	mov	r1, r9
fffda548:	6818      	ldr	r0, [r3, #0]
fffda54a:	4689      	mov	r9, r1
fffda54c:	fa00 f008 	lsl.w	r0, r0, r8
fffda550:	ea40 000a 	orr.w	r0, r0, r10
fffda554:	f849 0b04 	str.w	r0, [r9], #4
fffda558:	f853 0b04 	ldr.w	r0, [r3], #4
fffda55c:	4573      	cmp	r3, lr
fffda55e:	fa20 fa02 	lsr.w	r10, r0, r2
fffda562:	d3f0      	bcc.n	fffda546 <__lshift+0x8a>
fffda564:	f8c1 a004 	str.w	r10, [r1, #4]
fffda568:	f1ba 0f00 	cmp.w	r10, #0
fffda56c:	d0de      	beq.n	fffda52c <__lshift+0x70>
fffda56e:	1cbc      	adds	r4, r7, #2
fffda570:	e7dc      	b.n	fffda52c <__lshift+0x70>
fffda572:	bf00      	nop

fffda574 <__mcmp>:
fffda574:	b430      	push	{r4, r5}
fffda576:	4605      	mov	r5, r0
fffda578:	690a      	ldr	r2, [r1, #16]
fffda57a:	6900      	ldr	r0, [r0, #16]
fffda57c:	1a80      	subs	r0, r0, r2
fffda57e:	d10f      	bne.n	fffda5a0 <__mcmp+0x2c>
fffda580:	0092      	lsls	r2, r2, #2
fffda582:	3514      	adds	r5, #20
fffda584:	3114      	adds	r1, #20
fffda586:	18ab      	adds	r3, r5, r2
fffda588:	4411      	add	r1, r2
fffda58a:	e001      	b.n	fffda590 <__mcmp+0x1c>
fffda58c:	429d      	cmp	r5, r3
fffda58e:	d207      	bcs.n	fffda5a0 <__mcmp+0x2c>
fffda590:	f853 4d04 	ldr.w	r4, [r3, #-4]!
fffda594:	f851 2d04 	ldr.w	r2, [r1, #-4]!
fffda598:	4294      	cmp	r4, r2
fffda59a:	d0f7      	beq.n	fffda58c <__mcmp+0x18>
fffda59c:	d302      	bcc.n	fffda5a4 <__mcmp+0x30>
fffda59e:	2001      	movs	r0, #1
fffda5a0:	bc30      	pop	{r4, r5}
fffda5a2:	4770      	bx	lr
fffda5a4:	f04f 30ff 	mov.w	r0, #4294967295
fffda5a8:	e7fa      	b.n	fffda5a0 <__mcmp+0x2c>
fffda5aa:	bf00      	nop

fffda5ac <__mdiff>:
fffda5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
fffda5b0:	4615      	mov	r5, r2
fffda5b2:	692b      	ldr	r3, [r5, #16]
fffda5b4:	460c      	mov	r4, r1
fffda5b6:	690a      	ldr	r2, [r1, #16]
fffda5b8:	f101 0714 	add.w	r7, r1, #20
fffda5bc:	f105 0814 	add.w	r8, r5, #20
fffda5c0:	eba2 0903 	sub.w	r9, r2, r3
fffda5c4:	f1b9 0f00 	cmp.w	r9, #0
fffda5c8:	d15e      	bne.n	fffda688 <__mdiff+0xdc>
fffda5ca:	009b      	lsls	r3, r3, #2
fffda5cc:	18fa      	adds	r2, r7, r3
fffda5ce:	4443      	add	r3, r8
fffda5d0:	e001      	b.n	fffda5d6 <__mdiff+0x2a>
fffda5d2:	42ba      	cmp	r2, r7
fffda5d4:	d965      	bls.n	fffda6a2 <__mdiff+0xf6>
fffda5d6:	f852 6d04 	ldr.w	r6, [r2, #-4]!
fffda5da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
fffda5de:	428e      	cmp	r6, r1
fffda5e0:	d0f7      	beq.n	fffda5d2 <__mdiff+0x26>
fffda5e2:	d355      	bcc.n	fffda690 <__mdiff+0xe4>
fffda5e4:	6861      	ldr	r1, [r4, #4]
fffda5e6:	4646      	mov	r6, r8
fffda5e8:	f7ff fd54 	bl	fffda094 <_Balloc>
fffda5ec:	f8d4 c010 	ldr.w	r12, [r4, #16]
fffda5f0:	692b      	ldr	r3, [r5, #16]
fffda5f2:	463d      	mov	r5, r7
fffda5f4:	2200      	movs	r2, #0
fffda5f6:	eb07 078c 	add.w	r7, r7, r12, lsl #2
fffda5fa:	eb08 0e83 	add.w	lr, r8, r3, lsl #2
fffda5fe:	f100 0414 	add.w	r4, r0, #20
fffda602:	f8c0 900c 	str.w	r9, [r0, #12]
fffda606:	f855 8b04 	ldr.w	r8, [r5], #4
fffda60a:	f856 1b04 	ldr.w	r1, [r6], #4
fffda60e:	fa1f f388 	uxth.w	r3, r8
fffda612:	45b6      	cmp	lr, r6
fffda614:	4413      	add	r3, r2
fffda616:	b28a      	uxth	r2, r1
fffda618:	eba3 0302 	sub.w	r3, r3, r2
fffda61c:	ea4f 4211 	mov.w	r2, r1, lsr #16
fffda620:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
fffda624:	eb02 4223 	add.w	r2, r2, r3, asr #16
fffda628:	b29b      	uxth	r3, r3
fffda62a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
fffda62e:	ea4f 4222 	mov.w	r2, r2, asr #16
fffda632:	f844 3b04 	str.w	r3, [r4], #4
fffda636:	d8e6      	bhi.n	fffda606 <__mdiff+0x5a>
fffda638:	42af      	cmp	r7, r5
fffda63a:	d919      	bls.n	fffda670 <__mdiff+0xc4>
fffda63c:	46a6      	mov	lr, r4
fffda63e:	462e      	mov	r6, r5
fffda640:	f856 8b04 	ldr.w	r8, [r6], #4
fffda644:	42b7      	cmp	r7, r6
fffda646:	fa1f f388 	uxth.w	r3, r8
fffda64a:	441a      	add	r2, r3
fffda64c:	ea4f 4322 	mov.w	r3, r2, asr #16
fffda650:	b291      	uxth	r1, r2
fffda652:	eb03 4218 	add.w	r2, r3, r8, lsr #16
fffda656:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
fffda65a:	ea4f 4222 	mov.w	r2, r2, asr #16
fffda65e:	f84e 3b04 	str.w	r3, [lr], #4
fffda662:	d8ed      	bhi.n	fffda640 <__mdiff+0x94>
fffda664:	43ed      	mvns	r5, r5
fffda666:	442f      	add	r7, r5
fffda668:	f027 0703 	bic.w	r7, r7, #3
fffda66c:	3704      	adds	r7, #4
fffda66e:	443c      	add	r4, r7
fffda670:	3c04      	subs	r4, #4
fffda672:	b92b      	cbnz	r3, fffda680 <__mdiff+0xd4>
fffda674:	f854 3d04 	ldr.w	r3, [r4, #-4]!
fffda678:	f10c 3cff 	add.w	r12, r12, #4294967295
fffda67c:	2b00      	cmp	r3, #0
fffda67e:	d0f9      	beq.n	fffda674 <__mdiff+0xc8>
fffda680:	f8c0 c010 	str.w	r12, [r0, #16]
fffda684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
fffda688:	bfa8      	it	ge
fffda68a:	f04f 0900 	movge.w	r9, #0
fffda68e:	daa9      	bge.n	fffda5e4 <__mdiff+0x38>
fffda690:	463a      	mov	r2, r7
fffda692:	4623      	mov	r3, r4
fffda694:	4647      	mov	r7, r8
fffda696:	462c      	mov	r4, r5
fffda698:	4690      	mov	r8, r2
fffda69a:	461d      	mov	r5, r3
fffda69c:	f04f 0901 	mov.w	r9, #1
fffda6a0:	e7a0      	b.n	fffda5e4 <__mdiff+0x38>
fffda6a2:	2100      	movs	r1, #0
fffda6a4:	f7ff fcf6 	bl	fffda094 <_Balloc>
fffda6a8:	2201      	movs	r2, #1
fffda6aa:	2300      	movs	r3, #0
fffda6ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
fffda6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fffda6b4 <__ulp>:
fffda6b4:	2300      	movs	r3, #0
fffda6b6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
fffda6ba:	400b      	ands	r3, r1
fffda6bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
fffda6c0:	2b00      	cmp	r3, #0
fffda6c2:	dd02      	ble.n	fffda6ca <__ulp+0x16>
fffda6c4:	2000      	movs	r0, #0
fffda6c6:	4619      	mov	r1, r3
fffda6c8:	4770      	bx	lr
fffda6ca:	425b      	negs	r3, r3
fffda6cc:	151b      	asrs	r3, r3, #20
fffda6ce:	2b13      	cmp	r3, #19
fffda6d0:	dd0b      	ble.n	fffda6ea <__ulp+0x36>
fffda6d2:	3b14      	subs	r3, #20
fffda6d4:	2100      	movs	r1, #0
fffda6d6:	2b1e      	cmp	r3, #30
fffda6d8:	bfdb      	ittet	le
fffda6da:	f1c3 031f 	rsble	r3, r3, #31
fffda6de:	2201      	movle	r2, #1
fffda6e0:	2301      	movgt	r3, #1
fffda6e2:	fa02 f303 	lslle.w	r3, r2, r3
fffda6e6:	4618      	mov	r0, r3
fffda6e8:	4770      	bx	lr
fffda6ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
fffda6ee:	2000      	movs	r0, #0
fffda6f0:	fa42 f103 	asr.w	r1, r2, r3
fffda6f4:	4770      	bx	lr
fffda6f6:	bf00      	nop

fffda6f8 <__b2d>:
fffda6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
fffda6fc:	f100 0714 	add.w	r7, r0, #20
fffda700:	6906      	ldr	r6, [r0, #16]
fffda702:	eb07 0686 	add.w	r6, r7, r6, lsl #2
fffda706:	f1a6 0804 	sub.w	r8, r6, #4
fffda70a:	f856 9c04 	ldr.w	r9, [r6, #-4]
fffda70e:	4648      	mov	r0, r9
fffda710:	f7ff fd80 	bl	fffda214 <__hi0bits>
fffda714:	280a      	cmp	r0, #10
fffda716:	f1c0 0220 	rsb	r2, r0, #32
fffda71a:	600a      	str	r2, [r1, #0]
fffda71c:	dc18      	bgt.n	fffda750 <__b2d+0x58>
fffda71e:	f1c0 030b 	rsb	r3, r0, #11
fffda722:	4547      	cmp	r7, r8
fffda724:	fa29 f203 	lsr.w	r2, r9, r3
fffda728:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
fffda72c:	bf38      	it	cc
fffda72e:	f856 2c08 	ldrcc.w	r2, [r6, #-8]
fffda732:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
fffda736:	bf2c      	ite	cs
fffda738:	2200      	movcs	r2, #0
fffda73a:	40da      	lsrcc	r2, r3
fffda73c:	f100 0315 	add.w	r3, r0, #21
fffda740:	fa09 f303 	lsl.w	r3, r9, r3
fffda744:	4629      	mov	r1, r5
fffda746:	ea43 0402 	orr.w	r4, r3, r2
fffda74a:	4620      	mov	r0, r4
fffda74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
fffda750:	4547      	cmp	r7, r8
fffda752:	f1a0 030b 	sub.w	r3, r0, #11
fffda756:	d21d      	bcs.n	fffda794 <__b2d+0x9c>
fffda758:	f856 0c08 	ldr.w	r0, [r6, #-8]
fffda75c:	b1e3      	cbz	r3, fffda798 <__b2d+0xa0>
fffda75e:	fa09 f903 	lsl.w	r9, r9, r3
fffda762:	f1a6 0208 	sub.w	r2, r6, #8
fffda766:	f1c3 0120 	rsb	r1, r3, #32
fffda76a:	f049 597f 	orr.w	r9, r9, #1069547520	; 0x3fc00000
fffda76e:	4297      	cmp	r7, r2
fffda770:	fa20 fc01 	lsr.w	r12, r0, r1
fffda774:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
fffda778:	fa00 f003 	lsl.w	r0, r0, r3
fffda77c:	ea49 050c 	orr.w	r5, r9, r12
fffda780:	d203      	bcs.n	fffda78a <__b2d+0x92>
fffda782:	f856 3c0c 	ldr.w	r3, [r6, #-12]
fffda786:	40cb      	lsrs	r3, r1
fffda788:	4318      	orrs	r0, r3
fffda78a:	4604      	mov	r4, r0
fffda78c:	4620      	mov	r0, r4
fffda78e:	4629      	mov	r1, r5
fffda790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
fffda794:	4618      	mov	r0, r3
fffda796:	b92b      	cbnz	r3, fffda7a4 <__b2d+0xac>
fffda798:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
fffda79c:	4604      	mov	r4, r0
fffda79e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
fffda7a2:	e7f3      	b.n	fffda78c <__b2d+0x94>
fffda7a4:	fa09 f303 	lsl.w	r3, r9, r3
fffda7a8:	2000      	movs	r0, #0
fffda7aa:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
fffda7ae:	4604      	mov	r4, r0
fffda7b0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
fffda7b4:	e7ea      	b.n	fffda78c <__b2d+0x94>
fffda7b6:	bf00      	nop

fffda7b8 <__d2b>:
fffda7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
fffda7bc:	b082      	sub	sp, #8
fffda7be:	2101      	movs	r1, #1
fffda7c0:	461c      	mov	r4, r3
fffda7c2:	4690      	mov	r8, r2
fffda7c4:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
fffda7c8:	f7ff fc64 	bl	fffda094 <_Balloc>
fffda7cc:	4623      	mov	r3, r4
fffda7ce:	f3c4 540a 	ubfx	r4, r4, #20, #11
fffda7d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
fffda7d6:	4607      	mov	r7, r0
fffda7d8:	b10c      	cbz	r4, fffda7de <__d2b+0x26>
fffda7da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
fffda7de:	f1b8 0200 	subs.w	r2, r8, #0
fffda7e2:	9301      	str	r3, [sp, #4]
fffda7e4:	d01e      	beq.n	fffda824 <__d2b+0x6c>
fffda7e6:	a802      	add	r0, sp, #8
fffda7e8:	f840 2d08 	str.w	r2, [r0, #-8]!
fffda7ec:	f7ff fd30 	bl	fffda250 <__lo0bits>
fffda7f0:	bb68      	cbnz	r0, fffda84e <__d2b+0x96>
fffda7f2:	e9dd 2300 	ldrd	r2, r3, [sp]
fffda7f6:	617a      	str	r2, [r7, #20]
fffda7f8:	2b00      	cmp	r3, #0
fffda7fa:	61bb      	str	r3, [r7, #24]
fffda7fc:	bf0c      	ite	eq
fffda7fe:	2101      	moveq	r1, #1
fffda800:	2102      	movne	r1, #2
fffda802:	6139      	str	r1, [r7, #16]
fffda804:	b9c4      	cbnz	r4, fffda838 <__d2b+0x80>
fffda806:	eb07 0381 	add.w	r3, r7, r1, lsl #2
fffda80a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
fffda80e:	6030      	str	r0, [r6, #0]
fffda810:	6918      	ldr	r0, [r3, #16]
fffda812:	f7ff fcff 	bl	fffda214 <__hi0bits>
fffda816:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
fffda81a:	6028      	str	r0, [r5, #0]
fffda81c:	4638      	mov	r0, r7
fffda81e:	b002      	add	sp, #8
fffda820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
fffda824:	a801      	add	r0, sp, #4
fffda826:	f7ff fd13 	bl	fffda250 <__lo0bits>
fffda82a:	9b01      	ldr	r3, [sp, #4]
fffda82c:	2101      	movs	r1, #1
fffda82e:	e9c7 1304 	strd	r1, r3, [r7, #16]
fffda832:	3020      	adds	r0, #32
fffda834:	2c00      	cmp	r4, #0
fffda836:	d0e6      	beq.n	fffda806 <__d2b+0x4e>
fffda838:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
fffda83c:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
fffda840:	4420      	add	r0, r4
fffda842:	6030      	str	r0, [r6, #0]
fffda844:	4638      	mov	r0, r7
fffda846:	602b      	str	r3, [r5, #0]
fffda848:	b002      	add	sp, #8
fffda84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
fffda84e:	9b01      	ldr	r3, [sp, #4]
fffda850:	f1c0 0220 	rsb	r2, r0, #32
fffda854:	9900      	ldr	r1, [sp, #0]
fffda856:	fa03 f202 	lsl.w	r2, r3, r2
fffda85a:	40c3      	lsrs	r3, r0
fffda85c:	430a      	orrs	r2, r1
fffda85e:	9301      	str	r3, [sp, #4]
fffda860:	617a      	str	r2, [r7, #20]
fffda862:	e7c9      	b.n	fffda7f8 <__d2b+0x40>

fffda864 <__ratio>:
fffda864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffda868:	b083      	sub	sp, #12
fffda86a:	468a      	mov	r10, r1
fffda86c:	4683      	mov	r11, r0
fffda86e:	4669      	mov	r1, sp
fffda870:	f7ff ff42 	bl	fffda6f8 <__b2d>
fffda874:	4604      	mov	r4, r0
fffda876:	460d      	mov	r5, r1
fffda878:	4650      	mov	r0, r10
fffda87a:	a901      	add	r1, sp, #4
fffda87c:	f7ff ff3c 	bl	fffda6f8 <__b2d>
fffda880:	f8db 2010 	ldr.w	r2, [r11, #16]
fffda884:	4680      	mov	r8, r0
fffda886:	f8da 0010 	ldr.w	r0, [r10, #16]
fffda88a:	4689      	mov	r9, r1
fffda88c:	e9dd 1300 	ldrd	r1, r3, [sp]
fffda890:	1a12      	subs	r2, r2, r0
fffda892:	1acb      	subs	r3, r1, r3
fffda894:	eb03 1342 	add.w	r3, r3, r2, lsl #5
fffda898:	2b00      	cmp	r3, #0
fffda89a:	bfcb      	itete	gt
fffda89c:	462a      	movgt	r2, r5
fffda89e:	464a      	movle	r2, r9
fffda8a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
fffda8a4:	eba2 5103 	suble.w	r1, r2, r3, lsl #20
fffda8a8:	bfd7      	itett	le
fffda8aa:	4640      	movle	r0, r8
fffda8ac:	4626      	movgt	r6, r4
fffda8ae:	4680      	movle	r8, r0
fffda8b0:	4689      	movle	r9, r1
fffda8b2:	bfc4      	itt	gt
fffda8b4:	4634      	movgt	r4, r6
fffda8b6:	463d      	movgt	r5, r7
fffda8b8:	4642      	mov	r2, r8
fffda8ba:	464b      	mov	r3, r9
fffda8bc:	4620      	mov	r0, r4
fffda8be:	4629      	mov	r1, r5
fffda8c0:	f000 fbb4 	bl	fffdb02c <__aeabi_ddiv>
fffda8c4:	b003      	add	sp, #12
fffda8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffda8ca:	bf00      	nop

fffda8cc <__copybits>:
fffda8cc:	b470      	push	{r4, r5, r6}
fffda8ce:	3901      	subs	r1, #1
fffda8d0:	6914      	ldr	r4, [r2, #16]
fffda8d2:	f102 0314 	add.w	r3, r2, #20
fffda8d6:	1149      	asrs	r1, r1, #5
fffda8d8:	1c4d      	adds	r5, r1, #1
fffda8da:	eb03 0184 	add.w	r1, r3, r4, lsl #2
fffda8de:	428b      	cmp	r3, r1
fffda8e0:	eb00 0485 	add.w	r4, r0, r5, lsl #2
fffda8e4:	d20c      	bcs.n	fffda900 <__copybits+0x34>
fffda8e6:	1f05      	subs	r5, r0, #4
fffda8e8:	f853 6b04 	ldr.w	r6, [r3], #4
fffda8ec:	4299      	cmp	r1, r3
fffda8ee:	f845 6f04 	str.w	r6, [r5, #4]!
fffda8f2:	d8f9      	bhi.n	fffda8e8 <__copybits+0x1c>
fffda8f4:	1a8b      	subs	r3, r1, r2
fffda8f6:	3b15      	subs	r3, #21
fffda8f8:	f023 0303 	bic.w	r3, r3, #3
fffda8fc:	3304      	adds	r3, #4
fffda8fe:	4418      	add	r0, r3
fffda900:	4284      	cmp	r4, r0
fffda902:	d904      	bls.n	fffda90e <__copybits+0x42>
fffda904:	2300      	movs	r3, #0
fffda906:	f840 3b04 	str.w	r3, [r0], #4
fffda90a:	4284      	cmp	r4, r0
fffda90c:	d8fb      	bhi.n	fffda906 <__copybits+0x3a>
fffda90e:	bc70      	pop	{r4, r5, r6}
fffda910:	4770      	bx	lr
fffda912:	bf00      	nop

fffda914 <__any_on>:
fffda914:	6903      	ldr	r3, [r0, #16]
fffda916:	f100 0214 	add.w	r2, r0, #20
fffda91a:	b410      	push	{r4}
fffda91c:	114c      	asrs	r4, r1, #5
fffda91e:	42a3      	cmp	r3, r4
fffda920:	bfb8      	it	lt
fffda922:	eb02 0383 	addlt.w	r3, r2, r3, lsl #2
fffda926:	db02      	blt.n	fffda92e <__any_on+0x1a>
fffda928:	eb02 0384 	add.w	r3, r2, r4, lsl #2
fffda92c:	dc0d      	bgt.n	fffda94a <__any_on+0x36>
fffda92e:	429a      	cmp	r2, r3
fffda930:	d219      	bcs.n	fffda966 <__any_on+0x52>
fffda932:	f853 0c04 	ldr.w	r0, [r3, #-4]
fffda936:	3b04      	subs	r3, #4
fffda938:	b118      	cbz	r0, fffda942 <__any_on+0x2e>
fffda93a:	e011      	b.n	fffda960 <__any_on+0x4c>
fffda93c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
fffda940:	b971      	cbnz	r1, fffda960 <__any_on+0x4c>
fffda942:	429a      	cmp	r2, r3
fffda944:	d3fa      	bcc.n	fffda93c <__any_on+0x28>
fffda946:	bc10      	pop	{r4}
fffda948:	4770      	bx	lr
fffda94a:	f011 011f 	ands.w	r1, r1, #31
fffda94e:	d0ee      	beq.n	fffda92e <__any_on+0x1a>
fffda950:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
fffda954:	fa24 f001 	lsr.w	r0, r4, r1
fffda958:	fa00 f101 	lsl.w	r1, r0, r1
fffda95c:	428c      	cmp	r4, r1
fffda95e:	d0e6      	beq.n	fffda92e <__any_on+0x1a>
fffda960:	2001      	movs	r0, #1
fffda962:	bc10      	pop	{r4}
fffda964:	4770      	bx	lr
fffda966:	2000      	movs	r0, #0
fffda968:	e7ed      	b.n	fffda946 <__any_on+0x32>
fffda96a:	bf00      	nop

fffda96c <strncmp>:
fffda96c:	2a00      	cmp	r2, #0
fffda96e:	d042      	beq.n	fffda9f6 <strncmp+0x8a>
fffda970:	ea40 0301 	orr.w	r3, r0, r1
fffda974:	f013 0303 	ands.w	r3, r3, #3
fffda978:	b4f0      	push	{r4, r5, r6, r7}
fffda97a:	d125      	bne.n	fffda9c8 <strncmp+0x5c>
fffda97c:	2a03      	cmp	r2, #3
fffda97e:	d923      	bls.n	fffda9c8 <strncmp+0x5c>
fffda980:	6804      	ldr	r4, [r0, #0]
fffda982:	680d      	ldr	r5, [r1, #0]
fffda984:	42ac      	cmp	r4, r5
fffda986:	d11f      	bne.n	fffda9c8 <strncmp+0x5c>
fffda988:	3a04      	subs	r2, #4
fffda98a:	d031      	beq.n	fffda9f0 <strncmp+0x84>
fffda98c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
fffda990:	ea25 0404 	bic.w	r4, r5, r4
fffda994:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
fffda998:	d12a      	bne.n	fffda9f0 <strncmp+0x84>
fffda99a:	1d07      	adds	r7, r0, #4
fffda99c:	1d0d      	adds	r5, r1, #4
fffda99e:	e00d      	b.n	fffda9bc <strncmp+0x50>
fffda9a0:	f857 3b04 	ldr.w	r3, [r7], #4
fffda9a4:	680e      	ldr	r6, [r1, #0]
fffda9a6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
fffda9aa:	42b3      	cmp	r3, r6
fffda9ac:	ea24 0403 	bic.w	r4, r4, r3
fffda9b0:	d10a      	bne.n	fffda9c8 <strncmp+0x5c>
fffda9b2:	3a04      	subs	r2, #4
fffda9b4:	d01c      	beq.n	fffda9f0 <strncmp+0x84>
fffda9b6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
fffda9ba:	d119      	bne.n	fffda9f0 <strncmp+0x84>
fffda9bc:	2a03      	cmp	r2, #3
fffda9be:	4629      	mov	r1, r5
fffda9c0:	4638      	mov	r0, r7
fffda9c2:	f105 0504 	add.w	r5, r5, #4
fffda9c6:	d8eb      	bhi.n	fffda9a0 <strncmp+0x34>
fffda9c8:	7804      	ldrb	r4, [r0, #0]
fffda9ca:	3a01      	subs	r2, #1
fffda9cc:	780b      	ldrb	r3, [r1, #0]
fffda9ce:	42a3      	cmp	r3, r4
fffda9d0:	d113      	bne.n	fffda9fa <strncmp+0x8e>
fffda9d2:	2a00      	cmp	r2, #0
fffda9d4:	bf18      	it	ne
fffda9d6:	2b00      	cmpne	r3, #0
fffda9d8:	d00a      	beq.n	fffda9f0 <strncmp+0x84>
fffda9da:	f810 4f01 	ldrb.w	r4, [r0, #1]!
fffda9de:	3a01      	subs	r2, #1
fffda9e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
fffda9e4:	429c      	cmp	r4, r3
fffda9e6:	d108      	bne.n	fffda9fa <strncmp+0x8e>
fffda9e8:	2a00      	cmp	r2, #0
fffda9ea:	bf18      	it	ne
fffda9ec:	2c00      	cmpne	r4, #0
fffda9ee:	d1f4      	bne.n	fffda9da <strncmp+0x6e>
fffda9f0:	2000      	movs	r0, #0
fffda9f2:	bcf0      	pop	{r4, r5, r6, r7}
fffda9f4:	4770      	bx	lr
fffda9f6:	4610      	mov	r0, r2
fffda9f8:	4770      	bx	lr
fffda9fa:	1ae0      	subs	r0, r4, r3
fffda9fc:	bcf0      	pop	{r4, r5, r6, r7}
fffda9fe:	4770      	bx	lr

fffdaa00 <_calloc_r>:
fffdaa00:	b510      	push	{r4, lr}
fffdaa02:	fb02 f101 	mul.w	r1, r2, r1
fffdaa06:	f7fc fc3b 	bl	fffd7280 <_malloc_r>
fffdaa0a:	4604      	mov	r4, r0
fffdaa0c:	b308      	cbz	r0, fffdaa52 <_calloc_r+0x52>
fffdaa0e:	f850 2c04 	ldr.w	r2, [r0, #-4]
fffdaa12:	f022 0203 	bic.w	r2, r2, #3
fffdaa16:	3a04      	subs	r2, #4
fffdaa18:	2a24      	cmp	r2, #36	; 0x24
fffdaa1a:	d81c      	bhi.n	fffdaa56 <_calloc_r+0x56>
fffdaa1c:	2a13      	cmp	r2, #19
fffdaa1e:	bf98      	it	ls
fffdaa20:	4602      	movls	r2, r0
fffdaa22:	d912      	bls.n	fffdaa4a <_calloc_r+0x4a>
fffdaa24:	2a1b      	cmp	r2, #27
fffdaa26:	f04f 0300 	mov.w	r3, #0
fffdaa2a:	bf98      	it	ls
fffdaa2c:	f100 0208 	addls.w	r2, r0, #8
fffdaa30:	e9c0 3300 	strd	r3, r3, [r0]
fffdaa34:	d909      	bls.n	fffdaa4a <_calloc_r+0x4a>
fffdaa36:	2a24      	cmp	r2, #36	; 0x24
fffdaa38:	e9c0 3302 	strd	r3, r3, [r0, #8]
fffdaa3c:	bf11      	iteee	ne
fffdaa3e:	f100 0210 	addne.w	r2, r0, #16
fffdaa42:	f100 0218 	addeq.w	r2, r0, #24
fffdaa46:	6103      	streq	r3, [r0, #16]
fffdaa48:	6143      	streq	r3, [r0, #20]
fffdaa4a:	2300      	movs	r3, #0
fffdaa4c:	e9c2 3300 	strd	r3, r3, [r2]
fffdaa50:	6093      	str	r3, [r2, #8]
fffdaa52:	4620      	mov	r0, r4
fffdaa54:	bd10      	pop	{r4, pc}
fffdaa56:	2100      	movs	r1, #0
fffdaa58:	f7fb f80c 	bl	fffd5a74 <memset>
fffdaa5c:	4620      	mov	r0, r4
fffdaa5e:	bd10      	pop	{r4, pc}

fffdaa60 <__aeabi_drsub>:
fffdaa60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
fffdaa64:	e002      	b.n	fffdaa6c <__adddf3>
fffdaa66:	bf00      	nop

fffdaa68 <__aeabi_dsub>:
fffdaa68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

fffdaa6c <__adddf3>:
fffdaa6c:	b530      	push	{r4, r5, lr}
fffdaa6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
fffdaa72:	ea4f 0543 	mov.w	r5, r3, lsl #1
fffdaa76:	ea94 0f05 	teq	r4, r5
fffdaa7a:	bf08      	it	eq
fffdaa7c:	ea90 0f02 	teqeq	r0, r2
fffdaa80:	bf1f      	itttt	ne
fffdaa82:	ea54 0c00 	orrsne.w	r12, r4, r0
fffdaa86:	ea55 0c02 	orrsne.w	r12, r5, r2
fffdaa8a:	ea7f 5c64 	mvnsne.w	r12, r4, asr #21
fffdaa8e:	ea7f 5c65 	mvnsne.w	r12, r5, asr #21
fffdaa92:	f000 80e2 	beq.w	fffdac5a <__adddf3+0x1ee>
fffdaa96:	ea4f 5454 	mov.w	r4, r4, lsr #21
fffdaa9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
fffdaa9e:	bfb8      	it	lt
fffdaaa0:	426d      	neglt	r5, r5
fffdaaa2:	dd0c      	ble.n	fffdaabe <__adddf3+0x52>
fffdaaa4:	442c      	add	r4, r5
fffdaaa6:	ea80 0202 	eor.w	r2, r0, r2
fffdaaaa:	ea81 0303 	eor.w	r3, r1, r3
fffdaaae:	ea82 0000 	eor.w	r0, r2, r0
fffdaab2:	ea83 0101 	eor.w	r1, r3, r1
fffdaab6:	ea80 0202 	eor.w	r2, r0, r2
fffdaaba:	ea81 0303 	eor.w	r3, r1, r3
fffdaabe:	2d36      	cmp	r5, #54	; 0x36
fffdaac0:	bf88      	it	hi
fffdaac2:	bd30      	pophi	{r4, r5, pc}
fffdaac4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
fffdaac8:	ea4f 3101 	mov.w	r1, r1, lsl #12
fffdaacc:	f44f 1c80 	mov.w	r12, #1048576	; 0x100000
fffdaad0:	ea4c 3111 	orr.w	r1, r12, r1, lsr #12
fffdaad4:	d002      	beq.n	fffdaadc <__adddf3+0x70>
fffdaad6:	4240      	negs	r0, r0
fffdaad8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
fffdaadc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
fffdaae0:	ea4f 3303 	mov.w	r3, r3, lsl #12
fffdaae4:	ea4c 3313 	orr.w	r3, r12, r3, lsr #12
fffdaae8:	d002      	beq.n	fffdaaf0 <__adddf3+0x84>
fffdaaea:	4252      	negs	r2, r2
fffdaaec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
fffdaaf0:	ea94 0f05 	teq	r4, r5
fffdaaf4:	f000 80a7 	beq.w	fffdac46 <__adddf3+0x1da>
fffdaaf8:	f1a4 0401 	sub.w	r4, r4, #1
fffdaafc:	f1d5 0e20 	rsbs	lr, r5, #32
fffdab00:	db0d      	blt.n	fffdab1e <__adddf3+0xb2>
fffdab02:	fa02 fc0e 	lsl.w	r12, r2, lr
fffdab06:	fa22 f205 	lsr.w	r2, r2, r5
fffdab0a:	1880      	adds	r0, r0, r2
fffdab0c:	f141 0100 	adc.w	r1, r1, #0
fffdab10:	fa03 f20e 	lsl.w	r2, r3, lr
fffdab14:	1880      	adds	r0, r0, r2
fffdab16:	fa43 f305 	asr.w	r3, r3, r5
fffdab1a:	4159      	adcs	r1, r3
fffdab1c:	e00e      	b.n	fffdab3c <__adddf3+0xd0>
fffdab1e:	f1a5 0520 	sub.w	r5, r5, #32
fffdab22:	f10e 0e20 	add.w	lr, lr, #32
fffdab26:	2a01      	cmp	r2, #1
fffdab28:	fa03 fc0e 	lsl.w	r12, r3, lr
fffdab2c:	bf28      	it	cs
fffdab2e:	f04c 0c02 	orrcs.w	r12, r12, #2
fffdab32:	fa43 f305 	asr.w	r3, r3, r5
fffdab36:	18c0      	adds	r0, r0, r3
fffdab38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
fffdab3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
fffdab40:	d507      	bpl.n	fffdab52 <__adddf3+0xe6>
fffdab42:	f04f 0e00 	mov.w	lr, #0
fffdab46:	f1dc 0c00 	rsbs	r12, r12, #0
fffdab4a:	eb7e 0000 	sbcs.w	r0, lr, r0
fffdab4e:	eb6e 0101 	sbc.w	r1, lr, r1
fffdab52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
fffdab56:	d31b      	bcc.n	fffdab90 <__adddf3+0x124>
fffdab58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
fffdab5c:	d30c      	bcc.n	fffdab78 <__adddf3+0x10c>
fffdab5e:	0849      	lsrs	r1, r1, #1
fffdab60:	ea5f 0030 	movs.w	r0, r0, rrx
fffdab64:	ea4f 0c3c 	mov.w	r12, r12, rrx
fffdab68:	f104 0401 	add.w	r4, r4, #1
fffdab6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
fffdab70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
fffdab74:	f080 809a 	bcs.w	fffdacac <__adddf3+0x240>
fffdab78:	f1bc 4f00 	cmp.w	r12, #2147483648	; 0x80000000
fffdab7c:	bf08      	it	eq
fffdab7e:	ea5f 0c50 	movseq.w	r12, r0, lsr #1
fffdab82:	f150 0000 	adcs.w	r0, r0, #0
fffdab86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
fffdab8a:	ea41 0105 	orr.w	r1, r1, r5
fffdab8e:	bd30      	pop	{r4, r5, pc}
fffdab90:	ea5f 0c4c 	movs.w	r12, r12, lsl #1
fffdab94:	4140      	adcs	r0, r0
fffdab96:	eb41 0101 	adc.w	r1, r1, r1
fffdab9a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
fffdab9e:	f1a4 0401 	sub.w	r4, r4, #1
fffdaba2:	d1e9      	bne.n	fffdab78 <__adddf3+0x10c>
fffdaba4:	f091 0f00 	teq	r1, #0
fffdaba8:	bf04      	itt	eq
fffdabaa:	4601      	moveq	r1, r0
fffdabac:	2000      	moveq	r0, #0
fffdabae:	fab1 f381 	clz	r3, r1
fffdabb2:	bf08      	it	eq
fffdabb4:	3320      	addeq	r3, #32
fffdabb6:	f1a3 030b 	sub.w	r3, r3, #11
fffdabba:	f1b3 0220 	subs.w	r2, r3, #32
fffdabbe:	da0c      	bge.n	fffdabda <__adddf3+0x16e>
fffdabc0:	320c      	adds	r2, #12
fffdabc2:	dd08      	ble.n	fffdabd6 <__adddf3+0x16a>
fffdabc4:	f102 0c14 	add.w	r12, r2, #20
fffdabc8:	f1c2 020c 	rsb	r2, r2, #12
fffdabcc:	fa01 f00c 	lsl.w	r0, r1, r12
fffdabd0:	fa21 f102 	lsr.w	r1, r1, r2
fffdabd4:	e00c      	b.n	fffdabf0 <__adddf3+0x184>
fffdabd6:	f102 0214 	add.w	r2, r2, #20
fffdabda:	bfd8      	it	le
fffdabdc:	f1c2 0c20 	rsble	r12, r2, #32
fffdabe0:	fa01 f102 	lsl.w	r1, r1, r2
fffdabe4:	fa20 fc0c 	lsr.w	r12, r0, r12
fffdabe8:	bfdc      	itt	le
fffdabea:	ea41 010c 	orrle.w	r1, r1, r12
fffdabee:	4090      	lslle	r0, r2
fffdabf0:	1ae4      	subs	r4, r4, r3
fffdabf2:	bfa2      	ittt	ge
fffdabf4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
fffdabf8:	4329      	orrge	r1, r5
fffdabfa:	bd30      	popge	{r4, r5, pc}
fffdabfc:	ea6f 0404 	mvn.w	r4, r4
fffdac00:	3c1f      	subs	r4, #31
fffdac02:	da1c      	bge.n	fffdac3e <__adddf3+0x1d2>
fffdac04:	340c      	adds	r4, #12
fffdac06:	dc0e      	bgt.n	fffdac26 <__adddf3+0x1ba>
fffdac08:	f104 0414 	add.w	r4, r4, #20
fffdac0c:	f1c4 0220 	rsb	r2, r4, #32
fffdac10:	fa20 f004 	lsr.w	r0, r0, r4
fffdac14:	fa01 f302 	lsl.w	r3, r1, r2
fffdac18:	ea40 0003 	orr.w	r0, r0, r3
fffdac1c:	fa21 f304 	lsr.w	r3, r1, r4
fffdac20:	ea45 0103 	orr.w	r1, r5, r3
fffdac24:	bd30      	pop	{r4, r5, pc}
fffdac26:	f1c4 040c 	rsb	r4, r4, #12
fffdac2a:	f1c4 0220 	rsb	r2, r4, #32
fffdac2e:	fa20 f002 	lsr.w	r0, r0, r2
fffdac32:	fa01 f304 	lsl.w	r3, r1, r4
fffdac36:	ea40 0003 	orr.w	r0, r0, r3
fffdac3a:	4629      	mov	r1, r5
fffdac3c:	bd30      	pop	{r4, r5, pc}
fffdac3e:	fa21 f004 	lsr.w	r0, r1, r4
fffdac42:	4629      	mov	r1, r5
fffdac44:	bd30      	pop	{r4, r5, pc}
fffdac46:	f094 0f00 	teq	r4, #0
fffdac4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
fffdac4e:	bf06      	itte	eq
fffdac50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
fffdac54:	3401      	addeq	r4, #1
fffdac56:	3d01      	subne	r5, #1
fffdac58:	e74e      	b.n	fffdaaf8 <__adddf3+0x8c>
fffdac5a:	ea7f 5c64 	mvns.w	r12, r4, asr #21
fffdac5e:	bf18      	it	ne
fffdac60:	ea7f 5c65 	mvnsne.w	r12, r5, asr #21
fffdac64:	d029      	beq.n	fffdacba <__adddf3+0x24e>
fffdac66:	ea94 0f05 	teq	r4, r5
fffdac6a:	bf08      	it	eq
fffdac6c:	ea90 0f02 	teqeq	r0, r2
fffdac70:	d005      	beq.n	fffdac7e <__adddf3+0x212>
fffdac72:	ea54 0c00 	orrs.w	r12, r4, r0
fffdac76:	bf04      	itt	eq
fffdac78:	4619      	moveq	r1, r3
fffdac7a:	4610      	moveq	r0, r2
fffdac7c:	bd30      	pop	{r4, r5, pc}
fffdac7e:	ea91 0f03 	teq	r1, r3
fffdac82:	bf1e      	ittt	ne
fffdac84:	2100      	movne	r1, #0
fffdac86:	2000      	movne	r0, #0
fffdac88:	bd30      	popne	{r4, r5, pc}
fffdac8a:	ea5f 5c54 	movs.w	r12, r4, lsr #21
fffdac8e:	d105      	bne.n	fffdac9c <__adddf3+0x230>
fffdac90:	0040      	lsls	r0, r0, #1
fffdac92:	4149      	adcs	r1, r1
fffdac94:	bf28      	it	cs
fffdac96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
fffdac9a:	bd30      	pop	{r4, r5, pc}
fffdac9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
fffdaca0:	bf3c      	itt	cc
fffdaca2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
fffdaca6:	bd30      	popcc	{r4, r5, pc}
fffdaca8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
fffdacac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
fffdacb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
fffdacb4:	f04f 0000 	mov.w	r0, #0
fffdacb8:	bd30      	pop	{r4, r5, pc}
fffdacba:	ea7f 5c64 	mvns.w	r12, r4, asr #21
fffdacbe:	bf1a      	itte	ne
fffdacc0:	4619      	movne	r1, r3
fffdacc2:	4610      	movne	r0, r2
fffdacc4:	ea7f 5c65 	mvnseq.w	r12, r5, asr #21
fffdacc8:	bf1c      	itt	ne
fffdacca:	460b      	movne	r3, r1
fffdaccc:	4602      	movne	r2, r0
fffdacce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
fffdacd2:	bf06      	itte	eq
fffdacd4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
fffdacd8:	ea91 0f03 	teqeq	r1, r3
fffdacdc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
fffdace0:	bd30      	pop	{r4, r5, pc}
fffdace2:	bf00      	nop

fffdace4 <__aeabi_ui2d>:
fffdace4:	f090 0f00 	teq	r0, #0
fffdace8:	bf04      	itt	eq
fffdacea:	2100      	moveq	r1, #0
fffdacec:	4770      	bxeq	lr
fffdacee:	b530      	push	{r4, r5, lr}
fffdacf0:	f44f 6480 	mov.w	r4, #1024	; 0x400
fffdacf4:	f104 0432 	add.w	r4, r4, #50	; 0x32
fffdacf8:	f04f 0500 	mov.w	r5, #0
fffdacfc:	f04f 0100 	mov.w	r1, #0
fffdad00:	e750      	b.n	fffdaba4 <__adddf3+0x138>
fffdad02:	bf00      	nop

fffdad04 <__aeabi_i2d>:
fffdad04:	f090 0f00 	teq	r0, #0
fffdad08:	bf04      	itt	eq
fffdad0a:	2100      	moveq	r1, #0
fffdad0c:	4770      	bxeq	lr
fffdad0e:	b530      	push	{r4, r5, lr}
fffdad10:	f44f 6480 	mov.w	r4, #1024	; 0x400
fffdad14:	f104 0432 	add.w	r4, r4, #50	; 0x32
fffdad18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
fffdad1c:	bf48      	it	mi
fffdad1e:	4240      	negmi	r0, r0
fffdad20:	f04f 0100 	mov.w	r1, #0
fffdad24:	e73e      	b.n	fffdaba4 <__adddf3+0x138>
fffdad26:	bf00      	nop

fffdad28 <__aeabi_f2d>:
fffdad28:	0042      	lsls	r2, r0, #1
fffdad2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
fffdad2e:	ea4f 0131 	mov.w	r1, r1, rrx
fffdad32:	ea4f 7002 	mov.w	r0, r2, lsl #28
fffdad36:	bf1f      	itttt	ne
fffdad38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
fffdad3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
fffdad40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
fffdad44:	4770      	bxne	lr
fffdad46:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
fffdad4a:	bf08      	it	eq
fffdad4c:	4770      	bxeq	lr
fffdad4e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
fffdad52:	bf04      	itt	eq
fffdad54:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
fffdad58:	4770      	bxeq	lr
fffdad5a:	b530      	push	{r4, r5, lr}
fffdad5c:	f44f 7460 	mov.w	r4, #896	; 0x380
fffdad60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
fffdad64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
fffdad68:	e71c      	b.n	fffdaba4 <__adddf3+0x138>
fffdad6a:	bf00      	nop

fffdad6c <__aeabi_ul2d>:
fffdad6c:	ea50 0201 	orrs.w	r2, r0, r1
fffdad70:	bf08      	it	eq
fffdad72:	4770      	bxeq	lr
fffdad74:	b530      	push	{r4, r5, lr}
fffdad76:	f04f 0500 	mov.w	r5, #0
fffdad7a:	e00a      	b.n	fffdad92 <__aeabi_l2d+0x16>

fffdad7c <__aeabi_l2d>:
fffdad7c:	ea50 0201 	orrs.w	r2, r0, r1
fffdad80:	bf08      	it	eq
fffdad82:	4770      	bxeq	lr
fffdad84:	b530      	push	{r4, r5, lr}
fffdad86:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
fffdad8a:	d502      	bpl.n	fffdad92 <__aeabi_l2d+0x16>
fffdad8c:	4240      	negs	r0, r0
fffdad8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
fffdad92:	f44f 6480 	mov.w	r4, #1024	; 0x400
fffdad96:	f104 0432 	add.w	r4, r4, #50	; 0x32
fffdad9a:	ea5f 5c91 	movs.w	r12, r1, lsr #22
fffdad9e:	f43f aed8 	beq.w	fffdab52 <__adddf3+0xe6>
fffdada2:	f04f 0203 	mov.w	r2, #3
fffdada6:	ea5f 0cdc 	movs.w	r12, r12, lsr #3
fffdadaa:	bf18      	it	ne
fffdadac:	3203      	addne	r2, #3
fffdadae:	ea5f 0cdc 	movs.w	r12, r12, lsr #3
fffdadb2:	bf18      	it	ne
fffdadb4:	3203      	addne	r2, #3
fffdadb6:	eb02 02dc 	add.w	r2, r2, r12, lsr #3
fffdadba:	f1c2 0320 	rsb	r3, r2, #32
fffdadbe:	fa00 fc03 	lsl.w	r12, r0, r3
fffdadc2:	fa20 f002 	lsr.w	r0, r0, r2
fffdadc6:	fa01 fe03 	lsl.w	lr, r1, r3
fffdadca:	ea40 000e 	orr.w	r0, r0, lr
fffdadce:	fa21 f102 	lsr.w	r1, r1, r2
fffdadd2:	4414      	add	r4, r2
fffdadd4:	e6bd      	b.n	fffdab52 <__adddf3+0xe6>
fffdadd6:	bf00      	nop

fffdadd8 <__aeabi_dmul>:
fffdadd8:	b570      	push	{r4, r5, r6, lr}
fffdadda:	f04f 0cff 	mov.w	r12, #255	; 0xff
fffdadde:	f44c 6ce0 	orr.w	r12, r12, #1792	; 0x700
fffdade2:	ea1c 5411 	ands.w	r4, r12, r1, lsr #20
fffdade6:	bf1d      	ittte	ne
fffdade8:	ea1c 5513 	andsne.w	r5, r12, r3, lsr #20
fffdadec:	ea94 0f0c 	teqne	r4, r12
fffdadf0:	ea95 0f0c 	teqne	r5, r12
fffdadf4:	f000 f8de 	bleq	fffdafb4 <__aeabi_dmul+0x1dc>
fffdadf8:	442c      	add	r4, r5
fffdadfa:	ea81 0603 	eor.w	r6, r1, r3
fffdadfe:	ea21 514c 	bic.w	r1, r1, r12, lsl #21
fffdae02:	ea23 534c 	bic.w	r3, r3, r12, lsl #21
fffdae06:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
fffdae0a:	bf18      	it	ne
fffdae0c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
fffdae10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
fffdae14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
fffdae18:	d038      	beq.n	fffdae8c <__aeabi_dmul+0xb4>
fffdae1a:	fba0 ce02 	umull	r12, lr, r0, r2
fffdae1e:	f04f 0500 	mov.w	r5, #0
fffdae22:	fbe1 e502 	umlal	lr, r5, r1, r2
fffdae26:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
fffdae2a:	fbe0 e503 	umlal	lr, r5, r0, r3
fffdae2e:	f04f 0600 	mov.w	r6, #0
fffdae32:	fbe1 5603 	umlal	r5, r6, r1, r3
fffdae36:	f09c 0f00 	teq	r12, #0
fffdae3a:	bf18      	it	ne
fffdae3c:	f04e 0e01 	orrne.w	lr, lr, #1
fffdae40:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
fffdae44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
fffdae48:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
fffdae4c:	d204      	bcs.n	fffdae58 <__aeabi_dmul+0x80>
fffdae4e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
fffdae52:	416d      	adcs	r5, r5
fffdae54:	eb46 0606 	adc.w	r6, r6, r6
fffdae58:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
fffdae5c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
fffdae60:	ea4f 20c5 	mov.w	r0, r5, lsl #11
fffdae64:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
fffdae68:	ea4f 2ece 	mov.w	lr, lr, lsl #11
fffdae6c:	f1b4 0cfd 	subs.w	r12, r4, #253	; 0xfd
fffdae70:	bf88      	it	hi
fffdae72:	f5bc 6fe0 	cmphi.w	r12, #1792	; 0x700
fffdae76:	d81e      	bhi.n	fffdaeb6 <__aeabi_dmul+0xde>
fffdae78:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
fffdae7c:	bf08      	it	eq
fffdae7e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
fffdae82:	f150 0000 	adcs.w	r0, r0, #0
fffdae86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
fffdae8a:	bd70      	pop	{r4, r5, r6, pc}
fffdae8c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
fffdae90:	ea46 0101 	orr.w	r1, r6, r1
fffdae94:	ea40 0002 	orr.w	r0, r0, r2
fffdae98:	ea81 0103 	eor.w	r1, r1, r3
fffdae9c:	ebb4 045c 	subs.w	r4, r4, r12, lsr #1
fffdaea0:	bfc2      	ittt	gt
fffdaea2:	ebd4 050c 	rsbsgt	r5, r4, r12
fffdaea6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
fffdaeaa:	bd70      	popgt	{r4, r5, r6, pc}
fffdaeac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
fffdaeb0:	f04f 0e00 	mov.w	lr, #0
fffdaeb4:	3c01      	subs	r4, #1
fffdaeb6:	f300 80ab 	bgt.w	fffdb010 <__aeabi_dmul+0x238>
fffdaeba:	f114 0f36 	cmn.w	r4, #54	; 0x36
fffdaebe:	bfde      	ittt	le
fffdaec0:	2000      	movle	r0, #0
fffdaec2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
fffdaec6:	bd70      	pople	{r4, r5, r6, pc}
fffdaec8:	f1c4 0400 	rsb	r4, r4, #0
fffdaecc:	3c20      	subs	r4, #32
fffdaece:	da35      	bge.n	fffdaf3c <__aeabi_dmul+0x164>
fffdaed0:	340c      	adds	r4, #12
fffdaed2:	dc1b      	bgt.n	fffdaf0c <__aeabi_dmul+0x134>
fffdaed4:	f104 0414 	add.w	r4, r4, #20
fffdaed8:	f1c4 0520 	rsb	r5, r4, #32
fffdaedc:	fa00 f305 	lsl.w	r3, r0, r5
fffdaee0:	fa20 f004 	lsr.w	r0, r0, r4
fffdaee4:	fa01 f205 	lsl.w	r2, r1, r5
fffdaee8:	ea40 0002 	orr.w	r0, r0, r2
fffdaeec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
fffdaef0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
fffdaef4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
fffdaef8:	fa21 f604 	lsr.w	r6, r1, r4
fffdaefc:	eb42 0106 	adc.w	r1, r2, r6
fffdaf00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
fffdaf04:	bf08      	it	eq
fffdaf06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
fffdaf0a:	bd70      	pop	{r4, r5, r6, pc}
fffdaf0c:	f1c4 040c 	rsb	r4, r4, #12
fffdaf10:	f1c4 0520 	rsb	r5, r4, #32
fffdaf14:	fa00 f304 	lsl.w	r3, r0, r4
fffdaf18:	fa20 f005 	lsr.w	r0, r0, r5
fffdaf1c:	fa01 f204 	lsl.w	r2, r1, r4
fffdaf20:	ea40 0002 	orr.w	r0, r0, r2
fffdaf24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
fffdaf28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
fffdaf2c:	f141 0100 	adc.w	r1, r1, #0
fffdaf30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
fffdaf34:	bf08      	it	eq
fffdaf36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
fffdaf3a:	bd70      	pop	{r4, r5, r6, pc}
fffdaf3c:	f1c4 0520 	rsb	r5, r4, #32
fffdaf40:	fa00 f205 	lsl.w	r2, r0, r5
fffdaf44:	ea4e 0e02 	orr.w	lr, lr, r2
fffdaf48:	fa20 f304 	lsr.w	r3, r0, r4
fffdaf4c:	fa01 f205 	lsl.w	r2, r1, r5
fffdaf50:	ea43 0302 	orr.w	r3, r3, r2
fffdaf54:	fa21 f004 	lsr.w	r0, r1, r4
fffdaf58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
fffdaf5c:	fa21 f204 	lsr.w	r2, r1, r4
fffdaf60:	ea20 0002 	bic.w	r0, r0, r2
fffdaf64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
fffdaf68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
fffdaf6c:	bf08      	it	eq
fffdaf6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
fffdaf72:	bd70      	pop	{r4, r5, r6, pc}
fffdaf74:	f094 0f00 	teq	r4, #0
fffdaf78:	d10f      	bne.n	fffdaf9a <__aeabi_dmul+0x1c2>
fffdaf7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
fffdaf7e:	0040      	lsls	r0, r0, #1
fffdaf80:	eb41 0101 	adc.w	r1, r1, r1
fffdaf84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
fffdaf88:	bf08      	it	eq
fffdaf8a:	3c01      	subeq	r4, #1
fffdaf8c:	d0f7      	beq.n	fffdaf7e <__aeabi_dmul+0x1a6>
fffdaf8e:	ea41 0106 	orr.w	r1, r1, r6
fffdaf92:	f095 0f00 	teq	r5, #0
fffdaf96:	bf18      	it	ne
fffdaf98:	4770      	bxne	lr
fffdaf9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
fffdaf9e:	0052      	lsls	r2, r2, #1
fffdafa0:	eb43 0303 	adc.w	r3, r3, r3
fffdafa4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
fffdafa8:	bf08      	it	eq
fffdafaa:	3d01      	subeq	r5, #1
fffdafac:	d0f7      	beq.n	fffdaf9e <__aeabi_dmul+0x1c6>
fffdafae:	ea43 0306 	orr.w	r3, r3, r6
fffdafb2:	4770      	bx	lr
fffdafb4:	ea94 0f0c 	teq	r4, r12
fffdafb8:	ea0c 5513 	and.w	r5, r12, r3, lsr #20
fffdafbc:	bf18      	it	ne
fffdafbe:	ea95 0f0c 	teqne	r5, r12
fffdafc2:	d00c      	beq.n	fffdafde <__aeabi_dmul+0x206>
fffdafc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
fffdafc8:	bf18      	it	ne
fffdafca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
fffdafce:	d1d1      	bne.n	fffdaf74 <__aeabi_dmul+0x19c>
fffdafd0:	ea81 0103 	eor.w	r1, r1, r3
fffdafd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
fffdafd8:	f04f 0000 	mov.w	r0, #0
fffdafdc:	bd70      	pop	{r4, r5, r6, pc}
fffdafde:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
fffdafe2:	bf06      	itte	eq
fffdafe4:	4610      	moveq	r0, r2
fffdafe6:	4619      	moveq	r1, r3
fffdafe8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
fffdafec:	d019      	beq.n	fffdb022 <__aeabi_dmul+0x24a>
fffdafee:	ea94 0f0c 	teq	r4, r12
fffdaff2:	d102      	bne.n	fffdaffa <__aeabi_dmul+0x222>
fffdaff4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
fffdaff8:	d113      	bne.n	fffdb022 <__aeabi_dmul+0x24a>
fffdaffa:	ea95 0f0c 	teq	r5, r12
fffdaffe:	d105      	bne.n	fffdb00c <__aeabi_dmul+0x234>
fffdb000:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
fffdb004:	bf1c      	itt	ne
fffdb006:	4610      	movne	r0, r2
fffdb008:	4619      	movne	r1, r3
fffdb00a:	d10a      	bne.n	fffdb022 <__aeabi_dmul+0x24a>
fffdb00c:	ea81 0103 	eor.w	r1, r1, r3
fffdb010:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
fffdb014:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
fffdb018:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
fffdb01c:	f04f 0000 	mov.w	r0, #0
fffdb020:	bd70      	pop	{r4, r5, r6, pc}
fffdb022:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
fffdb026:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
fffdb02a:	bd70      	pop	{r4, r5, r6, pc}

fffdb02c <__aeabi_ddiv>:
fffdb02c:	b570      	push	{r4, r5, r6, lr}
fffdb02e:	f04f 0cff 	mov.w	r12, #255	; 0xff
fffdb032:	f44c 6ce0 	orr.w	r12, r12, #1792	; 0x700
fffdb036:	ea1c 5411 	ands.w	r4, r12, r1, lsr #20
fffdb03a:	bf1d      	ittte	ne
fffdb03c:	ea1c 5513 	andsne.w	r5, r12, r3, lsr #20
fffdb040:	ea94 0f0c 	teqne	r4, r12
fffdb044:	ea95 0f0c 	teqne	r5, r12
fffdb048:	f000 f8a7 	bleq	fffdb19a <__aeabi_ddiv+0x16e>
fffdb04c:	eba4 0405 	sub.w	r4, r4, r5
fffdb050:	ea81 0e03 	eor.w	lr, r1, r3
fffdb054:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
fffdb058:	ea4f 3101 	mov.w	r1, r1, lsl #12
fffdb05c:	f000 8088 	beq.w	fffdb170 <__aeabi_ddiv+0x144>
fffdb060:	ea4f 3303 	mov.w	r3, r3, lsl #12
fffdb064:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
fffdb068:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
fffdb06c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
fffdb070:	ea4f 2202 	mov.w	r2, r2, lsl #8
fffdb074:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
fffdb078:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
fffdb07c:	ea4f 2600 	mov.w	r6, r0, lsl #8
fffdb080:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
fffdb084:	429d      	cmp	r5, r3
fffdb086:	bf08      	it	eq
fffdb088:	4296      	cmpeq	r6, r2
fffdb08a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
fffdb08e:	f504 7440 	add.w	r4, r4, #768	; 0x300
fffdb092:	d202      	bcs.n	fffdb09a <__aeabi_ddiv+0x6e>
fffdb094:	085b      	lsrs	r3, r3, #1
fffdb096:	ea4f 0232 	mov.w	r2, r2, rrx
fffdb09a:	1ab6      	subs	r6, r6, r2
fffdb09c:	eb65 0503 	sbc.w	r5, r5, r3
fffdb0a0:	085b      	lsrs	r3, r3, #1
fffdb0a2:	ea4f 0232 	mov.w	r2, r2, rrx
fffdb0a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
fffdb0aa:	f44f 2c00 	mov.w	r12, #524288	; 0x80000
fffdb0ae:	ebb6 0e02 	subs.w	lr, r6, r2
fffdb0b2:	eb75 0e03 	sbcs.w	lr, r5, r3
fffdb0b6:	bf22      	ittt	cs
fffdb0b8:	1ab6      	subcs	r6, r6, r2
fffdb0ba:	4675      	movcs	r5, lr
fffdb0bc:	ea40 000c 	orrcs.w	r0, r0, r12
fffdb0c0:	085b      	lsrs	r3, r3, #1
fffdb0c2:	ea4f 0232 	mov.w	r2, r2, rrx
fffdb0c6:	ebb6 0e02 	subs.w	lr, r6, r2
fffdb0ca:	eb75 0e03 	sbcs.w	lr, r5, r3
fffdb0ce:	bf22      	ittt	cs
fffdb0d0:	1ab6      	subcs	r6, r6, r2
fffdb0d2:	4675      	movcs	r5, lr
fffdb0d4:	ea40 005c 	orrcs.w	r0, r0, r12, lsr #1
fffdb0d8:	085b      	lsrs	r3, r3, #1
fffdb0da:	ea4f 0232 	mov.w	r2, r2, rrx
fffdb0de:	ebb6 0e02 	subs.w	lr, r6, r2
fffdb0e2:	eb75 0e03 	sbcs.w	lr, r5, r3
fffdb0e6:	bf22      	ittt	cs
fffdb0e8:	1ab6      	subcs	r6, r6, r2
fffdb0ea:	4675      	movcs	r5, lr
fffdb0ec:	ea40 009c 	orrcs.w	r0, r0, r12, lsr #2
fffdb0f0:	085b      	lsrs	r3, r3, #1
fffdb0f2:	ea4f 0232 	mov.w	r2, r2, rrx
fffdb0f6:	ebb6 0e02 	subs.w	lr, r6, r2
fffdb0fa:	eb75 0e03 	sbcs.w	lr, r5, r3
fffdb0fe:	bf22      	ittt	cs
fffdb100:	1ab6      	subcs	r6, r6, r2
fffdb102:	4675      	movcs	r5, lr
fffdb104:	ea40 00dc 	orrcs.w	r0, r0, r12, lsr #3
fffdb108:	ea55 0e06 	orrs.w	lr, r5, r6
fffdb10c:	d018      	beq.n	fffdb140 <__aeabi_ddiv+0x114>
fffdb10e:	ea4f 1505 	mov.w	r5, r5, lsl #4
fffdb112:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
fffdb116:	ea4f 1606 	mov.w	r6, r6, lsl #4
fffdb11a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
fffdb11e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
fffdb122:	ea4f 02c2 	mov.w	r2, r2, lsl #3
fffdb126:	ea5f 1c1c 	movs.w	r12, r12, lsr #4
fffdb12a:	d1c0      	bne.n	fffdb0ae <__aeabi_ddiv+0x82>
fffdb12c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
fffdb130:	d10b      	bne.n	fffdb14a <__aeabi_ddiv+0x11e>
fffdb132:	ea41 0100 	orr.w	r1, r1, r0
fffdb136:	f04f 0000 	mov.w	r0, #0
fffdb13a:	f04f 4c00 	mov.w	r12, #2147483648	; 0x80000000
fffdb13e:	e7b6      	b.n	fffdb0ae <__aeabi_ddiv+0x82>
fffdb140:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
fffdb144:	bf04      	itt	eq
fffdb146:	4301      	orreq	r1, r0
fffdb148:	2000      	moveq	r0, #0
fffdb14a:	f1b4 0cfd 	subs.w	r12, r4, #253	; 0xfd
fffdb14e:	bf88      	it	hi
fffdb150:	f5bc 6fe0 	cmphi.w	r12, #1792	; 0x700
fffdb154:	f63f aeaf 	bhi.w	fffdaeb6 <__aeabi_dmul+0xde>
fffdb158:	ebb5 0c03 	subs.w	r12, r5, r3
fffdb15c:	bf04      	itt	eq
fffdb15e:	ebb6 0c02 	subseq.w	r12, r6, r2
fffdb162:	ea5f 0c50 	movseq.w	r12, r0, lsr #1
fffdb166:	f150 0000 	adcs.w	r0, r0, #0
fffdb16a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
fffdb16e:	bd70      	pop	{r4, r5, r6, pc}
fffdb170:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
fffdb174:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
fffdb178:	eb14 045c 	adds.w	r4, r4, r12, lsr #1
fffdb17c:	bfc2      	ittt	gt
fffdb17e:	ebd4 050c 	rsbsgt	r5, r4, r12
fffdb182:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
fffdb186:	bd70      	popgt	{r4, r5, r6, pc}
fffdb188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
fffdb18c:	f04f 0e00 	mov.w	lr, #0
fffdb190:	3c01      	subs	r4, #1
fffdb192:	e690      	b.n	fffdaeb6 <__aeabi_dmul+0xde>
fffdb194:	ea45 0e06 	orr.w	lr, r5, r6
fffdb198:	e68d      	b.n	fffdaeb6 <__aeabi_dmul+0xde>
fffdb19a:	ea0c 5513 	and.w	r5, r12, r3, lsr #20
fffdb19e:	ea94 0f0c 	teq	r4, r12
fffdb1a2:	bf08      	it	eq
fffdb1a4:	ea95 0f0c 	teqeq	r5, r12
fffdb1a8:	f43f af3b 	beq.w	fffdb022 <__aeabi_dmul+0x24a>
fffdb1ac:	ea94 0f0c 	teq	r4, r12
fffdb1b0:	d10a      	bne.n	fffdb1c8 <__aeabi_ddiv+0x19c>
fffdb1b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
fffdb1b6:	f47f af34 	bne.w	fffdb022 <__aeabi_dmul+0x24a>
fffdb1ba:	ea95 0f0c 	teq	r5, r12
fffdb1be:	f47f af25 	bne.w	fffdb00c <__aeabi_dmul+0x234>
fffdb1c2:	4610      	mov	r0, r2
fffdb1c4:	4619      	mov	r1, r3
fffdb1c6:	e72c      	b.n	fffdb022 <__aeabi_dmul+0x24a>
fffdb1c8:	ea95 0f0c 	teq	r5, r12
fffdb1cc:	d106      	bne.n	fffdb1dc <__aeabi_ddiv+0x1b0>
fffdb1ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
fffdb1d2:	f43f aefd 	beq.w	fffdafd0 <__aeabi_dmul+0x1f8>
fffdb1d6:	4610      	mov	r0, r2
fffdb1d8:	4619      	mov	r1, r3
fffdb1da:	e722      	b.n	fffdb022 <__aeabi_dmul+0x24a>
fffdb1dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
fffdb1e0:	bf18      	it	ne
fffdb1e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
fffdb1e6:	f47f aec5 	bne.w	fffdaf74 <__aeabi_dmul+0x19c>
fffdb1ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
fffdb1ee:	f47f af0d 	bne.w	fffdb00c <__aeabi_dmul+0x234>
fffdb1f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
fffdb1f6:	f47f aeeb 	bne.w	fffdafd0 <__aeabi_dmul+0x1f8>
fffdb1fa:	e712      	b.n	fffdb022 <__aeabi_dmul+0x24a>

fffdb1fc <__gedf2>:
fffdb1fc:	f04f 3cff 	mov.w	r12, #4294967295
fffdb200:	e006      	b.n	fffdb210 <__cmpdf2+0x4>
fffdb202:	bf00      	nop

fffdb204 <__ledf2>:
fffdb204:	f04f 0c01 	mov.w	r12, #1
fffdb208:	e002      	b.n	fffdb210 <__cmpdf2+0x4>
fffdb20a:	bf00      	nop

fffdb20c <__cmpdf2>:
fffdb20c:	f04f 0c01 	mov.w	r12, #1
fffdb210:	f84d cd04 	str.w	r12, [sp, #-4]!
fffdb214:	ea4f 0c41 	mov.w	r12, r1, lsl #1
fffdb218:	ea7f 5c6c 	mvns.w	r12, r12, asr #21
fffdb21c:	ea4f 0c43 	mov.w	r12, r3, lsl #1
fffdb220:	bf18      	it	ne
fffdb222:	ea7f 5c6c 	mvnsne.w	r12, r12, asr #21
fffdb226:	d01b      	beq.n	fffdb260 <__cmpdf2+0x54>
fffdb228:	b001      	add	sp, #4
fffdb22a:	ea50 0c41 	orrs.w	r12, r0, r1, lsl #1
fffdb22e:	bf0c      	ite	eq
fffdb230:	ea52 0c43 	orrseq.w	r12, r2, r3, lsl #1
fffdb234:	ea91 0f03 	teqne	r1, r3
fffdb238:	bf02      	ittt	eq
fffdb23a:	ea90 0f02 	teqeq	r0, r2
fffdb23e:	2000      	moveq	r0, #0
fffdb240:	4770      	bxeq	lr
fffdb242:	f110 0f00 	cmn.w	r0, #0
fffdb246:	ea91 0f03 	teq	r1, r3
fffdb24a:	bf58      	it	pl
fffdb24c:	4299      	cmppl	r1, r3
fffdb24e:	bf08      	it	eq
fffdb250:	4290      	cmpeq	r0, r2
fffdb252:	bf2c      	ite	cs
fffdb254:	17d8      	asrcs	r0, r3, #31
fffdb256:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
fffdb25a:	f040 0001 	orr.w	r0, r0, #1
fffdb25e:	4770      	bx	lr
fffdb260:	ea4f 0c41 	mov.w	r12, r1, lsl #1
fffdb264:	ea7f 5c6c 	mvns.w	r12, r12, asr #21
fffdb268:	d102      	bne.n	fffdb270 <__cmpdf2+0x64>
fffdb26a:	ea50 3c01 	orrs.w	r12, r0, r1, lsl #12
fffdb26e:	d107      	bne.n	fffdb280 <__cmpdf2+0x74>
fffdb270:	ea4f 0c43 	mov.w	r12, r3, lsl #1
fffdb274:	ea7f 5c6c 	mvns.w	r12, r12, asr #21
fffdb278:	d1d6      	bne.n	fffdb228 <__cmpdf2+0x1c>
fffdb27a:	ea52 3c03 	orrs.w	r12, r2, r3, lsl #12
fffdb27e:	d0d3      	beq.n	fffdb228 <__cmpdf2+0x1c>
fffdb280:	f85d 0b04 	ldr.w	r0, [sp], #4
fffdb284:	4770      	bx	lr
fffdb286:	bf00      	nop

fffdb288 <__aeabi_cdrcmple>:
fffdb288:	4684      	mov	r12, r0
fffdb28a:	4610      	mov	r0, r2
fffdb28c:	4662      	mov	r2, r12
fffdb28e:	468c      	mov	r12, r1
fffdb290:	4619      	mov	r1, r3
fffdb292:	4663      	mov	r3, r12
fffdb294:	e000      	b.n	fffdb298 <__aeabi_cdcmpeq>
fffdb296:	bf00      	nop

fffdb298 <__aeabi_cdcmpeq>:
fffdb298:	b501      	push	{r0, lr}
fffdb29a:	f7ff ffb7 	bl	fffdb20c <__cmpdf2>
fffdb29e:	2800      	cmp	r0, #0
fffdb2a0:	bf48      	it	mi
fffdb2a2:	f110 0f00 	cmnmi.w	r0, #0
fffdb2a6:	bd01      	pop	{r0, pc}

fffdb2a8 <__aeabi_dcmpeq>:
fffdb2a8:	f84d ed08 	str.w	lr, [sp, #-8]!
fffdb2ac:	f7ff fff4 	bl	fffdb298 <__aeabi_cdcmpeq>
fffdb2b0:	bf0c      	ite	eq
fffdb2b2:	2001      	moveq	r0, #1
fffdb2b4:	2000      	movne	r0, #0
fffdb2b6:	f85d fb08 	ldr.w	pc, [sp], #8
fffdb2ba:	bf00      	nop

fffdb2bc <__aeabi_dcmplt>:
fffdb2bc:	f84d ed08 	str.w	lr, [sp, #-8]!
fffdb2c0:	f7ff ffea 	bl	fffdb298 <__aeabi_cdcmpeq>
fffdb2c4:	bf34      	ite	cc
fffdb2c6:	2001      	movcc	r0, #1
fffdb2c8:	2000      	movcs	r0, #0
fffdb2ca:	f85d fb08 	ldr.w	pc, [sp], #8
fffdb2ce:	bf00      	nop

fffdb2d0 <__aeabi_dcmple>:
fffdb2d0:	f84d ed08 	str.w	lr, [sp, #-8]!
fffdb2d4:	f7ff ffe0 	bl	fffdb298 <__aeabi_cdcmpeq>
fffdb2d8:	bf94      	ite	ls
fffdb2da:	2001      	movls	r0, #1
fffdb2dc:	2000      	movhi	r0, #0
fffdb2de:	f85d fb08 	ldr.w	pc, [sp], #8
fffdb2e2:	bf00      	nop

fffdb2e4 <__aeabi_dcmpge>:
fffdb2e4:	f84d ed08 	str.w	lr, [sp, #-8]!
fffdb2e8:	f7ff ffce 	bl	fffdb288 <__aeabi_cdrcmple>
fffdb2ec:	bf94      	ite	ls
fffdb2ee:	2001      	movls	r0, #1
fffdb2f0:	2000      	movhi	r0, #0
fffdb2f2:	f85d fb08 	ldr.w	pc, [sp], #8
fffdb2f6:	bf00      	nop

fffdb2f8 <__aeabi_dcmpgt>:
fffdb2f8:	f84d ed08 	str.w	lr, [sp, #-8]!
fffdb2fc:	f7ff ffc4 	bl	fffdb288 <__aeabi_cdrcmple>
fffdb300:	bf34      	ite	cc
fffdb302:	2001      	movcc	r0, #1
fffdb304:	2000      	movcs	r0, #0
fffdb306:	f85d fb08 	ldr.w	pc, [sp], #8
fffdb30a:	bf00      	nop

fffdb30c <__aeabi_dcmpun>:
fffdb30c:	ea4f 0c41 	mov.w	r12, r1, lsl #1
fffdb310:	ea7f 5c6c 	mvns.w	r12, r12, asr #21
fffdb314:	d102      	bne.n	fffdb31c <__aeabi_dcmpun+0x10>
fffdb316:	ea50 3c01 	orrs.w	r12, r0, r1, lsl #12
fffdb31a:	d10a      	bne.n	fffdb332 <__aeabi_dcmpun+0x26>
fffdb31c:	ea4f 0c43 	mov.w	r12, r3, lsl #1
fffdb320:	ea7f 5c6c 	mvns.w	r12, r12, asr #21
fffdb324:	d102      	bne.n	fffdb32c <__aeabi_dcmpun+0x20>
fffdb326:	ea52 3c03 	orrs.w	r12, r2, r3, lsl #12
fffdb32a:	d102      	bne.n	fffdb332 <__aeabi_dcmpun+0x26>
fffdb32c:	f04f 0000 	mov.w	r0, #0
fffdb330:	4770      	bx	lr
fffdb332:	f04f 0001 	mov.w	r0, #1
fffdb336:	4770      	bx	lr

fffdb338 <__aeabi_d2iz>:
fffdb338:	ea4f 0241 	mov.w	r2, r1, lsl #1
fffdb33c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
fffdb340:	d215      	bcs.n	fffdb36e <__aeabi_d2iz+0x36>
fffdb342:	d511      	bpl.n	fffdb368 <__aeabi_d2iz+0x30>
fffdb344:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
fffdb348:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
fffdb34c:	d912      	bls.n	fffdb374 <__aeabi_d2iz+0x3c>
fffdb34e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
fffdb352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
fffdb356:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
fffdb35a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
fffdb35e:	fa23 f002 	lsr.w	r0, r3, r2
fffdb362:	bf18      	it	ne
fffdb364:	4240      	negne	r0, r0
fffdb366:	4770      	bx	lr
fffdb368:	f04f 0000 	mov.w	r0, #0
fffdb36c:	4770      	bx	lr
fffdb36e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
fffdb372:	d105      	bne.n	fffdb380 <__aeabi_d2iz+0x48>
fffdb374:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
fffdb378:	bf08      	it	eq
fffdb37a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
fffdb37e:	4770      	bx	lr
fffdb380:	f04f 0000 	mov.w	r0, #0
fffdb384:	4770      	bx	lr
fffdb386:	bf00      	nop

fffdb388 <__aeabi_d2uiz>:
fffdb388:	004a      	lsls	r2, r1, #1
fffdb38a:	d211      	bcs.n	fffdb3b0 <__aeabi_d2uiz+0x28>
fffdb38c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
fffdb390:	d211      	bcs.n	fffdb3b6 <__aeabi_d2uiz+0x2e>
fffdb392:	d50d      	bpl.n	fffdb3b0 <__aeabi_d2uiz+0x28>
fffdb394:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
fffdb398:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
fffdb39c:	d40e      	bmi.n	fffdb3bc <__aeabi_d2uiz+0x34>
fffdb39e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
fffdb3a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
fffdb3a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
fffdb3aa:	fa23 f002 	lsr.w	r0, r3, r2
fffdb3ae:	4770      	bx	lr
fffdb3b0:	f04f 0000 	mov.w	r0, #0
fffdb3b4:	4770      	bx	lr
fffdb3b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
fffdb3ba:	d102      	bne.n	fffdb3c2 <__aeabi_d2uiz+0x3a>
fffdb3bc:	f04f 30ff 	mov.w	r0, #4294967295
fffdb3c0:	4770      	bx	lr
fffdb3c2:	f04f 0000 	mov.w	r0, #0
fffdb3c6:	4770      	bx	lr

fffdb3c8 <__aeabi_d2f>:
fffdb3c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
fffdb3cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
fffdb3d0:	bf24      	itt	cs
fffdb3d2:	f5b3 1c00 	subscs.w	r12, r3, #2097152	; 0x200000
fffdb3d6:	f1dc 5cfe 	rsbscs	r12, r12, #532676608	; 0x1fc00000
fffdb3da:	d90d      	bls.n	fffdb3f8 <__aeabi_d2f+0x30>
fffdb3dc:	f001 4c00 	and.w	r12, r1, #2147483648	; 0x80000000
fffdb3e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
fffdb3e4:	ea4c 7050 	orr.w	r0, r12, r0, lsr #29
fffdb3e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
fffdb3ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
fffdb3f0:	bf08      	it	eq
fffdb3f2:	f020 0001 	biceq.w	r0, r0, #1
fffdb3f6:	4770      	bx	lr
fffdb3f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
fffdb3fc:	d121      	bne.n	fffdb442 <__aeabi_d2f+0x7a>
fffdb3fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
fffdb402:	bfbc      	itt	lt
fffdb404:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
fffdb408:	4770      	bxlt	lr
fffdb40a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
fffdb40e:	ea4f 5252 	mov.w	r2, r2, lsr #21
fffdb412:	f1c2 0218 	rsb	r2, r2, #24
fffdb416:	f1c2 0c20 	rsb	r12, r2, #32
fffdb41a:	fa10 f30c 	lsls.w	r3, r0, r12
fffdb41e:	fa20 f002 	lsr.w	r0, r0, r2
fffdb422:	bf18      	it	ne
fffdb424:	f040 0001 	orrne.w	r0, r0, #1
fffdb428:	ea4f 23c1 	mov.w	r3, r1, lsl #11
fffdb42c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
fffdb430:	fa03 fc0c 	lsl.w	r12, r3, r12
fffdb434:	ea40 000c 	orr.w	r0, r0, r12
fffdb438:	fa23 f302 	lsr.w	r3, r3, r2
fffdb43c:	ea4f 0343 	mov.w	r3, r3, lsl #1
fffdb440:	e7cc      	b.n	fffdb3dc <__aeabi_d2f+0x14>
fffdb442:	ea7f 5362 	mvns.w	r3, r2, asr #21
fffdb446:	d107      	bne.n	fffdb458 <__aeabi_d2f+0x90>
fffdb448:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
fffdb44c:	bf1e      	ittt	ne
fffdb44e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
fffdb452:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
fffdb456:	4770      	bxne	lr
fffdb458:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
fffdb45c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
fffdb460:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
fffdb464:	4770      	bx	lr
fffdb466:	bf00      	nop

fffdb468 <__aeabi_uldivmod>:
fffdb468:	b953      	cbnz	r3, fffdb480 <__aeabi_uldivmod+0x18>
fffdb46a:	b94a      	cbnz	r2, fffdb480 <__aeabi_uldivmod+0x18>
fffdb46c:	2900      	cmp	r1, #0
fffdb46e:	bf08      	it	eq
fffdb470:	2800      	cmpeq	r0, #0
fffdb472:	bf1c      	itt	ne
fffdb474:	f04f 31ff 	movne.w	r1, #4294967295
fffdb478:	f04f 30ff 	movne.w	r0, #4294967295
fffdb47c:	f7fa baf8 	b.w	fffd5a70 <__aeabi_idiv0>
fffdb480:	f1ad 0c08 	sub.w	r12, sp, #8
fffdb484:	e96d ce04 	strd	r12, lr, [sp, #-16]!
fffdb488:	f000 f806 	bl	fffdb498 <__udivmoddi4>
fffdb48c:	f8dd e004 	ldr.w	lr, [sp, #4]
fffdb490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
fffdb494:	b004      	add	sp, #16
fffdb496:	4770      	bx	lr

fffdb498 <__udivmoddi4>:
fffdb498:	4299      	cmp	r1, r3
fffdb49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
fffdb49e:	bf08      	it	eq
fffdb4a0:	4290      	cmpeq	r0, r2
fffdb4a2:	b083      	sub	sp, #12
fffdb4a4:	4682      	mov	r10, r0
fffdb4a6:	468b      	mov	r11, r1
fffdb4a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
fffdb4ac:	d37c      	bcc.n	fffdb5a8 <__udivmoddi4+0x110>
fffdb4ae:	4610      	mov	r0, r2
fffdb4b0:	4619      	mov	r1, r3
fffdb4b2:	fab3 f283 	clz	r2, r3
fffdb4b6:	2b00      	cmp	r3, #0
fffdb4b8:	f000 8084 	beq.w	fffdb5c4 <__udivmoddi4+0x12c>
fffdb4bc:	fabb f38b 	clz	r3, r11
fffdb4c0:	f1bb 0f00 	cmp.w	r11, #0
fffdb4c4:	d07a      	beq.n	fffdb5bc <__udivmoddi4+0x124>
fffdb4c6:	1ad3      	subs	r3, r2, r3
fffdb4c8:	f1a3 0e20 	sub.w	lr, r3, #32
fffdb4cc:	fa01 f703 	lsl.w	r7, r1, r3
fffdb4d0:	fa00 f20e 	lsl.w	r2, r0, lr
fffdb4d4:	f1c3 0c20 	rsb	r12, r3, #32
fffdb4d8:	4317      	orrs	r7, r2
fffdb4da:	fa20 f20c 	lsr.w	r2, r0, r12
fffdb4de:	4317      	orrs	r7, r2
fffdb4e0:	fa00 f603 	lsl.w	r6, r0, r3
fffdb4e4:	45bb      	cmp	r11, r7
fffdb4e6:	bf08      	it	eq
fffdb4e8:	45b2      	cmpeq	r10, r6
fffdb4ea:	d362      	bcc.n	fffdb5b2 <__udivmoddi4+0x11a>
fffdb4ec:	ebba 0a06 	subs.w	r10, r10, r6
fffdb4f0:	f04f 0201 	mov.w	r2, #1
fffdb4f4:	eb6b 0b07 	sbc.w	r11, r11, r7
fffdb4f8:	fa02 f10e 	lsl.w	r1, r2, lr
fffdb4fc:	fa22 f90c 	lsr.w	r9, r2, r12
fffdb500:	409a      	lsls	r2, r3
fffdb502:	ea41 0109 	orr.w	r1, r1, r9
fffdb506:	9200      	str	r2, [sp, #0]
fffdb508:	9101      	str	r1, [sp, #4]
fffdb50a:	2b00      	cmp	r3, #0
fffdb50c:	d042      	beq.n	fffdb594 <__udivmoddi4+0xfc>
fffdb50e:	087f      	lsrs	r7, r7, #1
fffdb510:	ea4f 0636 	mov.w	r6, r6, rrx
fffdb514:	461a      	mov	r2, r3
fffdb516:	e00c      	b.n	fffdb532 <__udivmoddi4+0x9a>
fffdb518:	ebba 0006 	subs.w	r0, r10, r6
fffdb51c:	eb6b 0107 	sbc.w	r1, r11, r7
fffdb520:	1804      	adds	r4, r0, r0
fffdb522:	eb41 0501 	adc.w	r5, r1, r1
fffdb526:	f114 0a01 	adds.w	r10, r4, #1
fffdb52a:	f145 0b00 	adc.w	r11, r5, #0
fffdb52e:	3a01      	subs	r2, #1
fffdb530:	d009      	beq.n	fffdb546 <__udivmoddi4+0xae>
fffdb532:	45bb      	cmp	r11, r7
fffdb534:	bf08      	it	eq
fffdb536:	45b2      	cmpeq	r10, r6
fffdb538:	d2ee      	bcs.n	fffdb518 <__udivmoddi4+0x80>
fffdb53a:	eb1a 0a0a 	adds.w	r10, r10, r10
fffdb53e:	eb4b 0b0b 	adc.w	r11, r11, r11
fffdb542:	3a01      	subs	r2, #1
fffdb544:	d1f5      	bne.n	fffdb532 <__udivmoddi4+0x9a>
fffdb546:	fa0b fc0c 	lsl.w	r12, r11, r12
fffdb54a:	e9dd 0100 	ldrd	r0, r1, [sp]
fffdb54e:	fa2a f203 	lsr.w	r2, r10, r3
fffdb552:	fa2b fe0e 	lsr.w	lr, r11, lr
fffdb556:	ea42 020c 	orr.w	r2, r2, r12
fffdb55a:	eb10 000a 	adds.w	r0, r0, r10
fffdb55e:	fa2b f903 	lsr.w	r9, r11, r3
fffdb562:	ea42 0a0e 	orr.w	r10, r2, lr
fffdb566:	f1a3 0c20 	sub.w	r12, r3, #32
fffdb56a:	f1c3 0220 	rsb	r2, r3, #32
fffdb56e:	fa09 f703 	lsl.w	r7, r9, r3
fffdb572:	fa0a fc0c 	lsl.w	r12, r10, r12
fffdb576:	ea47 070c 	orr.w	r7, r7, r12
fffdb57a:	fa2a f202 	lsr.w	r2, r10, r2
fffdb57e:	fa0a f603 	lsl.w	r6, r10, r3
fffdb582:	eb41 010b 	adc.w	r1, r1, r11
fffdb586:	4317      	orrs	r7, r2
fffdb588:	1b80      	subs	r0, r0, r6
fffdb58a:	46cb      	mov	r11, r9
fffdb58c:	eb61 0107 	sbc.w	r1, r1, r7
fffdb590:	e9cd 0100 	strd	r0, r1, [sp]
fffdb594:	f1b8 0f00 	cmp.w	r8, #0
fffdb598:	d001      	beq.n	fffdb59e <__udivmoddi4+0x106>
fffdb59a:	e9c8 ab00 	strd	r10, r11, [r8]
fffdb59e:	e9dd 0100 	ldrd	r0, r1, [sp]
fffdb5a2:	b003      	add	sp, #12
fffdb5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
fffdb5a8:	2300      	movs	r3, #0
fffdb5aa:	2400      	movs	r4, #0
fffdb5ac:	e9cd 3400 	strd	r3, r4, [sp]
fffdb5b0:	e7f0      	b.n	fffdb594 <__udivmoddi4+0xfc>
fffdb5b2:	2100      	movs	r1, #0
fffdb5b4:	2200      	movs	r2, #0
fffdb5b6:	e9cd 1200 	strd	r1, r2, [sp]
fffdb5ba:	e7a6      	b.n	fffdb50a <__udivmoddi4+0x72>
fffdb5bc:	faba f38a 	clz	r3, r10
fffdb5c0:	3320      	adds	r3, #32
fffdb5c2:	e780      	b.n	fffdb4c6 <__udivmoddi4+0x2e>
fffdb5c4:	fab0 f380 	clz	r3, r0
fffdb5c8:	f103 0220 	add.w	r2, r3, #32
fffdb5cc:	fabb f38b 	clz	r3, r11
fffdb5d0:	f1bb 0f00 	cmp.w	r11, #0
fffdb5d4:	f47f af77 	bne.w	fffdb4c6 <__udivmoddi4+0x2e>
fffdb5d8:	e7f0      	b.n	fffdb5bc <__udivmoddi4+0x124>
fffdb5da:	bf00      	nop
fffdb5dc:	0000      	movs	r0, r0
	...

fffdb5e0 <__memset_from_arm>:
fffdb5e0:	e51ff004 	ldr	pc, [pc, #-4]	; fffdb5e4 <__memset_from_arm+0x4>
fffdb5e4:	fffd5a75 	.word	0xfffd5a75

Disassembly of section rodata:

fffdb5e8 <__FUNCTION__.5917-0x764>:
fffdb5e8:	32424841 	.word	0x32424841
fffdb5ec:	5f494350 	.word	0x5f494350
fffdb5f0:	6f6d654d 	.word	0x6f6d654d
fffdb5f4:	525f7972 	.word	0x525f7972
fffdb5f8:	20646165 	.word	0x20646165
fffdb5fc:	6f727265 	.word	0x6f727265
fffdb600:	203a2072 	.word	0x203a2072
fffdb604:	656c6c49 	.word	0x656c6c49
fffdb608:	206c6167 	.word	0x206c6167
fffdb60c:	61746164 	.word	0x61746164
fffdb610:	7a697320 	.word	0x7a697320
fffdb614:	25282065 	.word	0x25282065
fffdb618:	0a2e2964 	.word	0x0a2e2964
fffdb61c:	42484100 	.word	0x42484100
fffdb620:	49435032 	.word	0x49435032
fffdb624:	6e6f435f 	.word	0x6e6f435f
fffdb628:	5f676966 	.word	0x5f676966
fffdb62c:	64616552 	.word	0x64616552
fffdb630:	6552203a 	.word	0x6552203a
fffdb634:	74206461 	.word	0x74206461
fffdb638:	736e6172 	.word	0x736e6172
fffdb63c:	69746361 	.word	0x69746361
fffdb640:	74206e6f 	.word	0x74206e6f
fffdb644:	20656d69 	.word	0x20656d69
fffdb648:	2174756f 	.word	0x2174756f
fffdb64c:	42484120 	.word	0x42484120
fffdb650:	5453495f 	.word	0x5453495f
fffdb654:	53555441 	.word	0x53555441
fffdb658:	30203d20 	.word	0x30203d20
fffdb65c:	34302578 	.word	0x34302578
fffdb660:	41000a58 	.word	0x41000a58
fffdb664:	50324248 	.word	0x50324248
fffdb668:	435f4943 	.word	0x435f4943
fffdb66c:	69666e6f 	.word	0x69666e6f
fffdb670:	65525f67 	.word	0x65525f67
fffdb674:	203a6461 	.word	0x203a6461
fffdb678:	64616572 	.word	0x64616572
fffdb67c:	6f726620 	.word	0x6f726620
fffdb680:	6461206d 	.word	0x6461206d
fffdb684:	73657264 	.word	0x73657264
fffdb688:	78303d73 	.word	0x78303d73
fffdb68c:	202c5825 	.word	0x202c5825
fffdb690:	657a6973 	.word	0x657a6973
fffdb694:	2c64253d 	.word	0x2c64253d
fffdb698:	74616420 	.word	0x74616420
fffdb69c:	78303d61 	.word	0x78303d61
fffdb6a0:	28205825 	.word	0x28205825
fffdb6a4:	64205744 	.word	0x64205744
fffdb6a8:	3d617461 	.word	0x3d617461
fffdb6ac:	58257830 	.word	0x58257830
fffdb6b0:	41000a29 	.word	0x41000a29
fffdb6b4:	50324248 	.word	0x50324248
fffdb6b8:	435f4943 	.word	0x435f4943
fffdb6bc:	69666e6f 	.word	0x69666e6f
fffdb6c0:	72575f67 	.word	0x72575f67
fffdb6c4:	20657469 	.word	0x20657469
fffdb6c8:	6f727265 	.word	0x6f727265
fffdb6cc:	49203a72 	.word	0x49203a72
fffdb6d0:	67656c6c 	.word	0x67656c6c
fffdb6d4:	64206c61 	.word	0x64206c61
fffdb6d8:	20617461 	.word	0x20617461
fffdb6dc:	657a6973 	.word	0x657a6973
fffdb6e0:	6f43000a 	.word	0x6f43000a
fffdb6e4:	6769666e 	.word	0x6769666e
fffdb6e8:	6972575f 	.word	0x6972575f
fffdb6ec:	203a6574 	.word	0x203a6574
fffdb6f0:	656c6c49 	.word	0x656c6c49
fffdb6f4:	206c6167 	.word	0x206c6167
fffdb6f8:	7366666f 	.word	0x7366666f
fffdb6fc:	69287465 	.word	0x69287465
fffdb700:	65747942 	.word	0x65747942
fffdb704:	25203a29 	.word	0x25203a29
fffdb708:	4d202e64 	.word	0x4d202e64
fffdb70c:	20747375 	.word	0x20747375
fffdb710:	69206562 	.word	0x69206562
fffdb714:	6172206e 	.word	0x6172206e
fffdb718:	2065676e 	.word	0x2065676e
fffdb71c:	0a332d30 	.word	0x0a332d30
fffdb720:	6e6f4300 	.word	0x6e6f4300
fffdb724:	5f676966 	.word	0x5f676966
fffdb728:	74697257 	.word	0x74697257
fffdb72c:	4f203a65 	.word	0x4f203a65
fffdb730:	65736666 	.word	0x65736666
fffdb734:	202b2074 	.word	0x202b2074
fffdb738:	657a6973 	.word	0x657a6973
fffdb73c:	63786520 	.word	0x63786520
fffdb740:	69646565 	.word	0x69646565
fffdb744:	3420676e 	.word	0x3420676e
fffdb748:	74796220 	.word	0x74796220
fffdb74c:	69732065 	.word	0x69732065
fffdb750:	0a2e657a 	.word	0x0a2e657a
fffdb754:	42484100 	.word	0x42484100
fffdb758:	49435032 	.word	0x49435032
fffdb75c:	6e6f435f 	.word	0x6e6f435f
fffdb760:	5f676966 	.word	0x5f676966
fffdb764:	74697257 	.word	0x74697257
fffdb768:	57203a65 	.word	0x57203a65
fffdb76c:	65746972 	.word	0x65746972
fffdb770:	61727420 	.word	0x61727420
fffdb774:	6361736e 	.word	0x6361736e
fffdb778:	6e6f6974 	.word	0x6e6f6974
fffdb77c:	6d697420 	.word	0x6d697420
fffdb780:	756f2065 	.word	0x756f2065
fffdb784:	41202174 	.word	0x41202174
fffdb788:	495f4248 	.word	0x495f4248
fffdb78c:	54415453 	.word	0x54415453
fffdb790:	3d205355 	.word	0x3d205355
fffdb794:	25783020 	.word	0x25783020
fffdb798:	0a583430 	.word	0x0a583430
fffdb79c:	42484100 	.word	0x42484100
fffdb7a0:	49435032 	.word	0x49435032
fffdb7a4:	6e6f435f 	.word	0x6e6f435f
fffdb7a8:	5f676966 	.word	0x5f676966
fffdb7ac:	74697257 	.word	0x74697257
fffdb7b0:	77203a65 	.word	0x77203a65
fffdb7b4:	65746f72 	.word	0x65746f72
fffdb7b8:	206f7420 	.word	0x206f7420
fffdb7bc:	72646461 	.word	0x72646461
fffdb7c0:	3d737365 	.word	0x3d737365
fffdb7c4:	58257830 	.word	0x58257830
fffdb7c8:	6973202c 	.word	0x6973202c
fffdb7cc:	253d657a 	.word	0x253d657a
fffdb7d0:	64202c64 	.word	0x64202c64
fffdb7d4:	3d617461 	.word	0x3d617461
fffdb7d8:	58257830 	.word	0x58257830
fffdb7dc:	6269202c 	.word	0x6269202c
fffdb7e0:	3d657479 	.word	0x3d657479
fffdb7e4:	000a6425 	.word	0x000a6425
fffdb7e8:	32424841 	.word	0x32424841
fffdb7ec:	5f494350 	.word	0x5f494350
fffdb7f0:	6f6d654d 	.word	0x6f6d654d
fffdb7f4:	525f7972 	.word	0x525f7972
fffdb7f8:	20646165 	.word	0x20646165
fffdb7fc:	6f727265 	.word	0x6f727265
fffdb800:	203a2072 	.word	0x203a2072
fffdb804:	656c6c49 	.word	0x656c6c49
fffdb808:	206c6167 	.word	0x206c6167
fffdb80c:	61746164 	.word	0x61746164
fffdb810:	7a697320 	.word	0x7a697320
fffdb814:	25282065 	.word	0x25282065
fffdb818:	202e2964 	.word	0x202e2964
fffdb81c:	64616552 	.word	0x64616552
fffdb820:	61727420 	.word	0x61727420
fffdb824:	6566736e 	.word	0x6566736e
fffdb828:	756d2072 	.word	0x756d2072
fffdb82c:	62207473 	.word	0x62207473
fffdb830:	20342065 	.word	0x20342065
fffdb834:	65747962 	.word	0x65747962
fffdb838:	000a2e73 	.word	0x000a2e73
fffdb83c:	32424841 	.word	0x32424841
fffdb840:	5f494350 	.word	0x5f494350
fffdb844:	6f6d654d 	.word	0x6f6d654d
fffdb848:	525f7972 	.word	0x525f7972
fffdb84c:	20646165 	.word	0x20646165
fffdb850:	6f727265 	.word	0x6f727265
fffdb854:	203a2072 	.word	0x203a2072
fffdb858:	656c6c49 	.word	0x656c6c49
fffdb85c:	206c6167 	.word	0x206c6167
fffdb860:	72646461 	.word	0x72646461
fffdb864:	20737365 	.word	0x20737365
fffdb868:	25783028 	.word	0x25783028
fffdb86c:	6d202958 	.word	0x6d202958
fffdb870:	20747375 	.word	0x20747375
fffdb874:	61206562 	.word	0x61206562
fffdb878:	6e67696c 	.word	0x6e67696c
fffdb87c:	74206465 	.word	0x74206465
fffdb880:	5744206f 	.word	0x5744206f
fffdb884:	2e44524f 	.word	0x2e44524f
fffdb888:	4841000a 	.word	0x4841000a
fffdb88c:	43503242 	.word	0x43503242
fffdb890:	654d5f49 	.word	0x654d5f49
fffdb894:	79726f6d 	.word	0x79726f6d
fffdb898:	6165525f 	.word	0x6165525f
fffdb89c:	41203a64 	.word	0x41203a64
fffdb8a0:	3d726464 	.word	0x3d726464
fffdb8a4:	6c257830 	.word	0x6c257830
fffdb8a8:	53202c58 	.word	0x53202c58
fffdb8ac:	3d657a69 	.word	0x3d657a69
fffdb8b0:	202c6425 	.word	0x202c6425
fffdb8b4:	61746144 	.word	0x61746144
fffdb8b8:	2578303d 	.word	0x2578303d
fffdb8bc:	000a586c 	.word	0x000a586c
fffdb8c0:	32424841 	.word	0x32424841
fffdb8c4:	5f494350 	.word	0x5f494350
fffdb8c8:	6f6d654d 	.word	0x6f6d654d
fffdb8cc:	575f7972 	.word	0x575f7972
fffdb8d0:	65746972 	.word	0x65746972
fffdb8d4:	72726520 	.word	0x72726520
fffdb8d8:	3a20726f 	.word	0x3a20726f
fffdb8dc:	6c6c4920 	.word	0x6c6c4920
fffdb8e0:	6c616765 	.word	0x6c616765
fffdb8e4:	74616420 	.word	0x74616420
fffdb8e8:	69732061 	.word	0x69732061
fffdb8ec:	000a657a 	.word	0x000a657a
fffdb8f0:	32424841 	.word	0x32424841
fffdb8f4:	5f494350 	.word	0x5f494350
fffdb8f8:	6f6d654d 	.word	0x6f6d654d
fffdb8fc:	575f7972 	.word	0x575f7972
fffdb900:	65746972 	.word	0x65746972
fffdb904:	7257203a 	.word	0x7257203a
fffdb908:	20657469 	.word	0x20657469
fffdb90c:	6e617274 	.word	0x6e617274
fffdb910:	74636173 	.word	0x74636173
fffdb914:	206e6f69 	.word	0x206e6f69
fffdb918:	656d6974 	.word	0x656d6974
fffdb91c:	74756f20 	.word	0x74756f20
fffdb920:	48412021 	.word	0x48412021
fffdb924:	53495f42 	.word	0x53495f42
fffdb928:	55544154 	.word	0x55544154
fffdb92c:	203d2053 	.word	0x203d2053
fffdb930:	30257830 	.word	0x30257830
fffdb934:	000a5834 	.word	0x000a5834
fffdb938:	32424841 	.word	0x32424841
fffdb93c:	5f494350 	.word	0x5f494350
fffdb940:	6f6d654d 	.word	0x6f6d654d
fffdb944:	575f7972 	.word	0x575f7972
fffdb948:	65746972 	.word	0x65746972
fffdb94c:	6441203a 	.word	0x6441203a
fffdb950:	303d7264 	.word	0x303d7264
fffdb954:	586c2578 	.word	0x586c2578
fffdb958:	6953202c 	.word	0x6953202c
fffdb95c:	253d657a 	.word	0x253d657a
fffdb960:	44202c64 	.word	0x44202c64
fffdb964:	3d617461 	.word	0x3d617461
fffdb968:	6c257830 	.word	0x6c257830
fffdb96c:	0a58      	.short	0x0a58
fffdb96e:	00          	.byte	0x00
fffdb96f:	45          	.byte	0x45
fffdb970:	726f7272 	.word	0x726f7272
fffdb974:	6e49203a 	.word	0x6e49203a
fffdb978:	696c6176 	.word	0x696c6176
fffdb97c:	61762064 	.word	0x61762064
fffdb980:	2065756c 	.word	0x2065756c
fffdb984:	20726f66 	.word	0x20726f66
fffdb988:	70617247 	.word	0x70617247
fffdb98c:	73636968 	.word	0x73636968
fffdb990:	6d654d20 	.word	0x6d654d20
fffdb994:	2079726f 	.word	0x2079726f
fffdb998:	2070614d 	.word	0x2070614d
fffdb99c:	4d4d4728 	.word	0x4d4d4728
fffdb9a0:	3d205041 	.word	0x3d205041
fffdb9a4:	29752520 	.word	0x29752520
fffdb9a8:	46000a20 	.word	0x46000a20
fffdb9ac:	6e495f42 	.word	0x6e495f42
fffdb9b0:	61697469 	.word	0x61697469
fffdb9b4:	657a696c 	.word	0x657a696c
fffdb9b8:	203a2928 	.word	0x203a2928
fffdb9bc:	6d617246 	.word	0x6d617246
fffdb9c0:	75422d65 	.word	0x75422d65
fffdb9c4:	72656666 	.word	0x72656666
fffdb9c8:	64646120 	.word	0x64646120
fffdb9cc:	73736572 	.word	0x73736572
fffdb9d0:	25203d20 	.word	0x25203d20
fffdb9d4:	68583830 	.word	0x68583830
fffdb9d8:	203e000a 	.word	0x203e000a
fffdb9dc:	65786950 	.word	0x65786950
fffdb9e0:	6c43206c 	.word	0x6c43206c
fffdb9e4:	206b636f 	.word	0x206b636f
fffdb9e8:	666e6f43 	.word	0x666e6f43
fffdb9ec:	72756769 	.word	0x72756769
fffdb9f0:	6f697461 	.word	0x6f697461
fffdb9f4:	7473206e 	.word	0x7473206e
fffdb9f8:	0a747261 	.word	0x0a747261
fffdb9fc:	2a202000 	.word	0x2a202000
fffdba00:	4c504720 	.word	0x4c504720
fffdba04:	4442464c 	.word	0x4442464c
fffdba08:	28205649 	.word	0x28205649
fffdba0c:	56444246 	.word	0x56444246
fffdba10:	25203a29 	.word	0x25203a29
fffdba14:	68583830 	.word	0x68583830
fffdba18:	2020000a 	.word	0x2020000a
fffdba1c:	5047202a 	.word	0x5047202a
fffdba20:	4e494c4c 	.word	0x4e494c4c
fffdba24:	20564944 	.word	0x20564944
fffdba28:	444e4928 	.word	0x444e4928
fffdba2c:	202b2056 	.word	0x202b2056
fffdba30:	56444246 	.word	0x56444246
fffdba34:	203a2938 	.word	0x203a2938
fffdba38:	58383025 	.word	0x58383025
fffdba3c:	20000a68 	.word	0x20000a68
fffdba40:	47202a20 	.word	0x47202a20
fffdba44:	534c4c50 	.word	0x534c4c50
fffdba48:	4f282054 	.word	0x4f282054
fffdba4c:	31564454 	.word	0x31564454
fffdba50:	44544f2f 	.word	0x44544f2f
fffdba54:	3a293256 	.word	0x3a293256
fffdba58:	38302520 	.word	0x38302520
fffdba5c:	000a6858 	.word	0x000a6858
fffdba60:	202a2020 	.word	0x202a2020
fffdba64:	58495058 	.word	0x58495058
fffdba68:	434b4c43 	.word	0x434b4c43
fffdba6c:	3a4c5254 	.word	0x3a4c5254
fffdba70:	38302520 	.word	0x38302520
fffdba74:	000a6858 	.word	0x000a6858
fffdba78:	202a2020 	.word	0x202a2020
fffdba7c:	45525658 	.word	0x45525658
fffdba80:	52544346 	.word	0x52544346
fffdba84:	25203a4c 	.word	0x25203a4c
fffdba88:	68583830 	.word	0x68583830
fffdba8c:	203e000a 	.word	0x203e000a
fffdba90:	65786950 	.word	0x65786950
fffdba94:	6c43206c 	.word	0x6c43206c
fffdba98:	206b636f 	.word	0x206b636f
fffdba9c:	666e6f43 	.word	0x666e6f43
fffdbaa0:	72756769 	.word	0x72756769
fffdbaa4:	6f697461 	.word	0x6f697461
fffdbaa8:	6f64206e 	.word	0x6f64206e
fffdbaac:	0a2e656e 	.word	0x0a2e656e
fffdbab0:	58464700 	.word	0x58464700
fffdbab4:	73694420 	.word	0x73694420
fffdbab8:	79616c70 	.word	0x79616c70
fffdbabc:	6e6f4320 	.word	0x6e6f4320
fffdbac0:	75676966 	.word	0x75676966
fffdbac4:	69746172 	.word	0x69746172
fffdbac8:	74206e6f 	.word	0x74206e6f
fffdbacc:	3031206f 	.word	0x3031206f
fffdbad0:	37783432 	.word	0x37783432
fffdbad4:	57003836 	.word	0x57003836
fffdbad8:	69746961 	.word	0x69746961
fffdbadc:	7520676e 	.word	0x7520676e
fffdbae0:	6c69746e 	.word	0x6c69746e
fffdbae4:	49435020 	.word	0x49435020
fffdbae8:	20736920 	.word	0x20736920
fffdbaec:	2074756f 	.word	0x2074756f
fffdbaf0:	7220666f 	.word	0x7220666f
fffdbaf4:	74657365 	.word	0x74657365
fffdbaf8:	7250203b 	.word	0x7250203b
fffdbafc:	20737365 	.word	0x20737365
fffdbb00:	20796e61 	.word	0x20796e61
fffdbb04:	2079656b 	.word	0x2079656b
fffdbb08:	61206f74 	.word	0x61206f74
fffdbb0c:	74726f62 	.word	0x74726f62
fffdbb10:	2e2e2e20 	.word	0x2e2e2e20
fffdbb14:	000a202e 	.word	0x000a202e
fffdbb18:	74736554 	.word	0x74736554
fffdbb1c:	6f624120 	.word	0x6f624120
fffdbb20:	64657472 	.word	0x64657472
fffdbb24:	000a2e20 	.word	0x000a2e20
fffdbb28:	6f46203e 	.word	0x6f46203e
fffdbb2c:	20646e75 	.word	0x20646e75
fffdbb30:	72726f63 	.word	0x72726f63
fffdbb34:	20746365 	.word	0x20746365
fffdbb38:	20584647 	.word	0x20584647
fffdbb3c:	69766544 	.word	0x69766544
fffdbb40:	562f6563 	.word	0x562f6563
fffdbb44:	6f646e65 	.word	0x6f646e65
fffdbb48:	44492072 	.word	0x44492072
fffdbb4c:	25783020 	.word	0x25783020
fffdbb50:	586c3830 	.word	0x586c3830
fffdbb54:	000a202e 	.word	0x000a202e
fffdbb58:	54534554 	.word	0x54534554
fffdbb5c:	6e6f435f 	.word	0x6e6f435f
fffdbb60:	75676966 	.word	0x75676966
fffdbb64:	69446572 	.word	0x69446572
fffdbb68:	616c7073 	.word	0x616c7073
fffdbb6c:	61662079 	.word	0x61662079
fffdbb70:	64656c69 	.word	0x64656c69
fffdbb74:	4d203a20 	.word	0x4d203a20
fffdbb78:	41424147 	.word	0x41424147
fffdbb7c:	20314553 	.word	0x20314553
fffdbb80:	69207369 	.word	0x69207369
fffdbb84:	6c61766e 	.word	0x6c61766e
fffdbb88:	3d206469 	.word	0x3d206469
fffdbb8c:	38302520 	.word	0x38302520
fffdbb90:	000a6858 	.word	0x000a6858
fffdbb94:	54534554 	.word	0x54534554
fffdbb98:	6e6f435f 	.word	0x6e6f435f
fffdbb9c:	75676966 	.word	0x75676966
fffdbba0:	69446572 	.word	0x69446572
fffdbba4:	616c7073 	.word	0x616c7073
fffdbba8:	203a2079 	.word	0x203a2079
fffdbbac:	4241474d 	.word	0x4241474d
fffdbbb0:	31455341 	.word	0x31455341
fffdbbb4:	25203d20 	.word	0x25203d20
fffdbbb8:	68583830 	.word	0x68583830
fffdbbbc:	474d000a 	.word	0x474d000a
fffdbbc0:	53414241 	.word	0x53414241
fffdbbc4:	3d203145 	.word	0x3d203145
fffdbbc8:	38302520 	.word	0x38302520
fffdbbcc:	202c6858 	.word	0x202c6858
fffdbbd0:	4241474d 	.word	0x4241474d
fffdbbd4:	32455341 	.word	0x32455341
fffdbbd8:	25203d20 	.word	0x25203d20
fffdbbdc:	68583830 	.word	0x68583830
fffdbbe0:	203e000a 	.word	0x203e000a
fffdbbe4:	75716553 	.word	0x75716553
fffdbbe8:	65636e65 	.word	0x65636e65
fffdbbec:	43207372 	.word	0x43207372
fffdbbf0:	69666e6f 	.word	0x69666e6f
fffdbbf4:	61727567 	.word	0x61727567
fffdbbf8:	6e6f6974 	.word	0x6e6f6974
fffdbbfc:	6e6f6420 	.word	0x6e6f6420
fffdbc00:	000a2e65 	.word	0x000a2e65
fffdbc04:	7247203e 	.word	0x7247203e
fffdbc08:	69687061 	.word	0x69687061
fffdbc0c:	43207363 	.word	0x43207363
fffdbc10:	72746e6f 	.word	0x72746e6f
fffdbc14:	656c6c6f 	.word	0x656c6c6f
fffdbc18:	6f432072 	.word	0x6f432072
fffdbc1c:	6769666e 	.word	0x6769666e
fffdbc20:	74617275 	.word	0x74617275
fffdbc24:	206e6f69 	.word	0x206e6f69
fffdbc28:	656e6f64 	.word	0x656e6f64
fffdbc2c:	3e000a2e 	.word	0x3e000a2e
fffdbc30:	54524320 	.word	0x54524320
fffdbc34:	6f432043 	.word	0x6f432043
fffdbc38:	6769666e 	.word	0x6769666e
fffdbc3c:	74617275 	.word	0x74617275
fffdbc40:	206e6f69 	.word	0x206e6f69
fffdbc44:	656e6f64 	.word	0x656e6f64
fffdbc48:	3e000a2e 	.word	0x3e000a2e
fffdbc4c:	54524320 	.word	0x54524320
fffdbc50:	78452043 	.word	0x78452043
fffdbc54:	736e6574 	.word	0x736e6574
fffdbc58:	206e6f69 	.word	0x206e6f69
fffdbc5c:	666e6f63 	.word	0x666e6f63
fffdbc60:	72756769 	.word	0x72756769
fffdbc64:	6f697461 	.word	0x6f697461
fffdbc68:	6f64206e 	.word	0x6f64206e
fffdbc6c:	0a2e656e 	.word	0x0a2e656e
fffdbc70:	44203e00 	.word	0x44203e00
fffdbc74:	45204341 	.word	0x45204341
fffdbc78:	70696c63 	.word	0x70696c63
fffdbc7c:	43206573 	.word	0x43206573
fffdbc80:	69666e6f 	.word	0x69666e6f
fffdbc84:	61727567 	.word	0x61727567
fffdbc88:	6e6f6974 	.word	0x6e6f6974
fffdbc8c:	6e6f6420 	.word	0x6e6f6420
fffdbc90:	000a2e65 	.word	0x000a2e65
fffdbc94:	6150203e 	.word	0x6150203e
fffdbc98:	7474656c 	.word	0x7474656c
fffdbc9c:	6f432065 	.word	0x6f432065
fffdbca0:	6769666e 	.word	0x6769666e
fffdbca4:	74617275 	.word	0x74617275
fffdbca8:	206e6f69 	.word	0x206e6f69
fffdbcac:	656e6f64 	.word	0x656e6f64
fffdbcb0:	3e000a2e 	.word	0x3e000a2e
fffdbcb4:	6c694620 	.word	0x6c694620
fffdbcb8:	676e696c 	.word	0x676e696c
fffdbcbc:	61724620 	.word	0x61724620
fffdbcc0:	4220656d 	.word	0x4220656d
fffdbcc4:	65666675 	.word	0x65666675
fffdbcc8:	2e2e2e72 	.word	0x2e2e2e72
fffdbccc:	200a000a 	.word	0x200a000a
fffdbcd0:	6e697355 	.word	0x6e697355
fffdbcd4:	32332067 	.word	0x32332067
fffdbcd8:	74696220 	.word	0x74696220
fffdbcdc:	61726620 	.word	0x61726620
fffdbce0:	6220656d 	.word	0x6220656d
fffdbce4:	65666675 	.word	0x65666675
fffdbce8:	656d2072 	.word	0x656d2072
fffdbcec:	646f6874 	.word	0x646f6874
fffdbcf0:	726f6620 	.word	0x726f6620
fffdbcf4:	62343220 	.word	0x62343220
fffdbcf8:	6d207469 	.word	0x6d207469
fffdbcfc:	2065646f 	.word	0x2065646f
fffdbd00:	000a2021 	.word	0x000a2021
fffdbd04:	6946203e 	.word	0x6946203e
fffdbd08:	6e696c6c 	.word	0x6e696c6c
fffdbd0c:	72462067 	.word	0x72462067
fffdbd10:	20656d61 	.word	0x20656d61
fffdbd14:	66667542 	.word	0x66667542
fffdbd18:	64207265 	.word	0x64207265
fffdbd1c:	2e656e6f 	.word	0x2e656e6f
fffdbd20:	4647000a 	.word	0x4647000a
fffdbd24:	69442058 	.word	0x69442058
fffdbd28:	616c7073 	.word	0x616c7073
fffdbd2c:	6f432079 	.word	0x6f432079
fffdbd30:	6769666e 	.word	0x6769666e
fffdbd34:	74617275 	.word	0x74617275
fffdbd38:	206e6f69 	.word	0x206e6f69
fffdbd3c:	31206f74 	.word	0x31206f74
fffdbd40:	78303239 	.word	0x78303239
fffdbd44:	30303231 	.word	0x30303231
fffdbd48:	00000000 	.word	0x00000000

fffdbd4c <__FUNCTION__.5917>:
fffdbd4c:	52716946 6974756f                        FiqRoutine.

fffdbd57 <__FUNCTION__.5921>:
fffdbd57:	61746144 726f6241 756f5274 656e6974     DataAbortRoutine
	...

fffdbd68 <__FUNCTION__.5925>:
fffdbd68:	65646e55 656e6966 736e4964 63757274     UndefinedInstruc
fffdbd78:	6e6f6974 74756f52 00656e69              tionRoutine.

fffdbd84 <__FUNCTION__.5929>:
fffdbd84:	66657250 68637465 726f6241 756f5274     PrefetchAbortRou
fffdbd94:	656e6974                                 tine.

fffdbd99 <__FUNCTION__.5933>:
fffdbd99:	52637653 6974756f 0800656e 0f000000     SvcRoutine......
fffdbda9:	10000000 18000000 00000000 00000000     ................
fffdbdb9:	00000000 20000000                        ....... ...

fffdbdc4 <GFXI_Regs>:
fffdbdc4:	f000e000 50534944 54534448 20202020     ....DISPHDST    
fffdbdd4:	00000020 00000000 00000000 00000000      ...............
fffdbde4:	00000000 f000e004 44414246 2020204c     ........FBADL   
fffdbdf4:	20202020 00000020 00000000 00000000          ...........
	...
fffdbe0c:	f000e008 44414246 2020204d 20202020     ....FBADM       
fffdbe1c:	00000020 00000000 00000000 00000000      ...............
fffdbe2c:	00000000 f000e00c 44414246 20202048     ........FBADH   
fffdbe3c:	20202020 00000020 00000000 00000000          ...........
	...
fffdbe54:	f000e010 4e435648 20204c54 20202020     ....HVCNTL      
fffdbe64:	00000020 00000000 00000000 00000000      ...............
fffdbe74:	00000000 f000e014 4e435648 20204854     ........HVCNTH  
fffdbe84:	20202020 00000020 00000000 00000000          ...........
	...
fffdbe9c:	f000e018 43504248 204c544e 20202020     ....HBPCNTL     
fffdbeac:	00000020 00000000 00000000 00000000      ...............
fffdbebc:	00000000 f000e01c 43504248 2048544e     ........HBPCNTH 
fffdbecc:	20202020 00000020 00000000 00000000          ...........
	...
fffdbee4:	f000e020 4e435656 20204c54 20202020      ...VVCNTL      
fffdbef4:	00000020 00000000 00000000 00000000      ...............
fffdbf04:	00000000 f000e024 4e435656 20204854     ....$...VVCNTH  
fffdbf14:	20202020 00000020 00000000 00000000          ...........
	...
fffdbf2c:	f000e028 43504256 204c544e 20202020     (...VBPCNTL     
fffdbf3c:	00000020 00000000 00000000 00000000      ...............
fffdbf4c:	00000000 f000e02c 43504256 2048544e     ....,...VBPCNTH 
fffdbf5c:	20202020 00000020 00000000 00000000          ...........
	...
fffdbf74:	f000e030 50525543 4c58534f 20202020     0...CURPOSXL    
fffdbf84:	00000020 00000000 00000000 00000000      ...............
fffdbf94:	00000000 f000e034 50525543 4858534f     ....4...CURPOSXH
fffdbfa4:	20202020 00000020 00000000 00000000          ...........
	...
fffdbfbc:	f000e038 50525543 4c59534f 20202020     8...CURPOSYL    
fffdbfcc:	00000020 00000000 00000000 00000000      ...............
fffdbfdc:	00000000 f000e03c 50525543 4859534f     ....<...CURPOSYH
fffdbfec:	20202020 00000020 00000000 00000000          ...........
	...
fffdc004:	f000e040 4c4c5047 49444e49 20202056     @...GPLLINDIV   
fffdc014:	00000020 00000000 00000000 00000000      ...............
fffdc024:	00000000 f000e044 4c4c5047 49444246     ....D...GPLLFBDI
fffdc034:	20202056 00000020 00000000 00000000     V    ...........
	...
fffdc04c:	f000e048 4c4c5047 20205453 20202020     H...GPLLST      
fffdc05c:	00000020 00000000 00000000 00000000      ...............
fffdc06c:	00000000 f000e04c 484d564b 20545344     ....L...KVMHDST 
fffdc07c:	20202020 00000020 00000000 00000000          ...........
	...
fffdc094:	f000e050 444c4f43 20205045 20202020     P...COLDEP      
fffdc0a4:	00000020 00000000 00000000 00000000      ...............
fffdc0b4:	00000000 f000e054 53494456 444e4550     ....T...VDISPEND
fffdc0c4:	20202020 00000020 00000000 00000000          ...........
	...
fffdc0dc:	f000e058 414c4256 54534b4e 20202052     X...VBLANKSTR   
fffdc0ec:	00000020 00000000 00000000 00000000      ...............
fffdc0fc:	00000000 f000e05c 414c4256 4e454b4e     ....\...VBLANKEN
fffdc10c:	20202044 00000020 00000000 00000000     D    ...........
	...
fffdc124:	f000e060 544f5456 20204c41 20202020     `...VTOTAL      
fffdc134:	00000020 00000000 00000000 00000000      ...............
fffdc144:	00000000 f000e064 47494856 20202048     ....d...VHIGH   
fffdc154:	20202020 00000020 00000000 00000000          ...........
	...
fffdc16c:	f000e068 53494448 444e4550 20202020     h...HDISPEND    
fffdc17c:	00000020 00000000 00000000 00000000      ...............
fffdc18c:	00000000 f000e06c 414c4248 54534b4e     ....l...HBLANKST
fffdc19c:	20202052 00000020 00000000 00000000     R    ...........
	...
fffdc1b4:	f000e070 414c4248 4e454b4e 20202044     p...HBLANKEND   
fffdc1c4:	00000020 00000000 00000000 00000000      ...............
fffdc1d4:	00000000 f000e074 544f5448 20204c41     ....t...HTOTAL  
fffdc1e4:	20202020 00000020 00000000 00000000          ...........
	...
fffdc1fc:	f000e078 57525543 48544449 20202020     x...CURWIDTH    
fffdc20c:	00000020 00000000 00000000 00000000      ...............
fffdc21c:	00000000 f000e07c 48525543 48474945     ....|...CURHEIGH
fffdc22c:	20202054 00000020 00000000 00000000     T    ...........
	...
fffdc244:	f000e080 48525543 204c5853 20202020     ....CURHSXL     
fffdc254:	00000020 00000000 00000000 00000000      ...............
fffdc264:	00000000 f000e084 31525047 20202032     ........GPR12   
fffdc274:	20202020 00000020 00000000 00000000          ...........
	...
fffdc28c:	f000e088 31525047 20202033 20202020     ....GPR13       
fffdc29c:	00000020 00000000 00000000 00000000      ...............
fffdc2ac:	00000000 f000e08c 31525047 20202034     ........GPR14   
fffdc2bc:	20202020 00000020 00000000 00000000          ...........
	...
fffdc2d4:	f000e090 31525047 20202035 20202020     ....GPR15       
fffdc2e4:	00000020 00000000 00000000 00000000      ...............
fffdc2f4:	00000000                                ....

fffdc2f8 <__FUNCTION__.5973>:
fffdc2f8:	63656843 6c435f6b 736b636f 69616d00     Check_Clocks.mai
fffdc308:	00632e6e 2a2a2a0a 46202a2a 554c4941     n.c..***** FAILU
fffdc318:	2a204552 2a2a2a2a 3a746120 2873250a     RE ***** at:.%s(
fffdc328:	28296425 3a297325 4627000a 20275149     %d)(%s):..'FIQ' 
fffdc338:	6e657665 61682074 65622073 74206e65     event has been t
fffdc348:	67676972 64657265 20746120 72646461     riggered at addr
fffdc358:	20737365 30257830 2e586c38 27000a20     ess 0x%08lX. ..'
fffdc368:	61746144 6f624120 20277472 6e657665     Data Abort' even
fffdc378:	61682074 65622073 74206e65 67676972     t has been trigg
fffdc388:	64657265 20746120 72646461 20737365     ered at address 
fffdc398:	30257830 2e786c38 27000a20 65646e55     0x%08lx. ..'Unde
fffdc3a8:	656e6966 6e492064 75727473 6f697463     fined Instructio
fffdc3b8:	6520276e 746e6576 73616820 65656220     n' event has bee
fffdc3c8:	7274206e 65676769 20646572 61207461     n triggered at a
fffdc3d8:	65726464 30207373 38302578 6920786c     ddress 0x%08lx i
fffdc3e8:	5241206e 7473204d 20657461 3020726f     n ARM state or 0
fffdc3f8:	38302578 6920786c 6854206e 20626d75     x%08lx in Thumb 
fffdc408:	74617473 0a202e65 72502700 74656665     state. ..'Prefet
fffdc418:	41206863 74726f62 76652027 20746e65     ch Abort' event 
fffdc428:	20736168 6e656562 69727420 72656767     has been trigger
fffdc438:	61206465 64612074 73657264 78302073     ed at address 0x
fffdc448:	6c383025 0a202e78 56532700 65202743     %08lx. ..'SVC' e
fffdc458:	746e6576 73616820 65656220 7274206e     vent has been tr
fffdc468:	65676769 20646572 6d6f7266 64646120     iggered from add
fffdc478:	73736572 25783020 786c3830 000a202e     ress 0x%08lx. ..
fffdc488:	202a2020 434c4c50 75254e4f 30203d20       * PLLCON%u = 0
fffdc498:	38302578 202e586c 50282000 69204c4c     x%08lX. . (PLL i
fffdc4a8:	6e692073 776f5020 442d7265 296e776f     s in Power-Down)
fffdc4b8:	20000a2e 756c2528 7a484d20 5000203b     ... (%lu MHz; .P
fffdc4c8:	69204c4c 6f6e2073 6f6c2074 64656b63     LL is not locked
fffdc4d8:	57502000 5f444752 73205350 616e6769     . PWRGD_PS signa
fffdc4e8:	7369206c 776f6c20 6553202e 57502074     l is low. Set PW
fffdc4f8:	5f444752 68205350 20686769 20646e61     RGD_PS high and 
fffdc508:	20797274 69616761 3e002e6e 52575020     try again..> PWR
fffdc518:	505f4447 69732053 6c616e67 20736920     GD_PS signal is 
fffdc528:	68676968 0a000a2e 7544000a 4720706d     high......Dump G
fffdc538:	68706172 20736369 65726f43 46472820     raphics Core (GF
fffdc548:	49202958 726f666e 6974616d 52206e6f     X) Information R
fffdc558:	73696765 73726574 65522820 4f2d6461     egisters (Read-O
fffdc568:	29796c6e 25203e00 203d2073 30257830     nly).> %s = 0x%0
fffdc578:	000a5832 73726150 3a676e69 203e000a     2X..Parsing:..> 
fffdc588:	636c6143 74616c75 50206465 20474c4c     Calculated PLLG 
fffdc598:	7074756f 203a7475 4d5b7525 205d7a48     output: %u[MHz] 
fffdc5a8:	756f7228 6465646e 3e000a29 73655220     (rounded)..> Res
fffdc5b8:	74756c6f 3a6e6f69 78752520 25787525     olution: %ux%ux%
fffdc5c8:	70706275 203e000a 43544e49 203d2052     ubpp..> INTCR = 
fffdc5d8:	30257830 20786c38 5220000a 61656c65     0x%08lx .. Relea
fffdc5e8:	50206573 72204943 74657365 6f662820     se PCI reset (fo
fffdc5f8:	64656372 66666f20 726f6620 736f4820     rced off for Hos
fffdc608:	73656c74 6f6d2073 6f206564 68772072     tless mode or wh
fffdc618:	48206e65 2074736f 70207369 7265776f     en Host is power
fffdc628:	642d6465 296e776f 3e000a2e 6c655220     ed-down)...> Rel
fffdc638:	65736165 6e692064 6e726574 6e206c61     eased internal n
fffdc648:	52494350 202e5453 65736552 73692074     PCIRST. Reset is
fffdc658:	726f6620 20646563 2e66666f 65685420      forced off. The
fffdc668:	706e6920 6c207475 6c657665 20666f20      input level of 
fffdc678:	4943506e 20545352 20646e61 20656874     nPCIRST and the 
fffdc688:	20494350 72707845 20737365 65666572     PCI Express refe
fffdc698:	636e6572 6c632065 206b636f 73656f64     rence clock does
fffdc6a8:	2074276e 65666661 74207463 6f206568     n't affect the o
fffdc6b8:	61726570 6e6f6974 20666f20 20494350     peration of PCI 
fffdc6c8:	69766564 2e736563 6553000a 7463656c     devices...Select
fffdc6d8:	43414420 0a202e32 43203e00 7261656c      DAC2. ..> Clear
fffdc6e8:	4f504720 4c455343 74696220 6553202e      GPOCSEL bit. Se
fffdc6f8:	7463656c 59535620 2c32434e 59534820     lect VSYNC2, HSY
fffdc708:	2c32434e 43444420 4c435332 4444202c     NC2, DDC2SCL, DD
fffdc718:	44533243 0a202e41 56203e00 434e5953     C2SDA. ..> VSYNC
fffdc728:	48202c32 434e5953 44202c32 53324344     2, HSYNC2, DDC2S
fffdc738:	202c4c43 32434444 20414453 20657261     CL, DDC2SDA are 
fffdc748:	656c6573 64657463 000a202e 6553203e     selected. ..> Se
fffdc758:	41442074 4f534f43 74205256 3130206f     t DACOSOVR to 01
fffdc768:	44202e62 6f204341 75707475 73692074     b. DAC output is
fffdc778:	63657320 7463656c 62206465 41442079      seclected by DA
fffdc788:	4c455343 74696220 000a202e 4144203e     CSEL bit. ..> DA
fffdc798:	756f2043 74757074 20736920 6c636573     C output is secl
fffdc7a8:	65746365 79622064 43414420 204c4553     ected by DACSEL 
fffdc7b8:	2e746962 3e000a20 74655320 43414420     bit. ..> Set DAC
fffdc7c8:	204c4553 2e746962 6c655320 20746365     SEL bit. Select 
fffdc7d8:	32434144 74756f20 2e747570 3e000a20     DAC2 output. ..>
fffdc7e8:	43414420 756f2032 74757074 20736920      DAC2 output is 
fffdc7f8:	656c6573 64657463 000a202e 74696e49     selected. ..Init
fffdc808:	58464720 73752820 20676e69 32424841      GFX (using AHB2
fffdc818:	20494350 64697262 20296567 31206f74     PCI bridge) to 1
fffdc828:	78303239 30303231 62363140 0a207469     920x1200@16bit .
fffdc838:	69614600 2064656c 49206f74 2074696e     .Failed to Init 
fffdc848:	20584647 31206f74 78303239 30303231     GFX to 1920x1200
fffdc858:	62363140 0a207469 69614600 2064656c     @16bit ..Failed 
fffdc868:	63206f74 69666e6f 65727567 58464720     to configure GFX
fffdc878:	6843202e 206b6365 69676572 72657473     . Check register
fffdc888:	666e6920 000a2e6f 20584647 666e6f63      info...GFX conf
fffdc898:	72756769 6f697461 7573206e 65656363     iguration succee
fffdc8a8:	000a2e64 74696e49 58464720 73752820     d...Init GFX (us
fffdc8b8:	20676e69 32424841 20494350 64697262     ing AHB2PCI brid
fffdc8c8:	20296567 31206f74 78343230 40383637     ge) to 1024x768@
fffdc8d8:	69623631 000a2074 6c696146 74206465     16bit ..Failed t
fffdc8e8:	6e49206f 47207469 74205846 3031206f     o Init GFX to 10
fffdc8f8:	37783432 31403836 74696236 6553000a     24x768@16bit..Se
fffdc908:	46472074 656d2058 79726f6d 206f7420     t GFX memory to 
fffdc918:	000a2030 323a3631 33333a36 6c754a00     0 ..16:26:33.Jul
fffdc928:	20332020 30323032 75422000 20646c69       3 2020. Build 
fffdc938:	65746144 7325203a 2073252c 68746977     Date: %s,%s with
fffdc948:	43434720 2e752520 252e7525 3e002075      GCC %u.%u.%u .>
fffdc958:	65764f20 64697272 65762065 726f7463      Override vector
fffdc968:	62617420 0a2e656c 3e202000 614d203e      table...  >> Ma
fffdc978:	64657070 72696620 32207473 62203635     pped first 256 b
fffdc988:	73657479 20666f20 72646461 20737365     ytes of address 
fffdc998:	46467830 305f4646 20303030 61206f74     0xFFFF_0000 to a
fffdc9a8:	65726464 30207373 46464678 30305f44     ddress 0xFFFD_00
fffdc9b8:	202e3030 2020000a 53203e3e 43207465     00. ..  >> Set C
fffdc9c8:	76205550 6f746365 61742072 20656c62     PU vector table 
fffdc9d8:	61206f74 65726464 30207373 46464678     to address 0xFFF
fffdc9e8:	30305f46 202e3030 4320000a 2065646f     F_0000. .. Code 
fffdc9f8:	20736177 20746f6e 706d6f63 64656c69     was not compiled
fffdca08:	206f7420 72646461 20737365 30307830      to address 0x00
fffdca18:	30303030 6f203030 78302072 44464646     000000 or 0xFFFD
fffdca28:	30303030 6e69203b 72726574 73747075     0000; interrupts
fffdca38:	6c697720 6f6e206c 6f772074 75206b72      will not work u
fffdca48:	73656c6e 6f632073 76206564 6f746365     nless code vecto
fffdca58:	61742072 20656c62 20657261 69706f63     r table are copi
fffdca68:	21206465 20000a20 70736944 2079616c     ed ! .. Display 
fffdca78:	656d6f53 69684320 6e492070 00206f66     Some Chip Info .
fffdca88:	6f46203e 20646e75 4d43504e 78303537     > Found NPCM750x
fffdca98:	434d4220 69686320 65762070 6f697372      BMC chip versio
fffdcaa8:	315a206e 3e000a2e 756f4620 4e20646e     n Z1...> Found N
fffdcab8:	374d4350 20783035 20434d42 70696863     PCM750x BMC chip
fffdcac8:	72657620 6e6f6973 2e314120 6e55000a      version A1...Un
fffdcad8:	776f6e6b 504e206e 35374d43 42207830     known NPCM750x B
fffdcae8:	6320434d 20706968 73726576 2e6e6f69     MC chip version.
fffdcaf8:	756f4620 5020646e 3d444944 30257830      Found PDID=0x%0
fffdcb08:	0a586c38 50203e00 20734c4c 20646e61     8lX..> PLLs and 
fffdcb18:	636f6c43 203a736b 2020000a 4c43202a     Clocks: ..  * CL
fffdcb28:	4c45534b 30203d20 38302578 0a20586c     KSEL = 0x%08lX .
fffdcb38:	20202000 43202d20 43205550 6b636f6c     .    - CPU Clock
fffdcb48:	756f5320 20656372 55504328 45534b43      Source (CPUCKSE
fffdcb58:	3d20294c 5000203e 30204c4c 000a202e     L) => .PLL 0. ..
fffdcb68:	204c4c50 0a202e31 4b4c4300 20464552     PLL 1. ..CLKREF 
fffdcb78:	636f6c63 6428206b 67756265 0a202e29     clock (debug). .
fffdcb88:	70794200 20737361 636f6c63 7266206b     .Bypass clock fr
fffdcb98:	70206d6f 53206e69 50425359 28204b43     om pin SYSBPCK (
fffdcba8:	75626564 202e2967 2020000a 202d2020     debug). ..    - 
fffdcbb8:	6f6d654d 43207972 72746e6f 656c6c6f     Memory Controlle
fffdcbc8:	6c432072 206b636f 72756f53 28206563     r Clock Source (
fffdcbd8:	4b43434d 294c4553 203e3d20 4b4c4300     MCCKSEL) => .CLK
fffdcbe8:	20464552 636f6c43 6428206b 67756265     REF Clock (debug
fffdcbf8:	0a202e29 42434d00 204b4350 636f6c43     ). ..MCBPCK Cloc
fffdcc08:	6428206b 67756265 0a202e29 766e4900     k (debug). ..Inv
fffdcc18:	64696c61 756f7320 2e656372 2a202000     alid source..  *
fffdcc28:	4b4c4320 31564944 30203d20 38302578      CLKDIV1 = 0x%08
fffdcc38:	0a20586c 20202000 43203e20 28324b4c     lX ..    > CLK2(
fffdcc48:	31495841 3d202936 55504320 6f6c6320     AXI16) = CPU clo
fffdcc58:	202e6b63 2020000a 203e2020 324b4c43     ck. ..    > CLK2
fffdcc68:	49584128 20293631 5043203d 6c632055     (AXI16) = CPU cl
fffdcc78:	206b636f 202e322f 20000a20 3e202020     ock /2.  ..    >
fffdcc88:	4b4c4320 203d2034 324b4c43 20000a20      CLK4 = CLK2 .. 
fffdcc98:	3e202020 4b4c4320 203d2034 324b4c43        > CLK4 = CLK2
fffdcca8:	0a20322f 20202000 43203e20 20344b4c     /2 ..    > CLK4 
fffdccb8:	4c43203d 332f324b 20000a20 3e202020     = CLK2/3 ..    >
fffdccc8:	4b4c4320 203d2034 324b4c43 0a20342f      CLK4 = CLK2/4 .
fffdccd8:	2a202000 4b4c4320 32564944 30203d20     .  * CLKDIV2 = 0
fffdcce8:	38302578 0a20586c 2a202000 4b4c4320     x%08lX ..  * CLK
fffdccf8:	33564944 30203d20 38302578 0a20586c     DIV3 = 0x%08lX .
fffdcd08:	20202000 74736554 6f626120 20207472     .   Test abort  
fffdcd18:	2a2a000a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
fffdcd28:	000a202a 54202020 20747365 74697865     * ..   Test exit
fffdcd38:	74697720 72652068 20726f72 206d756e      with error num 
fffdcd48:	20206425 0a202020 54202000 20747365     %d     ..  Test 
fffdcd58:	74697865 74697720 6f6e2068 72726520     exit with no err
fffdcd68:	2073726f 20202020 0a202020               ors        ..

fffdcd75 <pErrorMsg>:
fffdcd75:	6f727245 6d203a72 61737365 6c206567     Error: message l
fffdcd85:	74676e65 78652068 64656563 726f4620     ength exceed For
fffdcd95:	7474616d 65546465 75427478 72656666     mattedTextBuffer
fffdcda5:	7a697320 0a202e65 6325000d 3b75255b      size. ...%c[%u;
fffdcdb5:	006d7525 2a2a2a0a 2a2a2a2a 2a2a2a2a     %um..***********
fffdcdc5:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
fffdcdd5:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
fffdcde5:	2a2a2a2a 2a2a2a2a 2008000a 78300008     ********... ..0x
fffdcdf5:	6c383025 30203a58 38302578 3020586c     %08lX: 0x%08lX 0
fffdce05:	38302578 3020586c 38302578 3020586c     x%08lX 0x%08lX 0
fffdce15:	38302578 0a20586c 25783000 586c3830     x%08lX ..0x%08lX
fffdce25:	3000203a 34302578 00202058 30257830     : .0x%04X  .0x%0
fffdce35:	20205832 25783000 00583230 61202d20     2X  .0x%02X. - a
fffdce45:	74726f62 62206465 73752079 0a2e7265     borted by user..
fffdce55:	25783000 2000786c 6e49202d 696c6176     .0x%lx. - Invali
fffdce65:	6f662064 74616d72 6261202c 2e74726f     d format, abort.
fffdce75:	7830000a 6c383025 6c250058 65000064     ..0x%08lX.%ld..e
fffdce85:	00646c25                                 %ld....

fffdce8c <basefix.7392>:
fffdce8c:	0001000a 00030002 00050004 00070006     ................
fffdce9c:	00090008 000b000a 000d000c 000f000e     ................
fffdceac:	00000010 00000043 49534f50 00000058     ....C...POSIX...
fffdcebc:	0000002e 0000666e 74696e69 00000079     ....nf..inity...
fffdcecc:	00006e61                                an..

fffdced0 <fpi.6172>:
fffdced0:	00000035 fffffbce 000003cb 00000001     5...............
fffdcee0:	00000000                                ....

fffdcee4 <fpinan.6208>:
fffdcee4:	00000034 fffffbce 000003cb 00000001     4...............
fffdcef4:	00000000                                ....

fffdcef8 <tinytens>:
fffdcef8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
fffdcf08:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
fffdcf18:	64ac6f43 11680628                       Co.d(.h.

fffdcf20 <_ctype_>:
fffdcf20:	20202000 20202020 28282020 20282828     .         ((((( 
fffdcf30:	20202020 20202020 20202020 20202020                     
fffdcf40:	10108820 10101010 10101010 10101010      ...............
fffdcf50:	04040410 04040404 10040404 10101010     ................
fffdcf60:	41411010 41414141 01010101 01010101     ..AAAAAA........
fffdcf70:	01010101 01010101 01010101 10101010     ................
fffdcf80:	42421010 42424242 02020202 02020202     ..BBBBBB........
fffdcf90:	02020202 02020202 02020202 10101010     ................
fffdcfa0:	00000020 00000000 00000000 00000000      ...............
	...

fffdd024 <__hexdig>:
	...
fffdd054:	13121110 17161514 00001918 00000000     ................
fffdd064:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
fffdd084:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

fffdd128 <__mprec_bigtens>:
fffdd128:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
fffdd138:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
fffdd148:	7f73bf3c 75154fdd                       <.s..O.u

fffdd150 <__mprec_tens>:
fffdd150:	00000000 3ff00000 00000000 40240000     .......?......$@
fffdd160:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
fffdd170:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
fffdd180:	00000000 412e8480 00000000 416312d0     .......A......cA
fffdd190:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
fffdd1a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
fffdd1b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
fffdd1c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
fffdd1d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
fffdd1e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
fffdd1f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
fffdd200:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
fffdd210:	79d99db4 44ea7843                       ...yCx.D

fffdd218 <p05.6092>:
fffdd218:	00000005 00000019 0000007d              ........}...
